* House keeping
#+begin_src elisp :results none
  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)
  (pyvenv-workon "feniax")
#+end_src

* Folder structure
#+begin_src markdown :tangle "./README.md" :results none
  # Folder structure
  - Parts: BDF files with the structural model parts
  - DLMs: generated DLM models
#+end_src

#+begin_src python
  import pathlib
  pathlib.Path('./FEM').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./AERO').mkdir(parents=True, exist_ok=True)  
  pathlib.Path('./NASTRAN/Paraview').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/GAFs').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/DLMs').mkdir(parents=True, exist_ok=True)
#+end_src

#+RESULTS:
: None

* Modal Solution
:PROPERTIES:
:header-args: :tangle ./modal_solution.py :session *pybug* :comments yes
:END:

** INPUT PARAMETERS
#+NAME: parameters_modal0
#+begin_src python :results none
  import feniax.unastran.op4handler as op4handler
  from pyNastran.bdf.bdf import BDF
  from feniax.unastran.asetbuilder import BuildAsetModel
  import feniax.plotools.nastranvtk.bdfdef as bdfdef
  import numpy as np

  num_modes = 50
  sol = "cao" # {c,e}{a,f}{o,p}
  WRITE_GRID= False
  WRITE_ASETS= False
  ASET_MODEL_FULL = False  # ASETS at every CONM2 of half the size (full model gives
                           # problems in 103 and might be too large any way)
#+end_src

#+NAME: parameters_modal
#+begin_src python :var output="num_modes" :results value :noweb yes :tangle no
  <<parameters_modal0>>
  eval(output)
#+end_src

#+RESULTS: parameters_modal
: 100

** ASETs generation

- Generation of ASET (condensed) model based on CONM2 data
- Generation of grid file for FENIAX: looking at the CONM2 alignment, one picks a reference node (clamped one in a fixed model), and from it nodes in each component stream outwards.
  
#+begin_src python
  bdf = BDF()#debug=False)
  bdf.read_bdf("./NASTRAN/BUG_103.bdf", validate=False)

  # bdf_conm2 = BDF()
  # conm2_ids = list(range(314, 345)) + [376, 377, 378]
  # for cmi in conm2_ids:
  #     conm2 = bdf.masses[cmi]
  #     bdf_conm2.add_conm2(conm2.eid, conm2.nid, conm2.mass, conm2.cid, conm2.X, conm2.I)

  # bdf_conm2.write_bdf("./Parts/MTOW_FUEL_RWBOXmod.bdf")

  ######## BUILD STRUCTURAL MODEL ##############

  if ASET_MODEL_FULL:                         
      # Initial model
      components_ids = dict()
      components_ids['FusWing'] = [2000]
      if sol[0] == "c": # clamped model
          components_ids['FusBack'] = [1006, 1007, 1008, 1009]
      elif sol[0] == "e": # free model
          components_ids['FusBack'] = [1005, 1006, 1007, 1008, 1009]
      components_ids['FusFront'] = [1004, 1003, 1002, 1001, 1000]
      components_ids['RWing'] = list(range(2001, 2053))
      components_ids['LWing'] = list(range(10002001, 10002053))
      components_ids['FusTail'] = [1010]
      components_ids['VTP'] = list(range(3000, 3010))
      components_ids['HTP'] = [4000]
      components_ids['VTPTail'] = [3010]
      components_ids['RHTP'] = list(range(4001, 4014))
      components_ids['LHTP'] = list(range(10004001, 10004014))
      model_asets = BuildAsetModel(components_ids, bdf, clamped_node=1005)
      if WRITE_ASETS:
          model_asets.write_asets("./NASTRAN/Asets/asets_clamped.bdf")
      if WRITE_GRID:
          if sol[0] == "c": # clamped model
              model_asets.write_grid("./FEM/structuralGridfullclamped")
          elif sol[0] == "e": # free model
              model_asets.write_grid("./FEM/structuralGridfull")

  else:
      # Initial model removing some ASET nodes along the wing
      components_ids = dict()
      #components_ids['FusWing'] = [2000]
      if sol[0] == "c": # clamped model
          components_ids['FusBack'] = [1006, 1007, 1008, 1009]
      elif sol[0] == "e": # free model
          components_ids['FusBack'] = [1005, 1006, 1007, 1008, 1009]
      components_ids['FusFront'] = [1004, 1003, 1002, 1001, 1000]
      components_ids['RWing'] = [2001, 2003, 2005, 2008, 2010] + list(range(2012, 2053, 2))
      components_ids['LWing'] = ([10002001, 10002003, 10002005, 10002008, 10002010] +
                                 list(range(10002012, 10002053, 2)))
      components_ids['FusTail'] = [1010]
      components_ids['VTP'] = list(range(3000+1, 3010-1))
      components_ids['HTP'] = [4000]
      components_ids['VTPTail'] = [3010]
      components_ids['RHTP'] = list(range(4001, 4014))
      components_ids['LHTP'] = list(range(10004001, 10004014))

      model_asets = BuildAsetModel(components_ids, bdf, clamped_node=1005)
      if WRITE_ASETS:
          model_asets.write_asets("./NASTRAN/Asets/asets_clamped_reduced.bdf")
      if WRITE_GRID:
          if sol[0] == "c": # clamped model
              model_asets.write_grid("./FEM/structuralGridclamped")
          elif sol[0] == "e": # free model
              model_asets.write_grid("./FEM/structuralGrid")
#+end_src

** bdf models
:PROPERTIES:
:header-args: :noweb yes :comments no
:END:

- Run BUG 103 solution with clamped and free-free conditions (label c and e respectively).
- Condensed and full models (a and f labels)
- Extract binary OP2 from which to read eigenvectors or pch file to read FE matrices (o and p)
  
#+NAME: bdf_BUG103case
#+begin_src org :tangle no 
  SOL 103
  CEND
  TITLE=BUG model #                                 
  ECHO=NONE                      	  
  SPC = 1
  SPCF = ALL
  DISPLACEMENT=ALL
  METHOD = 100
#+end_src
#+NAME: bdf_BUG103bulk
#+begin_src org :tangle no 
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ BULK   						    
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  BEGIN BULK
  PARAM,AUTOMSET,YES
  $ PARAM,BAILOUT,-1
  $ PARAM,GRDPNT,0                                          
  $ PARAM,K6ROT,1.0
  $ PARAM,SNORM,20.0
  $ PARAM,MAXRATIO,1.0E07
  $ PARAM,EXTOUT,DMIGPCH
  EIGRL,100,,,<<parameters_modal(output="num_modes")>>

#+end_src

*** Clamped, asets, OP2 (cao)
#+begin_src org :tangle "./NASTRAN/BUG103_cao.bdf"
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,POST,-1

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE								      $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       123456  1005

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_clamped_reduced.bdf'

  ENDDATA
#+end_src
*** Free, asets, OP2 (eao)
#+begin_src org :tangle "./NASTRAN/BUG103_eao.bdf" 
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,POST,-1

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_free_reduced.bdf'

  ENDDATA
#+end_src
*** Clamped, asets, pch (cap)
#+begin_src org :tangle "./NASTRAN/BUG103_cap.bdf"
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,EXTOUT,DMIGPCH

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE								      $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       123456  1005

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_clamped_reduced.bdf'

  ENDDATA
#+end_src
*** Free, asets, pch (eap)
#+begin_src org :tangle "./NASTRAN/BUG103_eap.bdf" 
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,EXTOUT,DMIGPCH

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_free_reduced.bdf'

  ENDDATA
#+end_src
*** Clamped, full, OP2 (cfo)
#+begin_src org :tangle "./NASTRAN/BUG103_cfo.bdf" 
  <<bdf_BUG103>>  
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE								      $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  
  SPC1    1       123456  1005

  ENDDATA
#+end_src
*** Free, full, OP2 (efo)
#+begin_src org :tangle "./NASTRAN/BUG103_efo.bdf" 
  <<bdf_BUG103>>
  ENDDATA
#+end_src
** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :noweb yes :tangle run_modal.sh :results none
  cd NASTRAN
  source run_nastran.sh
  run_nastran BUG103_<<parameters_modal(output="sol")>>.bdf
  move_outputs BUG103_<<parameters_modal(output="sol")>>.bdf
#+end_src

** Build modes in OP4, map to ASETs and paraview plot
- Get the modal shapes of the full model from the OP2 file and write them in OP4 format (for use in aerodynamics).
- Plot the modes in Paraview. 
- If running a condensed model, pick the nodes where the asets are and save them to a file for use in FENIAX. To be sure there is no mismatch between aero matrices and modes (change of signs for instance).
  
#+begin_src python :results none  :noweb yes
  eigs, modes = op4handler.write_op4modes(f"./NASTRAN/simulations_out/BUG103_{sol}.bdf",
                                          num_modes,
                                          op4_name=f"./NASTRAN/data_out/Phi{num_modes}_{sol}",
                                          return_modes=True)
  bdf_file = f"./NASTRAN/BUG103_{sol}.bdf"
  bdf = BDF()
  bdf.read_bdf(bdf_file)
  node_ids = bdf.node_ids
  sorted_nodeids = sorted(node_ids)
  asets_ids = bdf.asets[0].node_ids
  asets_idsfull = np.array([sorted_nodeids.index(ai) for ai in asets_ids])
  modes4simulations = modes[:, asets_idsfull]
  SAVE = False
  if SAVE:
      np.save(f"./FEM/eigenvecs_{num_modes}.npy", modes4sims.T)
      np.save(f"./FEM/eigenvals_{num_modes}.npy", eigs)
#+end_src

*** VTK modes
Plot the modal shapes in Paraview
#+begin_src python
  op2_file = f"./NASTRAN/simulations_out/BUG103_{sol}.op2" 
  bdf_file = f"./NASTRAN/BUG103_{sol}.bdf"   
  bdfdef.vtkModes_fromop2(bdf_file,
                          op2_file,
                          scale = 100.,
                          modes2plot=list(range(num_modes)),
                          write_path=f"./NASTRAN/Paraview/Modes_{sol}/",
                          plot_ref=False)


#+end_src

** Read pch
Read the pch file and save FE matrices to FEM folder

#+begin_src python
  import feniax.unastran.matrixbuilder as matrixbuilder

  id_list,stiffnessMatrix,massMatrix = matrixbuilder.read_pch("BUG_103cap.pch")
  SAVE_FE = False
  if SAVE_FE:
      np.save("./FEM/Ka.py", stiffnessMatrix)
      np.save("./FEM/Ma.py", massMatrix)
    
#+end_src

* DLM generation
  :PROPERTIES:
  :header-args: :session *pybug* :tangle ./dlm.py :comments yes
  :END:
** INPUT PARAMETERS
#+NAME: parameters_dlm0
#+begin_src python
  import json
  from feniax.unastran.aero import GenDLMPanels
  from pyNastran.bdf.bdf import BDF
  import numpy as np
  import feniax.aeromodal.panels as panels
  import copy
  PRINT_CAEROS = True
  ######## Set discretisation MODEL ##############

  nchord_wing = 7
  nchord_htp = 7
  label_dlm = f"d1c{nchord_wing}"
  dlm_aeros = dict(RWing1=dict(nspan=2, nchord=nchord_wing),
               RWing2=dict(nspan=3, nchord=nchord_wing),
               RWing3=dict(nspan=9, nchord=nchord_wing),
               RWing4=dict(nspan=6, nchord=nchord_wing),
               RWing5=dict(nspan=4, nchord=nchord_wing),
               RHTP=dict(nspan=6, nchord=nchord_htp)
             )

  dlm_aeros["LWing1"] = copy.copy(dlm_aeros["RWing1"])
  dlm_aeros["LWing2"] = copy.copy(dlm_aeros["RWing2"])
  dlm_aeros["LWing3"] = copy.copy(dlm_aeros["RWing3"])
  dlm_aeros["LWing4"] = copy.copy(dlm_aeros["RWing4"])
  dlm_aeros["LWing5"] = copy.copy(dlm_aeros["RWing5"])
  dlm_aeros["LHTP"] = copy.copy(dlm_aeros["RHTP"])

  # CAEROS IDs in the original model (right side only)
  aeros2ids = dict(RWing1=3504001,
                   RWing2=3500001,
                   RWing3=3501001,
                   RWing4=3502001,
                   RWing5=3503001,
                   RHTP=3600001)

  with open(f"./NASTRAN/DLMs/input_{label_dlm}.json", "w") as fp:
      json.dump(dlm_aeros, fp)  # encode dict into JSON
#+end_src

#+RESULTS: parameters_dlm0

#+NAME: parameters_dlm
#+begin_src python :var output="num_modes" :results value :tangle no :noweb yes
  <<parameters_dlm0>>
  eval(output)
#+end_src

** Build
Build the aero model based on discretisation and the right-hand side aero built initially in BUGaero1.bdf
#+NAME: DLMbuild
#+begin_src python :results none

  # Read old model with right side of CAEROS
  bdfaero = BDF()#debug=False)
  bdfaero.read_bdf("./NASTRAN/BUGaero1.bdf", validate=False, punch=False)

  if PRINT_CAEROS:
      for ki, vi in bdfaero.caeros.items():
          print(f"*{ki}*-p1: {vi.p1}")
          print(f"*{ki}*-p4: {vi.p4}")
          print(f"*{ki}*-x12: {vi.x12}")
          print(f"*{ki}*-x43: {vi.x43}")

  # copy info from old model
  for ki, i in aeros2ids.items():
      dlm_aeros[ki]['p1'] = bdfaero.caeros[i].p1
      dlm_aeros[ki]['p4'] = bdfaero.caeros[i].p4
      dlm_aeros[ki]['x12'] = bdfaero.caeros[i].x12
      dlm_aeros[ki]['x43'] = bdfaero.caeros[i].x43
      ki_l=('L'+ki[1:])
      # symmetry to left side
      dlm_aeros[ki_l]['p1'] = bdfaero.caeros[i].p1*np.array([1.,-1.,1.])
      dlm_aeros[ki_l]['p4'] = bdfaero.caeros[i].p4*np.array([1.,-1.,1.])
      dlm_aeros[ki_l]['x12'] = bdfaero.caeros[i].x12
      dlm_aeros[ki_l]['x43'] = bdfaero.caeros[i].x43

  dlm_aeros['RWing1']['set1x'] = [1004, 2001] 
  dlm_aeros['RWing2']['set1x'] = [2003, 2005, 2008, 2010] 
  dlm_aeros['RWing3']['set1x'] = list(range(2012, 2030, 2))
  dlm_aeros['RWing4']['set1x'] = list(range(2030, 2044, 2))
  dlm_aeros['RWing5']['set1x'] = list(range(2044,2053, 2))
  dlm_aeros['RHTP']['set1x'] = list(range(4000, 4014))
  #####
  dlm_aeros['LWing1']['set1x'] = [1004, 10002001] 
  dlm_aeros['LWing2']['set1x'] = [10002003, 10002005, 10002008, 10002010] 
  dlm_aeros['LWing3']['set1x'] = list(range(10002012, 10002030, 2))
  dlm_aeros['LWing4']['set1x'] = list(range(10002030, 10002044, 2))
  dlm_aeros['LWing5']['set1x'] = list(range(10002044,10002053, 2))
  dlm_aeros['LHTP']['set1x'] = [4000]+list(range(10004001, 10004014))

  dlm = GenDLMPanels.from_dict(dlm_aeros) # pass your dictionary with DLM model
  dlm.build_model()
  dlm.model.write_bdf(f"./NASTRAN/DLMs/{label_dlm}.bdf") # write the bdf file
  dlm.save_yaml(f"./NASTRAN/DLMs/model_{label_dlm}.bdf") # write the bdf file

#+end_src

** Paraview postprocessing
#+NAME: DLMparaview
#+begin_src python :results none
  grid = panels.caero2grid(dlm.components, dlm.caero1) # build grid from dlm model
  panels.build_gridmesh(grid, label_dlm, save_dir="./NASTRAN/Paraview/aero")  #  write paraview mesh
  #bdfdef.vtkRef("./NASTRAN/Paraview/BUG_103cao.bdf")  # write full FE paraview
#+end_src

** Dihedral extraction
Basically extracting the value of  for the normal of each panel that needs to be multiplied by 
*** bdf models
:PROPERTIES:
:header-args: :comments no :noweb yes
:END:

#+NAME: BUGdihedral
#+begin_src org :tangle BUGdihedral.bdf 
#+end_src

*** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :results none :tangle run_gafs.sh
  cd NASTRAN
  source run_nastran.sh
  run_nastran BUGdihedral.bdf
  move_outputs BUGdihedral.bdf              
#+end_src

* GAFs extraction
:PROPERTIES:
:header-args: :session *pybug* :tangle ./gafs.py :comments yes :noweb yes
:END:
** INPUT PARAMETERS
#+NAME: parameters_gafs0
#+begin_src python :noweb yes
  import numpy as np
  import feniax.unastran.aero as nasaero
  import feniax.unastran.op4handler as op4handler
  import pickle

  sol = "cao"
  num_modes = 50
  mach = 0.8
  Mach = str(mach).replace('.','_')
  machs = [mach]
  reduced_freqs = np.hstack([1e-6, np.linspace(1e-5,1e-1, 25),
                             np.linspace(1e-1,5e-1, 25)[1:],
                             np.linspace(5e-1, 1., 10)[1:]])
  reduced_freqs = np.hstack([1e-5, np.linspace(1e-4, 1, 100)
                             ])
  #reduced_freqs = np.geomspace(1e-4, 1, 50, endpoint=True)
  num_modes = 50
  flutter_id = 9010
  mach_fact = machs
  kv_fact = [200., 220.]
  u_inf = 200.
  rho_inf = 1.2
  density_fact = [rho_inf]
  chord_ref = 3.
  span_ref = 24. * 2  # always full span
  area_ref = span_ref * chord_ref # make it half full area if half model
  rho_ref=rho_inf
  q_inf = 0.5 * rho_inf * u_inf ** 2
  flutter_method="PK"
  flutter_sett = dict()
  aero_sett = dict()
  label_dlm = "<<parameters_dlm(output="label_dlm")>>"
  label_flow = f"F1"
  label_gaf = f"D{label_dlm}{label_flow}S{sol}-{num_modes}"
  input_dict = dict(reduced_freqs=list(reduced_freqs), mach=mach, u_inf=u_inf, rho_inf=rho_inf)
  with open(f"./NASTRAN/GAFs/input_{label_flow}.json", "w") as fp:
      json.dump(input_dict, fp)  # encode dict into JSON
#+end_src

#+RESULTS: parameters_gafs0

#+NAME: parameters_gafs
#+begin_src python :var output="num_modes" :results value :tangle no :noweb yes
  <<parameters_gafs0>>
  eval(output)
#+end_src

#+RESULTS: parameters_gafs

** Unsteady
#+begin_src python :results none
  dlm_gafs = nasaero.GenFlutter(flutter_id,
                                density_fact,
                                mach_fact,
                                kv_fact,
                                machs,
                                reduced_freqs,
                                u_inf,
                                chord_ref,
                                rho_ref,
                                flutter_method,
                                flutter_sett,
                                aero_sett)

  dlm_gafs.build_model()
  dlm_gafs.model.write_bdf(f"./NASTRAN/GAFs/{label_flow}.bdf")
#+end_src

*** bdf models
:PROPERTIES:
:header-args: :comments no :noweb yes
:END:

#+NAME: BUGgafs_case
#+begin_src org :tangle no 
  NASTRAN QUARTICDLM=1
  SOL 145
  INCLUDE './DMAPs/Qhhj.bdf'
  CEND

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CASE CONTROL									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  TITLE=BUG GAFs1 #                                 
#+end_src

#+NAME: BUGgafs_bulk
#+begin_src org :tangle no :noweb yes 
  METHOD = 100
  FMETHOD = <<parameters_gafs(output="flutter_id")>>
  $
  $ DISP(PLOT) = ALL
  $
  RESVEC = YES
  $ MODESELECT (STRUCTURE, LMODES = <<parameters_gafs(output="num_modes")>>)
  $ MODESELECT (STRUCTURE,LFREQ=0.001,HFREQ=15.0) 
  $ MODESELECT (FLUID,LFREQ=0.001,HFREQ=15.0)
  ECHO=NONE

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ BULK   									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  BEGIN BULK
  PARAM,BAILOUT,0
  PARAM,GRDPNT,0                                                              
  PARAM,K6ROT,1.0
  PARAM,SNORM,20.0
  PARAM,POST,0
  $PARAM,MAXRATIO,1.0E07 $Default anyway
  $PARAM   AUTOSPC YES
  MDLPRM  MLTSPLIN 1 $Aero grids can be defined in multiple splines (dafault 0)
  PARAM   WTMASS  1.0  
  PARAM   OPPHIB  1
  PARAM   OPPHIPA 1

  EIGRL,100,,,<<parameters_gafs(output="num_modes")>>

  INCLUDE './base_model.bdf'
  INCLUDE './DLMs/<<parameters_gafs(output="label_dlm")>>.bdf'
  INCLUDE './GAFs/<<parameters_gafs(output="label_flow")>>.bdf'
#+end_src

**** cao
TODO: add ASETs and check whether it affects the results
#+begin_src org  :tangle "./NASTRAN/BUGgafs_cao.bdf"
  $EXECUTIVE CONTROL DECK
  assign OUTPUT4='./data_out/Qhh<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=11
  assign OUTPUT4='./data_out/Qhj<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=12
  assign INPUTT4='./data_out/Phi<<parameters_gafs(output="num_modes")>>_<<parameters_gafs(output="sol")>>.op4',formatted,UNIT=90
  $assign INPUTT4= 'Phi1.op4',formatted,UNIT=91
  $NASTRAN NLINES=999999
  <<BUGgafs_case>>
  SPC = 1                  
  <<BUGgafs_bulk>>  
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       123456  1005
#+end_src
**** eao
#+begin_src org  :tangle "./NASTRAN/BUGgafs_eao.bdf"
  $EXECUTIVE CONTROL DECK
  assign OUTPUT4='./data_out/Qhh<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=11
  assign OUTPUT4='./data_out/Qhj<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=12
  assign INPUTT4='./data_out/Phi<<parameters_gafs(output="num_modes")>>_<<parameters_gafs(output="sol")>>.op4',formatted,UNIT=90
  $assign INPUTT4= 'Phi1.op4',formatted,UNIT=91
  $NASTRAN NLINES=999999
  <<BUGgafs_case>>
  <<BUGgafs_bulk>>  
#+end_src
*** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :results none :tangle run_gafs.sh
  cd NASTRAN
  source run_nastran.sh
  run_nastran BUGgafs_<<parameters_gafs(output="sol")>>.bdf
  move_outputs BUGgafs_<<parameters_gafs(output="sol")>>.bdf              
#+end_src

*** Roger RFA
#+begin_src python  :results none  :tangle rogerRFA.py

  #op4m = op4.OP4()
  #Qop4 = op4m.read_op4(file_name)

  Qhh = op4handler.read_data('./NASTRAN/data_out/Qhh<<parameters_gafs(output="label_gaf")>>.op4',
                             'Q_HH')
  Qhj = op4handler.read_data('./NASTRAN/data_out/Qhj<<parameters_gafs(output="label_gaf")>>.op4',
                             'Q_HJ')

#+end_src

#+begin_src python  :results none  :noweb yes :tangle rogerRFA.py  
  import importlib
  import feniax.aeromodal.roger as roger
  importlib.reload(roger)

  optpoles = roger.OptimisePoles(reduced_freqs, Qhh,
                                 num_poles_=4,
                                 poles_step_=0.1,
                                 poles_range_=[0.05,1])
  optpoles.run(show_info=True)
  qhhr1 = optpoles.get_model(label='m1')
  optpoles.set_errsettings(error_name="average", rfa_method=2, norm_order=None)
  optpoles.run(show_info=True)
  qhhr2 = optpoles.get_model(label='m2')
  optpoles.set_errsettings(error_name="max", rfa_method=2, norm_order=None)
  optpoles.run(show_info=True)
  optpoles.save("./AERO", f"A{label_gaf}", f"Poles{label_gaf}")
  qhhr3 = optpoles.get_model(label='m3')

#+end_src

#+begin_src python  :results none  :noweb yes :tangle rogerRFA.py  

  optpoles = roger.OptimisePoles(reduced_freqs, Qhh,
                                 num_poles_=4,
                                 poles_step_=0.05,
                                 poles_range_=[0.05,1])
  optpoles.set_errsettings(error_name="max", rfa_method=2, norm_order=None)
  optpoles.run(show_info=True)
  qhhr4 = optpoles.get_model(label='m1')
  
#+end_src


#+begin_src python  :results none  :noweb yes :tangle rogerRFA.py  
  Qroger1 = qhhr1.eval_array(reduced_freqs)
  Qroger2 = qhhr2.eval_array(reduced_freqs)
  Qroger3 = qhhr3.eval_array(reduced_freqs)
  Qroger4 = qhhr4.eval_array(reduced_freqs)
  
#+end_src

#+begin_src python  :results none  :noweb yes :tangle rogerRFA.py

  roger.plot_gafs(0, 1, Qhh, [Qroger, Qroger2, Qroger3, Qroger4])
  
  #roger.plot_gafs(20, 2, Qhh, [Qroger, Qroger2, Qroger3])
#+end_src

#+begin_src python  :results none  :noweb yes :tangle rogerRFA.py
  iterate_vect = list(range(10))
  plot_prod = list(itertools.product(iterate_vect,iterate_vect))
  for li in plot_prod:
      if np.linalg.norm(Qhh[:, li[0], li[1]]) > 1e-3:
          roger.plot_gafs(li[0], li[1], Qhh, [Qroger, Qroger2, Qroger3, Qroger4])
#+end_src


** Steady
*** bdf models
:PROPERTIES:
:header-args: :noweb yes :comments no
:END:

#+NAME: GAFsSteady_setup
#+begin_src org :tangle no
  $
  $---------------------------------------------------------------------------
  $   AERODYNAMIC DOFS
  $---------------------------------------------------------------------------
  $
  AESTAT  1       ANGLEA  
  AESTAT  2       SIDES  
  AESTAT  3       PITCH  
  AESTAT  4       ROLL  
  AESTAT  5       YAW  
  AESTAT  6       URDD1  
  AESTAT  7       URDD2  
  AESTAT  8       URDD3  
  AESTAT  9       URDD4  
  AESTAT  10      URDD5  
  AESTAT  11      URDD6  

  $AEROS                   4.163   44.8    146.6  
  AEROS,,,<<parameters_gafs(output="chord_ref")>>,<<parameters_gafs(output="span_ref")>>,<<parameters_gafs(output="area_ref")>>
  $
  $
  $ TRIM    960     0.81    15762.81  URDD1   0.      URDD2   0.      1.
  $         URDD3   0.      URDD4   0.      URDD5   0.      URDD6   0.
  $         ROLL    0.      YAW     0.      SIDES   0.      PITCH   0.
  $         Flprn_r 0.      WTAil_r 0.      Elev_r  0.      ANGLEA  0.261799
  TRIM,960,<<parameters_gafs(output="mach")>>,<<parameters_gafs(output="q_inf")>>,URDD1,0.,URDD2,0.,1.,
      ,URDD3,0.,URDD4,0.,URDD5,0.,URDD6,0.,
      ,ROLL,0.,YAW,0.,SIDES,0.,PITCH,0.
  $ANGLEA  0.261799

#+end_src

#+NAME: GAFsSteady_case
#+begin_src org :tangle no 
  NASTRAN QUARTICDLM=1
  SOL 144
  INCLUDE './DMAPs/Qhx.bdf'
  CEND

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CASE CONTROL									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  TITLE=BUG model #                                 
  TRIM = 960
  $LOAD = 2000
  $
  DISP = ALL
  FORCE = ALL
  AEROF = ALL
  MONITOR = ALL
  TRIMF = ALL
  OLOAD(CID) = ALL
  ECHO=NONE
#+end_src

#+NAME: GAFsSteady_bulk
#+begin_src org :tangle no 
  BEGIN BULK
  PARAM,BAILOUT,0
  PARAM,GRDPNT,0                                                              
  PARAM,K6ROT,1.0
  PARAM,SNORM,20.0
  PARAM,POST,0
  $PARAM,MAXRATIO,1.0E07 $Default anyway
  $PARAM   AUTOSPC YES
  MDLPRM  MLTSPLIN 1 $Aero grids can be defined in multiple splines (dafault 0)
  PARAM   WTMASS  1.0  

  INCLUDE './base_model.bdf'
  INCLUDE './DLMs/<<parameters_gafs(output="label_dlm")>>.bdf'
#+end_src

**** cao
#+begin_src org  :tangle "./NASTRAN/BUGgafsSteady_cao.bdf"
  assign OUTPUT4='./data_out/Qax<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=11
  assign OUTPUT4='./data_out/Qah<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=12
  assign OUTPUT4='./data_out/Qhx<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=13
  assign INPUTT4='./data_out/Phi<<parameters_gafs(output="num_modes")>>_<<parameters_gafs(output="sol")>>.op4',formatted,UNIT=90  

  <<GAFsSteady_case>>
  SPC = 1
  <<GAFsSteady_bulk>>
  <<GAFsSteady_setup>>

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       12346   1005
  SUPORT  1005    5
#+end_src

*** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :results none :noweb yes :tangle run_gafs.sh
  cd NASTRAN
  source run_nastran.sh
  run_nastran BUGgafsSteady_<<parameters_gafs(output="sol")>>.bdf
  move_outputs BUGgafsSteady_<<parameters_gafs(output="sol")>>.bdf              
#+end_src

*** Read op4

#+begin_src python  :results none  :noweb yes :tangle rogerRFA.py

  Qax_name = "Qax<<parameters_gafs(output="label_gaf")>>"
  Qah_name = "Qah<<parameters_gafs(output="label_gaf")>>"
  Qhx_name = "Qhx<<parameters_gafs(output="label_gaf")>>"
  Qax = op4handler.read_data(f'./NASTRAN/data_out/{Qax_name}.op4',
                             'Q_AX')
  Qah = op4handler.read_data(f'./NASTRAN/data_out/{Qah_name}.op4',
                             'Q_AH')
  Qhx = op4handler.read_data(f'./NASTRAN/data_out/{Qhx_name}.op4',
                             'Q_HX')
  SAVE_Qx = False
  if SAVE_Qx:
      np.save(f"./AERO/{Qax_name}.npy", Qax)
      np.save(f"./AERO/{Qah_name}.npy", Qah)
      np.save(f"./AERO/{Qhx_name}.npy", Qhx)

#+end_src

* Gust solution (146)
