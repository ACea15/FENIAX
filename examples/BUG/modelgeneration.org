* House keeping
#+begin_src elisp :results none
  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)
  (pyvenv-workon "feniax")
#+end_src

* Folder structure
#+begin_src markdown :tangle "./README.md" :results none
  # Folder structure
  - Parts: BDF files with the structural model parts
  - DLMs: generated DLM models
#+end_src

* ASETs generation

#+begin_src python
  from pyNastran.bdf.bdf import BDF
  import pandas as pd
  from feniax.unastran.asetbuilder import BuildAsetModel
  from feniax.unastran.aero import GenDLMPanels
  import  feniax.unastran.matrixbuilder as matrixbuilder
  import feniax.aeromodal.panels as panels
  import feniax.plotools.nastranvtk.bdfdef as bdfdef
  import jax.numpy as jnp
  import jax
  import numpy as np

  bdf = BDF()#debug=False)
  bdf.read_bdf("./NASTRAN/BUG_103cao.bdf", validate=False)

  # bdf_conm2 = BDF()
  # conm2_ids = list(range(314, 345)) + [376, 377, 378]
  # for cmi in conm2_ids:
  #     conm2 = bdf.masses[cmi]
  #     bdf_conm2.add_conm2(conm2.eid, conm2.nid, conm2.mass, conm2.cid, conm2.X, conm2.I)

  # bdf_conm2.write_bdf("./Parts/MTOW_FUEL_RWBOXmod.bdf")


  ######## BUILD STRUCTURAL MODEL ##############

  WRITE_ASETS= False
  WRITE_GRID= False
  ASET_MODEL_FULL = False  # ASETS at every CONM2 of half the size (full model gives
                           # problems in 103 and might be too large any way)

  if ASET_MODEL_FULL:                         
      # Initial model
      components_ids = dict()
      components_ids['FusWing'] = [2000]
      components_ids['FusBack'] = [1006, 1007, 1008, 1009]
      components_ids['FusFront'] = [1004, 1003, 1002, 1001, 1000]
      components_ids['RWing'] = list(range(2001, 2053))
      components_ids['LWing'] = list(range(10002001, 10002053))
      components_ids['FusTail'] = [1010]
      components_ids['VTP'] = list(range(3000, 3010))
      components_ids['HTP'] = [4000]
      components_ids['VTPTail'] = [3010]
      components_ids['RHTP'] = list(range(4001, 4014))
      components_ids['LHTP'] = list(range(10004001, 10004014))

      # model = BuildAsetModel(components_ids, clamped_node=1005)
      # model.write_asets("./Config/asets_clamped.bdf")
      model_asets = BuildAsetModel(components_ids, bdf, clamped_node=1005)
      if WRITE_ASETS:
          model_asets.write_asets("./NASTRAN/Config/asets_clamped.bdf")
      if WRITE_GRID:
          model_asets.write_grid("./FEM/structuralGrid")
  else:
      # Initial model removing some ASET nodes along the wing
      components_ids = dict()
      #components_ids['FusWing'] = [2000]
      components_ids['FusBack'] = [1006, 1007, 1008, 1009]
      components_ids['FusFront'] = [1004, 1003, 1002, 1001, 1000]
      components_ids['RWing'] = [2001, 2003, 2005, 2008, 2010] + list(range(2012, 2053, 2))
      components_ids['LWing'] = ([10002001, 10002003, 10002005, 10002008, 10002010] +
                                 list(range(10002012, 10002053, 2)))
      components_ids['FusTail'] = [1010]
      components_ids['VTP'] = list(range(3000+1, 3010-1))
      components_ids['HTP'] = [4000]
      components_ids['VTPTail'] = [3010]
      components_ids['RHTP'] = list(range(4001, 4014))
      components_ids['LHTP'] = list(range(10004001, 10004014))

      model_asets = BuildAsetModel(components_ids, bdf, clamped_node=1005)
      WRITE_ASETS= False
      if WRITE_ASETS:
          model_asets.write_asets("./NASTRAN/Config/asets_clamped_reduced.bdf")
      WRITE_GRID= False
      if WRITE_GRID:
          model_asets.write_grid("./FEM/structuralGrid")

#+end_src
* FE extraction
  :PROPERTIES:
  :header-args: :noweb-ref FE extraction
  :END:

** VTK modes
#+begin_src python :session py1 :results none :tangle py1.py
  import feniax.plotools.nastranvtk.modes as modes
  modes.vtk_fromop2("./SOL103/run_cao.bdf", "./SOL103/run_cao.op2", scale = 100.)
#+end_src
* DLM generation
  :PROPERTIES:
  :header-args: :session *pybug* :tangle ./dlm.py
  :END:

** INPUT PARAMETERS
#+NAME: DLMgeneration_parameters
#+begin_src python

  dlm_label = "dlm1"
  PRINT_CAEROS = True
  ######## Set discretisation MODEL ##############

  aeros = dict(RWing1=dict(nspan=2, nchord=8),
               RWing2=dict(nspan=3, nchord=8),
               RWing3=dict(nspan=9, nchord=8),
               RWing4=dict(nspan=6, nchord=8),
               RWing5=dict(nspan=4, nchord=8),
               RHTP=dict(nspan=6, nchord=8),
               LWing1=dict(nspan=2, nchord=8),
               LWing2=dict(nspan=3, nchord=8),
               LWing3=dict(nspan=9, nchord=8),
               LWing4=dict(nspan=6, nchord=8),
               LWing5=dict(nspan=4, nchord=8),
               LHTP=dict(nspan=6, nchord=8)
               )

  # CAEROS IDs in the original model (right side only)
  aeros2ids = dict(RWing1=3504001,
                   RWing2=3500001,
                   RWing3=3501001,
                   RWing4=3502001,
                   RWing5=3503001,
                   RHTP=3600001)

#+end_src

** Build
#+NAME: DLMbuild
#+begin_src python
  from pyNastran.bdf.bdf import BDF

  bdfaero = BDF()#debug=False)
  bdfaero.read_bdf("./BUGaero1.bdf", validate=False, punch=False)

  if PRINT_CAEROS:
      for ki, vi in bdfaero.caeros.items():
          print(f"*{ki}*-p1: {vi.p1}")
          print(f"*{ki}*-p4: {vi.p4}")
          print(f"*{ki}*-x12: {vi.x12}")
          print(f"*{ki}*-x43: {vi.x43}")

  for ki, i in aeros2ids.items():
      aeros[ki]['p1'] = bdfaero.caeros[i].p1
      aeros[ki]['p4'] = bdfaero.caeros[i].p4
      aeros[ki]['x12'] = bdfaero.caeros[i].x12
      aeros[ki]['x43'] = bdfaero.caeros[i].x43
      ki_l=('L'+ki[1:])
      aeros[ki_l]['p1'] = bdfaero.caeros[i].p1*np.array([1.,-1.,1.])
      aeros[ki_l]['p4'] = bdfaero.caeros[i].p4*np.array([1.,-1.,1.])
      aeros[ki_l]['x12'] = bdfaero.caeros[i].x12
      aeros[ki_l]['x43'] = bdfaero.caeros[i].x43

  aeros['RWing1']['set1x'] = [1004, 2001] 
  aeros['RWing2']['set1x'] = [2003, 2005, 2008, 2010] 
  aeros['RWing3']['set1x'] = list(range(2012, 2030, 2))
  aeros['RWing4']['set1x'] = list(range(2030, 2044, 2))
  aeros['RWing5']['set1x'] = list(range(2044,2053, 2))
  aeros['RHTP']['set1x'] = list(range(4000, 4014))
  #####
  aeros['LWing1']['set1x'] = [1004, 10002001] 
  aeros['LWing2']['set1x'] = [10002003, 10002005, 10002008, 10002010] 
  aeros['LWing3']['set1x'] = list(range(10002012, 10002030, 2))
  aeros['LWing4']['set1x'] = list(range(10002030, 10002044, 2))
  aeros['LWing5']['set1x'] = list(range(10002044,10002053, 2))
  aeros['LHTP']['set1x'] = [4000]+list(range(10004001, 10004014))

  dlm = GenDLMPanels.from_dict(aeros) # pass your dictionary with DLM model
  dlm.build_model()
  dlm.model.write_bdf(f"./NASTRAN/DLMs/{dlm_label}.bdf") # write the bdf file

#+end_src

** Paraview postprocessing
#+NAME: DLMparaview
#+begin_src python
  grid = panels.caero2grid(dlm.components, dlm.caero1) # build grid from dlm model
  panels.build_gridmesh(grid, dlm_label, save_dir="./NASTRAN/Paraview")  #  write paraview mesh
  #bdfdef.vtkRef("./NASTRAN/Paraview/BUG_103cao.bdf")  # write full FE paraview
#+end_src

* GAFs extraction

** Roger RFA

* Gust solution (146)
