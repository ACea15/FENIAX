* House keeping
#+begin_src elisp :results none
  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)
  (pyvenv-workon "feniax")
#+end_src

* Folder and file structure
#+begin_src markdown :tangle "./README.md" :results none
  # Folder structure
  - Parts: BDF files with the structural model parts
  - DLMs: generated DLM models
#+end_src

#+begin_src python :results none
  import pathlib
  pathlib.Path('./FEM').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./AERO').mkdir(parents=True, exist_ok=True)  
  pathlib.Path('./NASTRAN/Paraview').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/GAFs').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/DLMs').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/data_out').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/simulations_out').mkdir(parents=True, exist_ok=True)
  pathlib.Path('./NASTRAN/Gusts').mkdir(parents=True, exist_ok=True)  
  pathlib.Path('./figs').mkdir(parents=True, exist_ok=True)  
#+end_src

#+begin_src shell :tangle ./workflow.sh 
  python P1_buildAsets.py   # Output Nastran ASET and build FENIAX grid 
  source P2_runmodal.sh    # Run Nastran modal solution
  python P22_buildFEM.py   # build modal solution for FENIAX and Ka/Ma
  python P3_dlm.py         # generate dlm model
  source P4_rundihedral.sh  # run DMAP for normal of panels
  python P5_getdihedral.py  # save normal of panels
  python P6_outputgafs.py  # build gafs
  source P7_rungafs.sh     # run Nastran to get GAFs
  source P8_rungafSteady.sh   # build gafs manoeuvre
  python P9_getgafSteady.py    # save gafs manoeuvre
  python P10_rogerRFA.py    # run roger approx
#+end_src

* Modal Solution
:PROPERTIES:
:header-args: :tangle ./P1_modalsolution.py :session *pybug* :comments yes
:END:

** INPUT PARAMETERS
#+NAME: parameters_modal0
#+begin_src python :results none
  import feniax.unastran.op4handler as op4handler
  from pyNastran.bdf.bdf import BDF
  from feniax.unastran.asetbuilder import BuildAsetModel
  import feniax.plotools.nastranvtk.bdfdef as bdfdef
  import numpy as np

  num_modes = 200
  sol = "eao" # {c,e}{a,f}{o,p}
  WRITE_GRID= True
  WRITE_ASETS= True
  ASET_MODEL_FULL = False  # ASETS at every CONM2 of half the size (full model gives
                           # problems in 103 and might be too large any way)
#+end_src

#+NAME: parameters_modal
#+begin_src python :var output="num_modes" :results value :noweb yes :tangle no
  <<parameters_modal0>>
  eval(output)
#+end_src

#+RESULTS: parameters_modal
: 100

** ASETs generation

- Generation of ASET (condensed) model based on CONM2 data
- Generation of grid file for FENIAX: looking at the CONM2 alignment, one picks a reference node (clamped one in a fixed model), and from it nodes in each component stream outwards.
  
#+begin_src python  :results none
  bdf = BDF()#debug=False)
  bdf.read_bdf("./NASTRAN/BUG103.bdf", validate=False)

  # bdf_conm2 = BDF()
  # conm2_ids = list(range(314, 345)) + [376, 377, 378]
  # for cmi in conm2_ids:
  #     conm2 = bdf.masses[cmi]
  #     bdf_conm2.add_conm2(conm2.eid, conm2.nid, conm2.mass, conm2.cid, conm2.X, conm2.I)

  # bdf_conm2.write_bdf("./Parts/MTOW_FUEL_RWBOXmod.bdf")

  ######## BUILD STRUCTURAL MODEL ##############

  if ASET_MODEL_FULL:                         
      # Initial model
      components_ids = dict()
      components_ids['FusWing'] = [2000]
      if sol[0] == "c": # clamped model
          components_ids['FusBack'] = [1006, 1007, 1008, 1009]
      elif sol[0] == "e": # free model
          components_ids['FusBack'] = [1005, 1006, 1007, 1008, 1009]
      components_ids['FusFront'] = [1004, 1003, 1002, 1001, 1000]
      components_ids['RWing'] = list(range(2001, 2053))
      components_ids['LWing'] = list(range(10002001, 10002053))
      components_ids['FusTail'] = [1010]
      components_ids['VTP'] = list(range(3000, 3010))
      components_ids['HTP'] = [4000]
      components_ids['VTPTail'] = [3010]
      components_ids['RHTP'] = list(range(4001, 4014))
      components_ids['LHTP'] = list(range(10004001, 10004014))
      if sol[0] == "c": # clamped model
          model_asets = BuildAsetModel(components_ids, bdf, clamped_node=1005)
      elif sol[0] == "e": # free model
          model_asets = BuildAsetModel(components_ids, bdf)          

      if WRITE_ASETS:
          if sol[0] == "c": # clamped model
              model_asets.write_asets("./NASTRAN/Asets/asets_clamped.bdf")
          elif sol[0] == "e": # free model
              model_asets.write_asets("./NASTRAN/Asets/asets_free.bdf")

      if WRITE_GRID:
          model_asets.write_grid(f"./FEM/structuralGridfull_{sol[:-1]}")

  else:
      # Initial model removing some ASET nodes along the wing
      components_ids = dict()
      #components_ids['FusWing'] = [2000]
      if sol[0] == "c": # clamped model
          components_ids['FusBack'] = [1006, 1007, 1008, 1009]
      elif sol[0] == "e": # free model
          components_ids['FusBack'] = [1005, 1006, 1007, 1008, 1009]
      components_ids['FusFront'] = [1004, 1003, 1002, 1001, 1000]
      components_ids['RWing'] = [2001, 2003, 2005, 2008, 2010] + list(range(2012, 2053, 2))
      components_ids['LWing'] = ([10002001, 10002003, 10002005, 10002008, 10002010] +
                                 list(range(10002012, 10002053, 2)))
      components_ids['FusTail'] = [1010]
      components_ids['VTP'] = list(range(3000+1, 3010-1))
      components_ids['HTP'] = [4000]
      components_ids['VTPTail'] = [3010]
      components_ids['RHTP'] = list(range(4001, 4014))
      components_ids['LHTP'] = list(range(10004001, 10004014))
      if sol[0] == "c": # clamped model
          model_asets = BuildAsetModel(components_ids, bdf, clamped_node=1005)
      elif sol[0] == "e": # free model
          model_asets = BuildAsetModel(components_ids, bdf)

      if WRITE_ASETS:          
          if sol[0] == "c": # clamped model
              model_asets.write_asets("./NASTRAN/Asets/asets_clamped_reduced.bdf")
          elif sol[0] == "e": # free model
              model_asets.write_asets("./NASTRAN/Asets/asets_free_reduced.bdf")              
      if WRITE_GRID:
          model_asets.write_grid(f"./FEM/structuralGrid_{sol[:-1]}")
#+end_src

** bdf models
:PROPERTIES:
:header-args: :noweb yes :comments no
:END:

- Run BUG 103 solution with clamped and free-free conditions (label c and e respectively).
- Condensed and full models (a and f labels)
- Extract binary OP2 from which to read eigenvectors or pch file to read FE matrices (o and p)
  
#+NAME: bdf_BUG103case
#+begin_src org :tangle no 
  SOL 103
  CEND
  TITLE=BUG model #                                 
  ECHO=NONE                      	  
  SPC = 1
  SPCF = ALL
  DISPLACEMENT=ALL
  METHOD = 100
#+end_src
#+NAME: bdf_BUG103bulk
#+begin_src org :tangle no 
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ BULK   						    
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  BEGIN BULK
  PARAM,AUTOMSET,YES
  $ PARAM,BAILOUT,-1
  $ PARAM,GRDPNT,0                                          
  $ PARAM,K6ROT,1.0
  $ PARAM,SNORM,20.0
  $ PARAM,MAXRATIO,1.0E07
  $ PARAM,EXTOUT,DMIGPCH
  EIGRL,100,,,<<parameters_modal(output="num_modes")>>

#+end_src

*** Clamped, asets, OP2 (cao)
#+begin_src org :tangle "./NASTRAN/BUG103_cao.bdf" :noweb no
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,POST,-1

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE								      $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       123456  1005

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_clamped_reduced.bdf'

  ENDDATA
#+end_src
*** Free, asets, OP2 (eao)
#+begin_src org :tangle "./NASTRAN/BUG103_eao.bdf" 
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,POST,-1

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_free_reduced.bdf'

  ENDDATA
#+end_src
*** Clamped, asets, pch (cap)
#+begin_src org :tangle "./NASTRAN/BUG103_cap.bdf"
  SOL 103
  CEND
  TITLE=BUG model #                                 
  ECHO=NONE                      	  
  SPC = 1
  METHOD = 100

  <<bdf_BUG103bulk>>
  PARAM,EXTOUT,DMIGPCH

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE								      $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       123456  1005

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_clamped_reduced.bdf'

  ENDDATA
#+end_src
*** Free, asets, pch (eap)
#+begin_src org :tangle "./NASTRAN/BUG103_eap.bdf" 
  <<bdf_BUG103case>>
  <<bdf_BUG103bulk>>
  PARAM,EXTOUT,DMIGPCH

  INCLUDE './base_model.bdf'

  $$$$$$$$$$$$$$$$$$$$$$$$$
  $ ASETs                 $
  $$$$$$$$$$$$$$$$$$$$$$$$$

  INCLUDE './Asets/asets_free_reduced.bdf'

  ENDDATA
#+end_src
*** Clamped, full, OP2 (cfo)
#+begin_src org :tangle "./NASTRAN/BUG103_cfo.bdf" 
  <<bdf_BUG103>>  
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE								      $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  
  SPC1    1       123456  1005

  ENDDATA
#+end_src
*** Free, full, OP2 (efo)
#+begin_src org :tangle "./NASTRAN/BUG103_efo.bdf" 
  <<bdf_BUG103>>
  ENDDATA
#+end_src
** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors. 

#+begin_src bash :session shell1 :noweb yes :tangle P2_runmodal.sh :results none :dir ./NASTRAN
  source run_nastran.sh
  run_nastran BUG103_<<parameters_modal(output="sol")>>.bdf
  move_outputs BUG103_<<parameters_modal(output="sol")>>.bdf
#+end_src

** Build modes in OP4, map to ASETs and paraview plot
- Get the modal shapes of the full model from the OP2 file and write them in OP4 format (for use in aerodynamics).
- Plot the modes in Paraview. 
- If running a condensed model, pick the nodes where the asets are and save them to a file for use in FENIAX. To be sure there is no mismatch between aero matrices and modes (change of signs for instance).
  
#+begin_src python :results none  :noweb yes :tangle P22_buildFEM.py

  eigs, modes = op4handler.write_op4modes(f"./NASTRAN/simulations_out/BUG103_{sol}.bdf",
                                          num_modes,
                                          op4_name=f"./NASTRAN/data_out/Phi{num_modes}_{sol}",
                                          return_modes=True)
  bdf_file = f"./NASTRAN/BUG103_{sol}.bdf"
  bdf = BDF()
  bdf.read_bdf(bdf_file)
  node_ids = bdf.node_ids
  assert modes.shape[1] == len(node_ids), "the modes size does not match the node_ids"
  sorted_nodeids = sorted(node_ids)
  asets_ids = bdf.asets[0].node_ids
  asets_ids_sorted = sorted(asets_ids)
  asets_idsfull = np.array([sorted_nodeids.index(ai) for ai in asets_ids_sorted])
  asets_indexes = np.hstack([[6*i + j for j in range(6)] for i in asets_idsfull])
  #modes4simulations = modes[asets_indexes, :]
  SAVE = False
  if SAVE:
      np.save(f"./FEM/eigenvecs_{sol}{num_modes}.npy", modes4simulations.T)
      np.save(f"./FEM/eigenvals_{sol}{num_modes}.npy", eigs)
#+end_src

#+begin_src python :results none  :noweb yes :tangle P22_buildFEM.py
  modes = op4handler.read_data(f"./NASTRAN/data_out/Phi{num_modes}_{sol}.op4", "PHG")
  bdf_file = f"./NASTRAN/BUG103_{sol}.bdf"
  bdf = BDF()
  bdf.read_bdf(bdf_file)
  node_ids = bdf.node_ids
  assert len(modes)/6 == len(node_ids), "the modes size does not match the node_ids"
  sorted_nodeids = sorted(node_ids)
  asets_ids = bdf.asets[0].node_ids
  asets_ids_sorted = sorted(asets_ids)
  asets_idsfull = np.array([sorted_nodeids.index(ai) for ai in asets_ids_sorted])
  asets_indexes = np.hstack([[6*i + j for j in range(6)] for i in asets_idsfull])
  modes4simulations = modes[asets_indexes, :]
  SAVE = True
  if SAVE:
      np.save(f"./FEM/eigenvecs_{sol}{num_modes}.npy", modes4simulations)
      np.save(f"./FEM/eigenvals_{sol}{num_modes}.npy", eigs)
#+end_src

*** Plot VTK modes

Plot the modal shapes in Paraview
#+begin_src python
  op2_file = f"./NASTRAN/simulations_out/BUG103_{sol}.op2" 
  bdf_file = f"./NASTRAN/BUG103_{sol}.bdf"   
  bdfdef.vtkModes_fromop2(bdf_file,
                          op2_file,
                          scale = 100.,
                          modes2plot=list(range(num_modes)),
                          write_path=f"./paraview/Modes_{sol}/",
                          plot_ref=False)

  #bdfdef.vtkRef("./NASTRAN/Paraview/BUG_103cao.bdf")  # write full FE paraview
#+end_src

** Read pch
Read the pch file and save FE matrices to FEM folder

#+begin_src python :noweb yes :tangle P22_buildFEM.py
  import feniax.unastran.matrixbuilder as matrixbuilder
  soli = sol[:-1]
  id_list,stiffnessMatrix,massMatrix = matrixbuilder.read_pch(f"./NASTRAN/simulations_out/BUG103_{soli}p.pch")
  SAVE_FE = True
  if SAVE_FE:
      np.save(f"./FEM/Ka_{soli}.npy", stiffnessMatrix)
      np.save(f"./FEM/Ma_{soli}.npy", massMatrix)
  try:
      assert len(asets_indexes) == len(stiffnessMatrix), "the FE matrices size does not match the indexes used to build the aset modes from the full set"
  except NameError:
      print("Careful, no aset-matrix sizes checked")
#+end_src

#+RESULTS:

* DLM generation
  :PROPERTIES:
  :header-args: :session *pybug*  :comments yes
  :END:
** INPUT PARAMETERS
#+NAME: parameters_dlm0
#+begin_src python :tangle ./P3_dlm.py
  import json
  import feniax.unastran.aero as aero
  from pyNastran.bdf.bdf import BDF
  import numpy as np
  import feniax.unastran.op4handler as op4handler
  import feniax.aeromodal.panels as panels
  import feniax.plotools.grid
  import copy
  PRINT_CAEROS = True
  ######## Set discretisation MODEL ##############

  nchord_wing = 7
  nchord_htp = 7
  label_dlm = f"d1c{nchord_wing}"
  dlm_aeros = dict(RWing1=dict(nspan=2, nchord=nchord_wing),
               RWing2=dict(nspan=3, nchord=nchord_wing),
               RWing3=dict(nspan=9, nchord=nchord_wing),
               RWing4=dict(nspan=6, nchord=nchord_wing),
               RWing5=dict(nspan=4, nchord=nchord_wing),
               RHTP=dict(nspan=6, nchord=nchord_htp)
             )

  dlm_aeros["LWing1"] = copy.copy(dlm_aeros["RWing1"])
  dlm_aeros["LWing2"] = copy.copy(dlm_aeros["RWing2"])
  dlm_aeros["LWing3"] = copy.copy(dlm_aeros["RWing3"])
  dlm_aeros["LWing4"] = copy.copy(dlm_aeros["RWing4"])
  dlm_aeros["LWing5"] = copy.copy(dlm_aeros["RWing5"])
  dlm_aeros["LHTP"] = copy.copy(dlm_aeros["RHTP"])

  # CAEROS IDs in the original model (right side only)
  aeros2ids = dict(RWing1=3504001,
                   RWing2=3500001,
                   RWing3=3501001,
                   RWing4=3502001,
                   RWing5=3503001,
                   RHTP=3600001)

  with open(f"./NASTRAN/DLMs/input_{label_dlm}.json", "w") as fp:
      json.dump(dlm_aeros, fp)  # encode dict into JSON
#+end_src

#+RESULTS: parameters_dlm0

#+NAME: parameters_dlm
#+begin_src python :var output="num_modes" :results value :tangle no :noweb yes
  <<parameters_dlm0>>
  eval(output)
#+end_src

** Build
Build the aero model based on discretisation and the right-hand side aero built initially in BUGaero1.bdf
#+NAME: DLMbuild
#+begin_src python :results none :tangle ./P3_dlm.py

  # Read old model with right side of CAEROS
  bdfaero = BDF()#debug=False)
  bdfaero.read_bdf("./NASTRAN/BUGaero1.bdf", validate=False, punch=False)

  if PRINT_CAEROS:
      for ki, vi in bdfaero.caeros.items():
          print(f"*{ki}*-p1: {vi.p1}")
          print(f"*{ki}*-p4: {vi.p4}")
          print(f"*{ki}*-x12: {vi.x12}")
          print(f"*{ki}*-x43: {vi.x43}")

  # copy info from old model
  for ki, i in aeros2ids.items():
      dlm_aeros[ki]['p1'] = bdfaero.caeros[i].p1
      dlm_aeros[ki]['p4'] = bdfaero.caeros[i].p4
      dlm_aeros[ki]['x12'] = bdfaero.caeros[i].x12
      dlm_aeros[ki]['x43'] = bdfaero.caeros[i].x43
      ki_l=('L'+ki[1:])
      # symmetry to left side
      dlm_aeros[ki_l]['p1'] = bdfaero.caeros[i].p1*np.array([1.,-1.,1.])
      dlm_aeros[ki_l]['p4'] = bdfaero.caeros[i].p4*np.array([1.,-1.,1.])
      dlm_aeros[ki_l]['x12'] = bdfaero.caeros[i].x12
      dlm_aeros[ki_l]['x43'] = bdfaero.caeros[i].x43

  dlm_aeros['RWing1']['set1x'] = [1004, 2001] 
  dlm_aeros['RWing2']['set1x'] = [2003, 2005, 2008, 2010] 
  dlm_aeros['RWing3']['set1x'] = list(range(2012, 2030, 2))
  dlm_aeros['RWing4']['set1x'] = list(range(2030, 2044, 2))
  dlm_aeros['RWing5']['set1x'] = list(range(2044,2053, 2))
  dlm_aeros['RHTP']['set1x'] = list(range(4000, 4014))
  #####
  dlm_aeros['LWing1']['set1x'] = [1004, 10002001] 
  dlm_aeros['LWing2']['set1x'] = [10002003, 10002005, 10002008, 10002010] 
  dlm_aeros['LWing3']['set1x'] = list(range(10002012, 10002030, 2))
  dlm_aeros['LWing4']['set1x'] = list(range(10002030, 10002044, 2))
  dlm_aeros['LWing5']['set1x'] = list(range(10002044,10002053, 2))
  dlm_aeros['LHTP']['set1x'] = [4000]+list(range(10004001, 10004014))

  dlm = aero.GenDLMPanels.from_dict(dlm_aeros) # pass your dictionary with DLM model
  dlm.build_model()
  dlm.model.write_bdf(f"./NASTRAN/DLMs/{label_dlm}.bdf") # write the bdf file
  dlm.save_yaml(f"./NASTRAN/DLMs/model_{label_dlm}.yaml") # write the bdf file

#+end_src

** DLM grid: Collocation points and Paraview plotting

- Get panel collocation points coordiantes
- plot panel grid in paraview
    
Old method: build panel coordinates out of corner points 
#+NAME: DLMparaview
#+begin_src python :results none :tangle no
  grid = panels.caero2grid(dlm.components, dlm.caero1) # build grid from dlm model
  gridmesh = panels.build_gridmesh(grid, label_dlm, save_dir=f"./paraview/aero{label_dlm}")  #  write paraview mesh
#+end_src

Use pynastran via get_collocation. Note: should push fix to pyNastran.
#+NAME: DLMGrid
#+begin_src python :results none :tangle ./P3_dlm.py

  dlmgrid = aero.GenDLMGrid(dlm.model)
  dlmgrid.plot_pyvista(f"./paraview/dlm{label_dlm}")
  collocationpoints = dlmgrid.get_collocation()
  np.save(f"./AERO/Collocation_{label_dlm}.npy", collocationpoints)
  #bdfdef.vtkRef("./NASTRAN/Paraview/BUG_103cao.bdf")  # write full FE paraview
#+end_src

Alternative: export to cquads and use old codes
#+begin_src python :results none
  import pyNastran.bdf.mesh_utils.export_caero_mesh
  #importlib.reload(pyNastran.bdf.mesh_utils.export_caero_mesh)

  cquadaero_file = f"./NASTRAN/data_out/caero{label_dlm}.bdf"
  pyNastran.bdf.mesh_utils.export_caero_mesh.export_caero_mesh(dlm.model,
                                                               cquadaero_file)
  control_nodes = aero.dlm_control_nodes(cquadaero_file)
  np.save(f"./AERO/Collocation_{label_dlm}.npy", collocationpoints)
  #np.save(f"./AERO/Collocation_{label_dlm}.npy", collocationpoints)
  #bdfdef.vtkRef("./NASTRAN/Paraview/BUG_103cao.bdf")  # write full FE paraview
#+end_src

** Dihedral extraction
Basically extracting the value of  for the normal of each panel that needs to be multiplied by 
*** bdf models
:PROPERTIES:
:header-args: :comments no :noweb yes
:END:

#+NAME: DummyGust
#+begin_src org :tangle ./NASTRAN/Gusts/DummyGust.bdf 
  TLOAD1  100     99999999                1       
  DLOAD   1       1.      1.      100     
  GUST    10      1       0.01469 0.      68.06   
  TABLED1 1       +       
          0.0     0.0     0.01    0.12878 0.02    0.50804 0.03    1.11695 
          0.04    1.92203 0.05    2.87905 0.06    3.93542 0.07    5.03308 
          0.08    6.11171 0.09    7.11204 0.1     7.97909 0.11    8.66521 
          0.12    9.13270 0.13    9.35588 0.14    9.32247 0.15    9.03431 
          0.16    8.50723 0.17    7.77021 0.18    6.86374 0.19    5.83764 
          0.2     4.74830 0.21    3.65557 0.22    2.61952 0.23    1.69708 
          0.24    0.93893 0.25    0.38675 0.26    0.07087 0.27    0.0     
          0.28    0.0     0.29    0.0     0.3     0.0     0.31    0.0     
          0.32    0.0     0.33    0.0     0.34    0.0     0.35    0.0     
          0.36    0.0     0.37    0.0     0.38    0.0     0.39    0.0     
          0.4     0.0     0.41    0.0     0.42    0.0     0.43    0.0     
          0.44    0.0     0.45    0.0     0.46    0.0     0.47    0.0     
          0.48    0.0     0.49    0.0     0.5     0.0     0.51    0.0     
          0.52    0.0     0.53    0.0     0.54    0.0     0.55    0.0     
          0.56    0.0     0.57    0.0     0.58    0.0     0.59    0.0     
          0.6     0.0     0.61    0.0     0.62    0.0     0.63    0.0     
          0.64    0.0     0.65    0.0     0.66    0.0     0.67    0.0     
          0.68    0.0     0.69    0.0     0.7     0.0     0.71    0.0     
          0.72    0.0     0.73    0.0     0.74    0.0     0.75    0.0     
          0.76    0.0     0.77    0.0     0.78    0.0     0.79    0.0     
          0.8     0.0     0.81    0.0     0.82    0.0     0.83    0.0     
          0.84    0.0     0.85    0.0     0.86    0.0     0.87    0.0     
          0.88    0.0     0.89    0.0     0.9     0.0     0.91    0.0     
          0.92    0.0     0.93    0.0     0.94    0.0     0.95    0.0     
          0.96    0.0     0.97    0.0     0.98    0.0     0.99    0.0     
          1.0     0.0     1.01    0.0     1.02    0.0     1.03    0.0     
          1.04    0.0     1.05    0.0     1.06    0.0     1.07    0.0     
          1.08    0.0     1.09    0.0     1.1     0.0     1.11    0.0     
          1.12    0.0     1.13    0.0     1.14    0.0     1.15    0.0     
          1.16    0.0     1.17    0.0     1.18    0.0     1.19    0.0     
          1.2     0.0     1.21    0.0     1.22    0.0     1.23    0.0     
          1.24    0.0     1.25    0.0     1.26    0.0     1.27    0.0     
          1.28    0.0     1.29    0.0     1.3     0.0     1.31    0.0     
          1.32    0.0     1.33    0.0     1.34    0.0     1.35    0.0     
          1.36    0.0     1.37    0.0     1.38    0.0     1.39    0.0     
          1.4     0.0     1.41    0.0     1.42    0.0     1.43    0.0     
          1.44    0.0     1.45    0.0     1.46    0.0     1.47    0.0     
          1.48    0.0     1.49    0.0     1.5     0.0     1.51    0.0     
          1.52    0.0     1.53    0.0     1.54    0.0     1.55    0.0     
          1.56    0.0     1.57    0.0     1.58    0.0     1.59    0.0     
          1.6     0.0     1.61    0.0     1.62    0.0     1.63    0.0     
          1.64    0.0     1.65    0.0     1.66    0.0     1.67    0.0     
          1.68    0.0     1.69    0.0     1.7     0.0     1.71    0.0     
          1.72    0.0     1.73    0.0     1.74    0.0     1.75    0.0     
          1.76    0.0     1.77    0.0     1.78    0.0     1.79    0.0     
          1.8     0.0     1.81    0.0     1.82    0.0     1.83    0.0     
          1.84    0.0     1.85    0.0     1.86    0.0     1.87    0.0     
          1.88    0.0     1.89    0.0     1.9     0.0     1.91    0.0     
          1.92    0.0     1.93    0.0     1.94    0.0     1.95    0.0     
          1.96    0.0     1.97    0.0     1.98    0.0     1.99    0.0     
          2.0     0.0     2.01    0.0     2.02    0.0     2.03    0.0     
          2.04    0.0     2.05    0.0     2.06    0.0     2.07    0.0     
          2.08    0.0     2.09    0.0     2.1     0.0     2.11    0.0     
          2.12    0.0     2.13    0.0     2.14    0.0     2.15    0.0     
          2.16    0.0     2.17    0.0     2.18    0.0     2.19    0.0     
          2.2     0.0     2.21    0.0     2.22    0.0     2.23    0.0     
          2.24    0.0     2.25    0.0     2.26    0.0     2.27    0.0     
          2.28    0.0     2.29    0.0     2.3     0.0     2.31    0.0     
          2.32    0.0     2.33    0.0     2.34    0.0     2.35    0.0     
          2.36    0.0     2.37    0.0     2.38    0.0     2.39    0.0     
          2.4     0.0     2.41    0.0     2.42    0.0     2.43    0.0     
          2.44    0.0     2.45    0.0     2.46    0.0     2.47    0.0     
          2.48    0.0     2.49    0.0     2.5     0.0     2.51    0.0     
          2.52    0.0     2.53    0.0     2.54    0.0     2.55    0.0     
          2.56    0.0     2.57    0.0     2.58    0.0     2.59    0.0     
          2.6     0.0     2.61    0.0     2.62    0.0     2.63    0.0     
          2.64    0.0     2.65    0.0     2.66    0.0     2.67    0.0     
          2.68    0.0     2.69    0.0     2.7     0.0     2.71    0.0     
          2.72    0.0     2.73    0.0     2.74    0.0     2.75    0.0     
          2.76    0.0     2.77    0.0     2.78    0.0     2.79    0.0     
          2.8     0.0     2.81    0.0     2.82    0.0     2.83    0.0     
          2.84    0.0     2.85    0.0     2.86    0.0     2.87    0.0     
          2.88    0.0     2.89    0.0     2.9     0.0     2.91    0.0     
          2.92    0.0     2.93    0.0     2.94    0.0     2.95    0.0     
          2.96    0.0     2.97    0.0     2.98    0.0     2.99    0.0     
          3.0     0.0     3.01    0.0     3.02    0.0     3.03    0.0     
          3.04    0.0     3.05    0.0     3.06    0.0     3.07    0.0     
          3.08    0.0     3.09    0.0     3.1     0.0     3.11    0.0     
          3.12    0.0     3.13    0.0     3.14    0.0     3.15    0.0     
          3.16    0.0     3.17    0.0     3.18    0.0     3.19    0.0     
          3.2     0.0     3.21    0.0     3.22    0.0     3.23    0.0     
          3.24    0.0     3.25    0.0     3.26    0.0     3.27    0.0     
          3.28    0.0     3.29    0.0     3.3     0.0     3.31    0.0     
          3.32    0.0     3.33    0.0     3.34    0.0     3.35    0.0     
          3.36    0.0     3.37    0.0     3.38    0.0     3.39    0.0     
          3.4     0.0     3.41    0.0     3.42    0.0     3.43    0.0     
          3.44    0.0     3.45    0.0     3.46    0.0     3.47    0.0     
          3.48    0.0     3.49    0.0     3.5     0.0     3.51    0.0     
          3.52    0.0     3.53    0.0     3.54    0.0     3.55    0.0     
          3.56    0.0     3.57    0.0     3.58    0.0     3.59    0.0     
          3.6     0.0     3.61    0.0     3.62    0.0     3.63    0.0     
          3.64    0.0     3.65    0.0     3.66    0.0     3.67    0.0     
          3.68    0.0     3.69    0.0     3.7     0.0     3.71    0.0     
          3.72    0.0     3.73    0.0     3.74    0.0     3.75    0.0     
          3.76    0.0     3.77    0.0     3.78    0.0     3.79    0.0     
          3.8     0.0     3.81    0.0     3.82    0.0     3.83    0.0     
          3.84    0.0     3.85    0.0     3.86    0.0     3.87    0.0     
          3.88    0.0     3.89    0.0     3.9     0.0     3.91    0.0     
          3.92    0.0     3.93    0.0     3.94    0.0     3.95    0.0     
          3.96    0.0     3.97    0.0     3.98    0.0     3.99    0.0     
          4.0     0.0     4.01    0.0     4.02    0.0     4.03    0.0     
          4.04    0.0     4.05    0.0     4.06    0.0     4.07    0.0     
          4.08    0.0     4.09    0.0     4.1     0.0     4.11    0.0     
          4.12    0.0     4.13    0.0     4.14    0.0     4.15    0.0     
          4.16    0.0     4.17    0.0     4.18    0.0     4.19    0.0     
          4.2     0.0     4.21    0.0     4.22    0.0     4.23    0.0     
          4.24    0.0     4.25    0.0     4.26    0.0     4.27    0.0     
          4.28    0.0     4.29    0.0     4.3     0.0     4.31    0.0     
          4.32    0.0     4.33    0.0     4.34    0.0     4.35    0.0     
          4.36    0.0     4.37    0.0     4.38    0.0     4.39    0.0     
          4.4     0.0     4.41    0.0     4.42    0.0     4.43    0.0     
          4.44    0.0     4.45    0.0     4.46    0.0     4.47    0.0     
          4.48    0.0     4.49    0.0     4.5     0.0     4.51    0.0     
          4.52    0.0     4.53    0.0     4.54    0.0     4.55    0.0     
          4.56    0.0     4.57    0.0     4.58    0.0     4.59    0.0     
          4.6     0.0     4.61    0.0     4.62    0.0     4.63    0.0     
          4.64    0.0     4.65    0.0     4.66    0.0     4.67    0.0     
          4.68    0.0     4.69    0.0     4.7     0.0     4.71    0.0     
          4.72    0.0     4.73    0.0     4.74    0.0     4.75    0.0     
          4.76    0.0     4.77    0.0     4.78    0.0     4.79    0.0     
          4.8     0.0     4.81    0.0     4.82    0.0     4.83    0.0     
          4.84    0.0     4.85    0.0     4.86    0.0     4.87    0.0     
          4.88    0.0     4.89    0.0     4.9     0.0     4.91    0.0     
          4.92    0.0     4.93    0.0     4.94    0.0     4.95    0.0     
          4.96    0.0     4.97    0.0     4.98    0.0     4.99    0.0     
          5.0     0.0     5.01    0.0     5.02    0.0     5.03    0.0     
          5.04    0.0     5.05    0.0     5.06    0.0     5.07    0.0     
          5.08    0.0     5.09    0.0     5.1     0.0     5.11    0.0     
          5.12    0.0     5.13    0.0     5.14    0.0     5.15    0.0     
          5.16    0.0     5.17    0.0     5.18    0.0     5.19    0.0     
          5.2     0.0     5.21    0.0     5.22    0.0     5.23    0.0     
          5.24    0.0     5.25    0.0     5.26    0.0     5.27    0.0     
          5.28    0.0     5.29    0.0     5.3     0.0     5.31    0.0     
          5.32    0.0     5.33    0.0     5.34    0.0     5.35    0.0     
          5.36    0.0     5.37    0.0     5.38    0.0     5.39    0.0     
          5.4     0.0     5.41    0.0     5.42    0.0     5.43    0.0     
          5.44    0.0     5.45    0.0     5.46    0.0     5.47    0.0     
          5.48    0.0     5.49    0.0     5.5     0.0     5.51    0.0     
          5.52    0.0     5.53    0.0     5.54    0.0     5.55    0.0     
          5.56    0.0     5.57    0.0     5.58    0.0     5.59    0.0     
          5.6     0.0     5.61    0.0     5.62    0.0     5.63    0.0     
          5.64    0.0     5.65    0.0     5.66    0.0     5.67    0.0     
          5.68    0.0     5.69    0.0     5.7     0.0     5.71    0.0     
          5.72    0.0     5.73    0.0     5.74    0.0     5.75    0.0     
          5.76    0.0     5.77    0.0     5.78    0.0     5.79    0.0     
          5.8     0.0     5.81    0.0     5.82    0.0     5.83    0.0     
          5.84    0.0     5.85    0.0     5.86    0.0     5.87    0.0     
          5.88    0.0     5.89    0.0     5.9     0.0     5.91    0.0     
          5.92    0.0     5.93    0.0     5.94    0.0     5.95    0.0     
          5.96    0.0     5.97    0.0     5.98    0.0     5.99    0.0     
          6.0     0.0     6.01    0.0     6.02    0.0     6.03    0.0     
          6.04    0.0     6.05    0.0     6.06    0.0     6.07    0.0     
          6.08    0.0     6.09    0.0     6.1     0.0     6.11    0.0     
          6.12    0.0     6.13    0.0     6.14    0.0     6.15    0.0     
          6.16    0.0     6.17    0.0     6.18    0.0     6.19    0.0     
          6.2     0.0     6.21    0.0     6.22    0.0     6.23    0.0     
          6.24    0.0     6.25    0.0     6.26    0.0     6.27    0.0     
          6.28    0.0     6.29    0.0     6.3     0.0     6.31    0.0     
          6.32    0.0     6.33    0.0     6.34    0.0     6.35    0.0     
          6.36    0.0     6.37    0.0     6.38    0.0     6.39    0.0     
          6.4     0.0     6.41    0.0     6.42    0.0     6.43    0.0     
          6.44    0.0     6.45    0.0     6.46    0.0     6.47    0.0     
          6.48    0.0     6.49    0.0     6.5     0.0     6.51    0.0     
          6.52    0.0     6.53    0.0     6.54    0.0     6.55    0.0     
          6.56    0.0     6.57    0.0     6.58    0.0     6.59    0.0     
          6.6     0.0     6.61    0.0     6.62    0.0     6.63    0.0     
          6.64    0.0     6.65    0.0     6.66    0.0     6.67    0.0     
          6.68    0.0     6.69    0.0     6.7     0.0     6.71    0.0     
          6.72    0.0     6.73    0.0     6.74    0.0     6.75    0.0     
          6.76    0.0     6.77    0.0     6.78    0.0     6.79    0.0     
          6.8     0.0     6.81    0.0     6.82    0.0     6.83    0.0     
          6.84    0.0     6.85    0.0     6.86    0.0     6.87    0.0     
          6.88    0.0     6.89    0.0     6.9     0.0     6.91    0.0     
          6.92    0.0     6.93    0.0     6.94    0.0     6.95    0.0     
          6.96    0.0     6.97    0.0     6.98    0.0     6.99    0.0     
          7.0     0.0     7.01    0.0     7.02    0.0     7.03    0.0     
          7.04    0.0     7.05    0.0     7.06    0.0     7.07    0.0     
          7.08    0.0     7.09    0.0     7.1     0.0     7.11    0.0     
          7.12    0.0     7.13    0.0     7.14    0.0     7.15    0.0     
          7.16    0.0     7.17    0.0     7.18    0.0     7.19    0.0     
          7.2     0.0     7.21    0.0     7.22    0.0     7.23    0.0     
          7.24    0.0     7.25    0.0     7.26    0.0     7.27    0.0     
          7.28    0.0     7.29    0.0     7.3     0.0     7.31    0.0     
          7.32    0.0     7.33    0.0     7.34    0.0     7.35    0.0     
          7.36    0.0     7.37    0.0     7.38    0.0     7.39    0.0     
          7.4     0.0     7.41    0.0     7.42    0.0     7.43    0.0     
          7.44    0.0     7.45    0.0     7.46    0.0     7.47    0.0     
          7.48    0.0     7.49    0.0     7.5     0.0     7.51    0.0     
          7.52    0.0     7.53    0.0     7.54    0.0     7.55    0.0     
          7.56    0.0     7.57    0.0     7.58    0.0     7.59    0.0     
          7.6     0.0     7.61    0.0     7.62    0.0     7.63    0.0     
          7.64    0.0     7.65    0.0     7.66    0.0     7.67    0.0     
          7.68    0.0     7.69    0.0     7.7     0.0     7.71    0.0     
          7.72    0.0     7.73    0.0     7.74    0.0     7.75    0.0     
          7.76    0.0     7.77    0.0     7.78    0.0     7.79    0.0     
          7.8     0.0     7.81    0.0     7.82    0.0     7.83    0.0     
          7.84    0.0     7.85    0.0     7.86    0.0     7.87    0.0     
          7.88    0.0     7.89    0.0     7.9     0.0     7.91    0.0     
          7.92    0.0     7.93    0.0     7.94    0.0     7.95    0.0     
          7.96    0.0     7.97    0.0     7.98    0.0     7.99    0.0     
          8.0     0.0     8.01    0.0     8.02    0.0     8.03    0.0     
          8.04    0.0     8.05    0.0     8.06    0.0     8.07    0.0     
          8.08    0.0     8.09    0.0     8.1     0.0     8.11    0.0     
          8.12    0.0     8.13    0.0     8.14    0.0     8.15    0.0     
          8.16    0.0     8.17    0.0     8.18    0.0     8.19    0.0     
          8.2     0.0     8.21    0.0     8.22    0.0     8.23    0.0     
          8.24    0.0     8.25    0.0     8.26    0.0     8.27    0.0     
          8.28    0.0     8.29    0.0     8.3     0.0     8.31    0.0     
          8.32    0.0     8.33    0.0     8.34    0.0     8.35    0.0     
          8.36    0.0     8.37    0.0     8.38    0.0     8.39    0.0     
          8.4     0.0     8.41    0.0     8.42    0.0     8.43    0.0     
          8.44    0.0     8.45    0.0     8.46    0.0     8.47    0.0     
          8.48    0.0     8.49    0.0     8.5     0.0     8.51    0.0     
          8.52    0.0     8.53    0.0     8.54    0.0     8.55    0.0     
          8.56    0.0     8.57    0.0     8.58    0.0     8.59    0.0     
          8.6     0.0     8.61    0.0     8.62    0.0     8.63    0.0     
          8.64    0.0     8.65    0.0     8.66    0.0     8.67    0.0     
          8.68    0.0     8.69    0.0     8.7     0.0     8.71    0.0     
          8.72    0.0     8.73    0.0     8.74    0.0     8.75    0.0     
          8.76    0.0     8.77    0.0     8.78    0.0     8.79    0.0     
          8.8     0.0     8.81    0.0     8.82    0.0     8.83    0.0     
          8.84    0.0     8.85    0.0     8.86    0.0     8.87    0.0     
          8.88    0.0     8.89    0.0     8.9     0.0     8.91    0.0     
          8.92    0.0     8.93    0.0     8.94    0.0     8.95    0.0     
          8.96    0.0     8.97    0.0     8.98    0.0     8.99    0.0     
          9.0     0.0     9.01    0.0     9.02    0.0     9.03    0.0     
          9.04    0.0     9.05    0.0     9.06    0.0     9.07    0.0     
          9.08    0.0     9.09    0.0     9.1     0.0     9.11    0.0     
          9.12    0.0     9.13    0.0     9.14    0.0     9.15    0.0     
          9.16    0.0     9.17    0.0     9.18    0.0     9.19    0.0     
          9.2     0.0     9.21    0.0     9.22    0.0     9.23    0.0     
          9.24    0.0     9.25    0.0     9.26    0.0     9.27    0.0     
          9.28    0.0     9.29    0.0     9.3     0.0     9.31    0.0     
          9.32    0.0     9.33    0.0     9.34    0.0     9.35    0.0     
          9.36    0.0     9.37    0.0     9.38    0.0     9.39    0.0     
          9.4     0.0     9.41    0.0     9.42    0.0     9.43    0.0     
          9.44    0.0     9.45    0.0     9.46    0.0     9.47    0.0     
          9.48    0.0     9.49    0.0     9.5     0.0     9.51    0.0     
          9.52    0.0     9.53    0.0     9.54    0.0     9.55    0.0     
          9.56    0.0     9.57    0.0     9.58    0.0     9.59    0.0     
          9.6     0.0     9.61    0.0     9.62    0.0     9.63    0.0     
          9.64    0.0     9.65    0.0     9.66    0.0     9.67    0.0     
          9.68    0.0     9.69    0.0     9.7     0.0     9.71    0.0     
          9.72    0.0     9.73    0.0     9.74    0.0     9.75    0.0     
          9.76    0.0     9.77    0.0     9.78    0.0     9.79    0.0     
          9.8     0.0     9.81    0.0     9.82    0.0     9.83    0.0     
          9.84    0.0     9.85    0.0     9.86    0.0     9.87    0.0     
          9.88    0.0     9.89    0.0     9.9     0.0     9.91    0.0     
          9.92    0.0     9.93    0.0     9.94    0.0     9.95    0.0     
          9.96    0.0     9.97    0.0     9.98    0.0     9.99    0.0     
          10.0    0.0     10.01   -0.2575 10.02   -1.0160 10.03   -2.2339 
          10.04   -3.8440 10.05   -5.7581 10.06   -7.8708 10.07   -10.066 
          10.08   -12.223 10.09   -14.224 10.1    -15.958 10.11   -17.330 
          10.12   -18.265 10.13   -18.711 10.14   -18.644 10.15   -18.068 
          10.16   -17.014 10.17   -15.540 10.18   -13.727 10.19   -11.675 
          10.2    -9.4966 10.21   -7.3111 10.22   -5.2390 10.23   -3.3941 
          10.24   -1.8778 10.25   -0.7735 10.26   -0.1417 10.27   0.0     
          10.28   0.0     10.29   0.0     10.3    0.0     10.31   0.0     
          10.32   0.0     10.33   0.0     10.34   0.0     10.35   0.0     
          10.36   0.0     10.37   0.0     10.38   0.0     10.39   0.0     
          10.4    0.0     10.41   0.0     10.42   0.0     10.43   0.0     
          10.44   0.0     10.45   0.0     10.46   0.0     10.47   0.0     
          10.48   0.0     10.49   0.0     10.5    0.0     10.51   0.0     
          10.52   0.0     10.53   0.0     10.54   0.0     10.55   0.0     
          10.56   0.0     10.57   0.0     10.58   0.0     10.59   0.0     
          10.6    0.0     10.61   0.0     10.62   0.0     10.63   0.0     
          10.64   0.0     10.65   0.0     10.66   0.0     10.67   0.0     
          10.68   0.0     10.69   0.0     10.7    0.0     10.71   0.0     
          10.72   0.0     10.73   0.0     10.74   0.0     10.75   0.0     
          10.76   0.0     10.77   0.0     10.78   0.0     10.79   0.0     
          10.8    0.0     10.81   0.0     10.82   0.0     10.83   0.0     
          10.84   0.0     10.85   0.0     10.86   0.0     10.87   0.0     
          10.88   0.0     10.89   0.0     10.9    0.0     10.91   0.0     
          10.92   0.0     10.93   0.0     10.94   0.0     10.95   0.0     
          10.96   0.0     10.97   0.0     10.98   0.0     10.99   0.0     
          11.0    0.0     11.01   0.0     11.02   0.0     11.03   0.0     
          11.04   0.0     11.05   0.0     11.06   0.0     11.07   0.0     
          11.08   0.0     11.09   0.0     11.1    0.0     11.11   0.0     
          11.12   0.0     11.13   0.0     11.14   0.0     11.15   0.0     
          11.16   0.0     11.17   0.0     11.18   0.0     11.19   0.0     
          11.2    0.0     11.21   0.0     11.22   0.0     11.23   0.0     
          11.24   0.0     11.25   0.0     11.26   0.0     11.27   0.0     
          11.28   0.0     11.29   0.0     11.3    0.0     11.31   0.0     
          11.32   0.0     11.33   0.0     11.34   0.0     11.35   0.0     
          11.36   0.0     11.37   0.0     11.38   0.0     11.39   0.0     
          11.4    0.0     11.41   0.0     11.42   0.0     11.43   0.0     
          11.44   0.0     11.45   0.0     11.46   0.0     11.47   0.0     
          11.48   0.0     11.49   0.0     11.5    0.0     11.51   0.0     
          11.52   0.0     11.53   0.0     11.54   0.0     11.55   0.0     
          11.56   0.0     11.57   0.0     11.58   0.0     11.59   0.0     
          11.6    0.0     11.61   0.0     11.62   0.0     11.63   0.0     
          11.64   0.0     11.65   0.0     11.66   0.0     11.67   0.0     
          11.68   0.0     11.69   0.0     11.7    0.0     11.71   0.0     
          11.72   0.0     11.73   0.0     11.74   0.0     11.75   0.0     
          11.76   0.0     11.77   0.0     11.78   0.0     11.79   0.0     
          11.8    0.0     11.81   0.0     11.82   0.0     11.83   0.0     
          11.84   0.0     11.85   0.0     11.86   0.0     11.87   0.0     
          11.88   0.0     11.89   0.0     11.9    0.0     11.91   0.0     
          11.92   0.0     11.93   0.0     11.94   0.0     11.95   0.0     
          11.96   0.0     11.97   0.0     11.98   0.0     11.99   0.0     
          12.0    0.0     12.01   0.0     12.02   0.0     12.03   0.0     
          12.04   0.0     12.05   0.0     12.06   0.0     12.07   0.0     
          12.08   0.0     12.09   0.0     12.1    0.0     12.11   0.0     
          12.12   0.0     12.13   0.0     12.14   0.0     12.15   0.0     
          12.16   0.0     12.17   0.0     12.18   0.0     12.19   0.0     
          12.2    0.0     12.21   0.0     12.22   0.0     12.23   0.0     
          12.24   0.0     12.25   0.0     12.26   0.0     12.27   0.0     
          12.28   0.0     12.29   0.0     12.3    0.0     12.31   0.0     
          12.32   0.0     12.33   0.0     12.34   0.0     12.35   0.0     
          12.36   0.0     12.37   0.0     12.38   0.0     12.39   0.0     
          12.4    0.0     12.41   0.0     12.42   0.0     12.43   0.0     
          12.44   0.0     12.45   0.0     12.46   0.0     12.47   0.0     
          12.48   0.0     12.49   0.0     12.5    0.0     12.51   0.0     
          12.52   0.0     12.53   0.0     12.54   0.0     12.55   0.0     
          12.56   0.0     12.57   0.0     12.58   0.0     12.59   0.0     
          12.6    0.0     12.61   0.0     12.62   0.0     12.63   0.0     
          12.64   0.0     12.65   0.0     12.66   0.0     12.67   0.0     
          12.68   0.0     12.69   0.0     12.7    0.0     12.71   0.0     
          12.72   0.0     12.73   0.0     12.74   0.0     12.75   0.0     
          12.76   0.0     12.77   0.0     12.78   0.0     12.79   0.0     
          12.8    0.0     12.81   0.0     12.82   0.0     12.83   0.0     
          12.84   0.0     12.85   0.0     12.86   0.0     12.87   0.0     
          12.88   0.0     12.89   0.0     12.9    0.0     12.91   0.0     
          12.92   0.0     12.93   0.0     12.94   0.0     12.95   0.0     
          12.96   0.0     12.97   0.0     12.98   0.0     12.99   0.0     
          13.0    0.0     13.01   0.0     13.02   0.0     13.03   0.0     
          13.04   0.0     13.05   0.0     13.06   0.0     13.07   0.0     
          13.08   0.0     13.09   0.0     13.1    0.0     13.11   0.0     
          13.12   0.0     13.13   0.0     13.14   0.0     13.15   0.0     
          13.16   0.0     13.17   0.0     13.18   0.0     13.19   0.0     
          13.2    0.0     13.21   0.0     13.22   0.0     13.23   0.0     
          13.24   0.0     13.25   0.0     13.26   0.0     13.27   0.0     
          13.28   0.0     13.29   0.0     13.3    0.0     13.31   0.0     
          13.32   0.0     13.33   0.0     13.34   0.0     13.35   0.0     
          13.36   0.0     13.37   0.0     13.38   0.0     13.39   0.0     
          13.4    0.0     13.41   0.0     13.42   0.0     13.43   0.0     
          13.44   0.0     13.45   0.0     13.46   0.0     13.47   0.0     
          13.48   0.0     13.49   0.0     13.5    0.0     13.51   0.0     
          13.52   0.0     13.53   0.0     13.54   0.0     13.55   0.0     
          13.56   0.0     13.57   0.0     13.58   0.0     13.59   0.0     
          13.6    0.0     13.61   0.0     13.62   0.0     13.63   0.0     
          13.64   0.0     13.65   0.0     13.66   0.0     13.67   0.0     
          13.68   0.0     13.69   0.0     13.7    0.0     13.71   0.0     
          13.72   0.0     13.73   0.0     13.74   0.0     13.75   0.0     
          13.76   0.0     13.77   0.0     13.78   0.0     13.79   0.0     
          13.8    0.0     13.81   0.0     13.82   0.0     13.83   0.0     
          13.84   0.0     13.85   0.0     13.86   0.0     13.87   0.0     
          13.88   0.0     13.89   0.0     13.9    0.0     13.91   0.0     
          13.92   0.0     13.93   0.0     13.94   0.0     13.95   0.0     
          13.96   0.0     13.97   0.0     13.98   0.0     13.99   0.0     
          14.0    0.0     14.01   0.0     14.02   0.0     14.03   0.0     
          14.04   0.0     14.05   0.0     14.06   0.0     14.07   0.0     
          14.08   0.0     14.09   0.0     14.1    0.0     14.11   0.0     
          14.12   0.0     14.13   0.0     14.14   0.0     14.15   0.0     
          14.16   0.0     14.17   0.0     14.18   0.0     14.19   0.0     
          14.2    0.0     14.21   0.0     14.22   0.0     14.23   0.0     
          14.24   0.0     14.25   0.0     14.26   0.0     14.27   0.0     
          14.28   0.0     14.29   0.0     14.3    0.0     14.31   0.0     
          14.32   0.0     14.33   0.0     14.34   0.0     14.35   0.0     
          14.36   0.0     14.37   0.0     14.38   0.0     14.39   0.0     
          14.4    0.0     14.41   0.0     14.42   0.0     14.43   0.0     
          14.44   0.0     14.45   0.0     14.46   0.0     14.47   0.0     
          14.48   0.0     14.49   0.0     14.5    0.0     14.51   0.0     
          14.52   0.0     14.53   0.0     14.54   0.0     14.55   0.0     
          14.56   0.0     14.57   0.0     14.58   0.0     14.59   0.0     
          14.6    0.0     14.61   0.0     14.62   0.0     14.63   0.0     
          14.64   0.0     14.65   0.0     14.66   0.0     14.67   0.0     
          14.68   0.0     14.69   0.0     14.7    0.0     14.71   0.0     
          14.72   0.0     14.73   0.0     14.74   0.0     14.75   0.0     
          14.76   0.0     14.77   0.0     14.78   0.0     14.79   0.0     
          14.8    0.0     14.81   0.0     14.82   0.0     14.83   0.0     
          14.84   0.0     14.85   0.0     14.86   0.0     14.87   0.0     
          14.88   0.0     14.89   0.0     14.9    0.0     14.91   0.0     
          14.92   0.0     14.93   0.0     14.94   0.0     14.95   0.0     
          14.96   0.0     14.97   0.0     14.98   0.0     14.99   0.0     
          15.0    0.0     15.01   0.0     15.02   0.0     15.03   0.0     
          15.04   0.0     15.05   0.0     15.06   0.0     15.07   0.0     
          15.08   0.0     15.09   0.0     15.1    0.0     15.11   0.0     
          15.12   0.0     15.13   0.0     15.14   0.0     15.15   0.0     
          15.16   0.0     15.17   0.0     15.18   0.0     15.19   0.0     
          15.2    0.0     15.21   0.0     15.22   0.0     15.23   0.0     
          15.24   0.0     15.25   0.0     15.26   0.0     15.27   0.0     
          15.28   0.0     15.29   0.0     15.3    0.0     15.31   0.0     
          15.32   0.0     15.33   0.0     15.34   0.0     15.35   0.0     
          15.36   0.0     15.37   0.0     15.38   0.0     15.39   0.0     
          15.4    0.0     15.41   0.0     15.42   0.0     15.43   0.0     
          15.44   0.0     15.45   0.0     15.46   0.0     15.47   0.0     
          15.48   0.0     15.49   0.0     15.5    0.0     15.51   0.0     
          15.52   0.0     15.53   0.0     15.54   0.0     15.55   0.0     
          15.56   0.0     15.57   0.0     15.58   0.0     15.59   0.0     
          15.6    0.0     15.61   0.0     15.62   0.0     15.63   0.0     
          15.64   0.0     15.65   0.0     15.66   0.0     15.67   0.0     
          15.68   0.0     15.69   0.0     15.7    0.0     15.71   0.0     
          15.72   0.0     15.73   0.0     15.74   0.0     15.75   0.0     
          15.76   0.0     15.77   0.0     15.78   0.0     15.79   0.0     
          15.8    0.0     15.81   0.0     15.82   0.0     15.83   0.0     
          15.84   0.0     15.85   0.0     15.86   0.0     15.87   0.0     
          15.88   0.0     15.89   0.0     15.9    0.0     15.91   0.0     
          15.92   0.0     15.93   0.0     15.94   0.0     15.95   0.0     
          15.96   0.0     15.97   0.0     15.98   0.0     15.99   0.0     
          16.0    0.0     16.01   0.0     16.02   0.0     16.03   0.0     
          16.04   0.0     16.05   0.0     16.06   0.0     16.07   0.0     
          16.08   0.0     16.09   0.0     16.1    0.0     16.11   0.0     
          16.12   0.0     16.13   0.0     16.14   0.0     16.15   0.0     
          16.16   0.0     16.17   0.0     16.18   0.0     16.19   0.0     
          16.2    0.0     16.21   0.0     16.22   0.0     16.23   0.0     
          16.24   0.0     16.25   0.0     16.26   0.0     16.27   0.0     
          16.28   0.0     16.29   0.0     16.3    0.0     16.31   0.0     
          16.32   0.0     16.33   0.0     16.34   0.0     16.35   0.0     
          16.36   0.0     16.37   0.0     16.38   0.0     16.39   0.0     
          16.4    0.0     16.41   0.0     16.42   0.0     16.43   0.0     
          16.44   0.0     16.45   0.0     16.46   0.0     16.47   0.0     
          16.48   0.0     16.49   0.0     16.5    0.0     16.51   0.0     
          16.52   0.0     16.53   0.0     16.54   0.0     16.55   0.0     
          16.56   0.0     16.57   0.0     16.58   0.0     16.59   0.0     
          16.6    0.0     16.61   0.0     16.62   0.0     16.63   0.0     
          16.64   0.0     16.65   0.0     16.66   0.0     16.67   0.0     
          16.68   0.0     16.69   0.0     16.7    0.0     16.71   0.0     
          16.72   0.0     16.73   0.0     16.74   0.0     16.75   0.0     
          16.76   0.0     16.77   0.0     16.78   0.0     16.79   0.0     
          16.8    0.0     16.81   0.0     16.82   0.0     16.83   0.0     
          16.84   0.0     16.85   0.0     16.86   0.0     16.87   0.0     
          16.88   0.0     16.89   0.0     16.9    0.0     16.91   0.0     
          16.92   0.0     16.93   0.0     16.94   0.0     16.95   0.0     
          16.96   0.0     16.97   0.0     16.98   0.0     16.99   0.0     
          17.0    0.0     17.01   0.0     17.02   0.0     17.03   0.0     
          17.04   0.0     17.05   0.0     17.06   0.0     17.07   0.0     
          17.08   0.0     17.09   0.0     17.1    0.0     17.11   0.0     
          17.12   0.0     17.13   0.0     17.14   0.0     17.15   0.0     
          17.16   0.0     17.17   0.0     17.18   0.0     17.19   0.0     
          17.2    0.0     17.21   0.0     17.22   0.0     17.23   0.0     
          17.24   0.0     17.25   0.0     17.26   0.0     17.27   0.0     
          17.28   0.0     17.29   0.0     17.3    0.0     17.31   0.0     
          17.32   0.0     17.33   0.0     17.34   0.0     17.35   0.0     
          17.36   0.0     17.37   0.0     17.38   0.0     17.39   0.0     
          17.4    0.0     17.41   0.0     17.42   0.0     17.43   0.0     
          17.44   0.0     17.45   0.0     17.46   0.0     17.47   0.0     
          17.48   0.0     17.49   0.0     17.5    0.0     17.51   0.0     
          17.52   0.0     17.53   0.0     17.54   0.0     17.55   0.0     
          17.56   0.0     17.57   0.0     17.58   0.0     17.59   0.0     
          17.6    0.0     17.61   0.0     17.62   0.0     17.63   0.0     
          17.64   0.0     17.65   0.0     17.66   0.0     17.67   0.0     
          17.68   0.0     17.69   0.0     17.7    0.0     17.71   0.0     
          17.72   0.0     17.73   0.0     17.74   0.0     17.75   0.0     
          17.76   0.0     17.77   0.0     17.78   0.0     17.79   0.0     
          17.8    0.0     17.81   0.0     17.82   0.0     17.83   0.0     
          17.84   0.0     17.85   0.0     17.86   0.0     17.87   0.0     
          17.88   0.0     17.89   0.0     17.9    0.0     17.91   0.0     
          17.92   0.0     17.93   0.0     17.94   0.0     17.95   0.0     
          17.96   0.0     17.97   0.0     17.98   0.0     17.99   0.0     
          18.0    0.0     18.01   0.0     18.02   0.0     18.03   0.0     
          18.04   0.0     18.05   0.0     18.06   0.0     18.07   0.0     
          18.08   0.0     18.09   0.0     18.1    0.0     18.11   0.0     
          18.12   0.0     18.13   0.0     18.14   0.0     18.15   0.0     
          18.16   0.0     18.17   0.0     18.18   0.0     18.19   0.0     
          18.2    0.0     18.21   0.0     18.22   0.0     18.23   0.0     
          18.24   0.0     18.25   0.0     18.26   0.0     18.27   0.0     
          18.28   0.0     18.29   0.0     18.3    0.0     18.31   0.0     
          18.32   0.0     18.33   0.0     18.34   0.0     18.35   0.0     
          18.36   0.0     18.37   0.0     18.38   0.0     18.39   0.0     
          18.4    0.0     18.41   0.0     18.42   0.0     18.43   0.0     
          18.44   0.0     18.45   0.0     18.46   0.0     18.47   0.0     
          18.48   0.0     18.49   0.0     18.5    0.0     18.51   0.0     
          18.52   0.0     18.53   0.0     18.54   0.0     18.55   0.0     
          18.56   0.0     18.57   0.0     18.58   0.0     18.59   0.0     
          18.6    0.0     18.61   0.0     18.62   0.0     18.63   0.0     
          18.64   0.0     18.65   0.0     18.66   0.0     18.67   0.0     
          18.68   0.0     18.69   0.0     18.7    0.0     18.71   0.0     
          18.72   0.0     18.73   0.0     18.74   0.0     18.75   0.0     
          18.76   0.0     18.77   0.0     18.78   0.0     18.79   0.0     
          18.8    0.0     18.81   0.0     18.82   0.0     18.83   0.0     
          18.84   0.0     18.85   0.0     18.86   0.0     18.87   0.0     
          18.88   0.0     18.89   0.0     18.9    0.0     18.91   0.0     
          18.92   0.0     18.93   0.0     18.94   0.0     18.95   0.0     
          18.96   0.0     18.97   0.0     18.98   0.0     18.99   0.0     
          19.0    0.0     19.01   0.0     19.02   0.0     19.03   0.0     
          19.04   0.0     19.05   0.0     19.06   0.0     19.07   0.0     
          19.08   0.0     19.09   0.0     19.1    0.0     19.11   0.0     
          19.12   0.0     19.13   0.0     19.14   0.0     19.15   0.0     
          19.16   0.0     19.17   0.0     19.18   0.0     19.19   0.0     
          19.2    0.0     19.21   0.0     19.22   0.0     19.23   0.0     
          19.24   0.0     19.25   0.0     19.26   0.0     19.27   0.0     
          19.28   0.0     19.29   0.0     19.3    0.0     19.31   0.0     
          19.32   0.0     19.33   0.0     19.34   0.0     19.35   0.0     
          19.36   0.0     19.37   0.0     19.38   0.0     19.39   0.0     
          19.4    0.0     19.41   0.0     19.42   0.0     19.43   0.0     
          19.44   0.0     19.45   0.0     19.46   0.0     19.47   0.0     
          19.48   0.0     19.49   0.0     19.5    0.0     19.51   0.0     
          19.52   0.0     19.53   0.0     19.54   0.0     19.55   0.0     
          19.56   0.0     19.57   0.0     19.58   0.0     19.59   0.0     
          19.6    0.0     19.61   0.0     19.62   0.0     19.63   0.0     
          19.64   0.0     19.65   0.0     19.66   0.0     19.67   0.0     
          19.68   0.0     19.69   0.0     19.7    0.0     19.71   0.0     
          19.72   0.0     19.73   0.0     19.74   0.0     19.75   0.0     
          19.76   0.0     19.77   0.0     19.78   0.0     19.79   0.0     
          19.8    0.0     19.81   0.0     19.82   0.0     19.83   0.0     
          19.84   0.0     19.85   0.0     19.86   0.0     19.87   0.0     
          19.88   0.0     19.89   0.0     19.9    0.0     19.91   0.0     
          19.92   0.0     19.93   0.0     19.94   0.0     19.95   0.0     
          19.96   0.0     19.97   0.0     19.98   0.0     19.99   0.0     
          20.0    0.0     20.01   0.12878 20.02   0.50804 20.03   1.11695 
          20.04   1.92203 20.05   2.87905 20.06   3.93542 20.07   5.03308 
          20.08   6.11171 20.09   7.11204 20.1    7.97909 20.11   8.66521 
          20.12   9.13270 20.13   9.35588 20.14   9.32247 20.15   9.03431 
          20.16   8.50723 20.17   7.77021 20.18   6.86374 20.19   5.83764 
          20.2    4.74830 20.21   3.65557 20.22   2.61952 20.23   1.69708 
          20.24   0.93893 20.25   0.38675 20.26   0.07087 20.27   0.0     
          20.28   0.0     20.29   0.0     20.3    0.0     20.31   0.0     
          20.32   0.0     20.33   0.0     20.34   0.0     20.35   0.0     
          20.36   0.0     20.37   0.0     20.38   0.0     20.39   0.0     
          20.4    0.0     20.41   0.0     20.42   0.0     20.43   0.0     
          20.44   0.0     20.45   0.0     20.46   0.0     20.47   0.0     
          20.48   0.0     20.49   0.0     20.5    0.0     20.51   0.0     
          20.52   0.0     20.53   0.0     20.54   0.0     20.55   0.0     
          20.56   0.0     20.57   0.0     20.58   0.0     20.59   0.0     
          20.6    0.0     20.61   0.0     20.62   0.0     20.63   0.0     
          20.64   0.0     20.65   0.0     20.66   0.0     20.67   0.0     
          20.68   0.0     20.69   0.0     20.7    0.0     20.71   0.0     
          20.72   0.0     20.73   0.0     20.74   0.0     20.75   0.0     
          20.76   0.0     20.77   0.0     20.78   0.0     20.79   0.0     
          20.8    0.0     20.81   0.0     20.82   0.0     20.83   0.0     
          20.84   0.0     20.85   0.0     20.86   0.0     20.87   0.0     
          20.88   0.0     20.89   0.0     20.9    0.0     20.91   0.0     
          20.92   0.0     20.93   0.0     20.94   0.0     20.95   0.0     
          20.96   0.0     20.97   0.0     20.98   0.0     20.99   0.0     
          21.0    0.0     21.01   0.0     21.02   0.0     21.03   0.0     
          21.04   0.0     21.05   0.0     21.06   0.0     21.07   0.0     
          21.08   0.0     21.09   0.0     21.1    0.0     21.11   0.0     
          21.12   0.0     21.13   0.0     21.14   0.0     21.15   0.0     
          21.16   0.0     21.17   0.0     21.18   0.0     21.19   0.0     
          21.2    0.0     21.21   0.0     21.22   0.0     21.23   0.0     
          21.24   0.0     21.25   0.0     21.26   0.0     21.27   0.0     
          21.28   0.0     21.29   0.0     21.3    0.0     21.31   0.0     
          21.32   0.0     21.33   0.0     21.34   0.0     21.35   0.0     
          21.36   0.0     21.37   0.0     21.38   0.0     21.39   0.0     
          21.4    0.0     21.41   0.0     21.42   0.0     21.43   0.0     
          21.44   0.0     21.45   0.0     21.46   0.0     21.47   0.0     
          21.48   0.0     21.49   0.0     21.5    0.0     21.51   0.0     
          21.52   0.0     21.53   0.0     21.54   0.0     21.55   0.0     
          21.56   0.0     21.57   0.0     21.58   0.0     21.59   0.0     
          21.6    0.0     21.61   0.0     21.62   0.0     21.63   0.0     
          21.64   0.0     21.65   0.0     21.66   0.0     21.67   0.0     
          21.68   0.0     21.69   0.0     21.7    0.0     21.71   0.0     
          21.72   0.0     21.73   0.0     21.74   0.0     21.75   0.0     
          21.76   0.0     21.77   0.0     21.78   0.0     21.79   0.0     
          21.8    0.0     21.81   0.0     21.82   0.0     21.83   0.0     
          21.84   0.0     21.85   0.0     21.86   0.0     21.87   0.0     
          21.88   0.0     21.89   0.0     21.9    0.0     21.91   0.0     
          21.92   0.0     21.93   0.0     21.94   0.0     21.95   0.0     
          21.96   0.0     21.97   0.0     21.98   0.0     21.99   0.0     
          22.0    0.0     22.01   0.0     22.02   0.0     22.03   0.0     
          22.04   0.0     22.05   0.0     22.06   0.0     22.07   0.0     
          22.08   0.0     22.09   0.0     22.1    0.0     22.11   0.0     
          22.12   0.0     22.13   0.0     22.14   0.0     22.15   0.0     
          22.16   0.0     22.17   0.0     22.18   0.0     22.19   0.0     
          22.2    0.0     22.21   0.0     22.22   0.0     22.23   0.0     
          22.24   0.0     22.25   0.0     22.26   0.0     22.27   0.0     
          22.28   0.0     22.29   0.0     22.3    0.0     22.31   0.0     
          22.32   0.0     22.33   0.0     22.34   0.0     22.35   0.0     
          22.36   0.0     22.37   0.0     22.38   0.0     22.39   0.0     
          22.4    0.0     22.41   0.0     22.42   0.0     22.43   0.0     
          22.44   0.0     22.45   0.0     22.46   0.0     22.47   0.0     
          22.48   0.0     22.49   0.0     22.5    0.0     22.51   0.0     
          22.52   0.0     22.53   0.0     22.54   0.0     22.55   0.0     
          22.56   0.0     22.57   0.0     22.58   0.0     22.59   0.0     
          22.6    0.0     22.61   0.0     22.62   0.0     22.63   0.0     
          22.64   0.0     22.65   0.0     22.66   0.0     22.67   0.0     
          22.68   0.0     22.69   0.0     22.7    0.0     22.71   0.0     
          22.72   0.0     22.73   0.0     22.74   0.0     22.75   0.0     
          22.76   0.0     22.77   0.0     22.78   0.0     22.79   0.0     
          22.8    0.0     22.81   0.0     22.82   0.0     22.83   0.0     
          22.84   0.0     22.85   0.0     22.86   0.0     22.87   0.0     
          22.88   0.0     22.89   0.0     22.9    0.0     22.91   0.0     
          22.92   0.0     22.93   0.0     22.94   0.0     22.95   0.0     
          22.96   0.0     22.97   0.0     22.98   0.0     22.99   0.0     
          23.0    0.0     23.01   0.0     23.02   0.0     23.03   0.0     
          23.04   0.0     23.05   0.0     23.06   0.0     23.07   0.0     
          23.08   0.0     23.09   0.0     23.1    0.0     23.11   0.0     
          23.12   0.0     23.13   0.0     23.14   0.0     23.15   0.0     
          23.16   0.0     23.17   0.0     23.18   0.0     23.19   0.0     
          23.2    0.0     23.21   0.0     23.22   0.0     23.23   0.0     
          23.24   0.0     23.25   0.0     23.26   0.0     23.27   0.0     
          23.28   0.0     23.29   0.0     23.3    0.0     23.31   0.0     
          23.32   0.0     23.33   0.0     23.34   0.0     23.35   0.0     
          23.36   0.0     23.37   0.0     23.38   0.0     23.39   0.0     
          23.4    0.0     23.41   0.0     23.42   0.0     23.43   0.0     
          23.44   0.0     23.45   0.0     23.46   0.0     23.47   0.0     
          23.48   0.0     23.49   0.0     23.5    0.0     23.51   0.0     
          23.52   0.0     23.53   0.0     23.54   0.0     23.55   0.0     
          23.56   0.0     23.57   0.0     23.58   0.0     23.59   0.0     
          23.6    0.0     23.61   0.0     23.62   0.0     23.63   0.0     
          23.64   0.0     23.65   0.0     23.66   0.0     23.67   0.0     
          23.68   0.0     23.69   0.0     23.7    0.0     23.71   0.0     
          23.72   0.0     23.73   0.0     23.74   0.0     23.75   0.0     
          23.76   0.0     23.77   0.0     23.78   0.0     23.79   0.0     
          23.8    0.0     23.81   0.0     23.82   0.0     23.83   0.0     
          23.84   0.0     23.85   0.0     23.86   0.0     23.87   0.0     
          23.88   0.0     23.89   0.0     23.9    0.0     23.91   0.0     
          23.92   0.0     23.93   0.0     23.94   0.0     23.95   0.0     
          23.96   0.0     23.97   0.0     23.98   0.0     23.99   0.0     
          24.0    0.0     24.01   0.0     24.02   0.0     24.03   0.0     
          24.04   0.0     24.05   0.0     24.06   0.0     24.07   0.0     
          24.08   0.0     24.09   0.0     24.1    0.0     24.11   0.0     
          24.12   0.0     24.13   0.0     24.14   0.0     24.15   0.0     
          24.16   0.0     24.17   0.0     24.18   0.0     24.19   0.0     
          24.2    0.0     24.21   0.0     24.22   0.0     24.23   0.0     
          24.24   0.0     24.25   0.0     24.26   0.0     24.27   0.0     
          24.28   0.0     24.29   0.0     24.3    0.0     24.31   0.0     
          24.32   0.0     24.33   0.0     24.34   0.0     24.35   0.0     
          24.36   0.0     24.37   0.0     24.38   0.0     24.39   0.0     
          24.4    0.0     24.41   0.0     24.42   0.0     24.43   0.0     
          24.44   0.0     24.45   0.0     24.46   0.0     24.47   0.0     
          24.48   0.0     24.49   0.0     24.5    0.0     24.51   0.0     
          24.52   0.0     24.53   0.0     24.54   0.0     24.55   0.0     
          24.56   0.0     24.57   0.0     24.58   0.0     24.59   0.0     
          24.6    0.0     24.61   0.0     24.62   0.0     24.63   0.0     
          24.64   0.0     24.65   0.0     24.66   0.0     24.67   0.0     
          24.68   0.0     24.69   0.0     24.7    0.0     24.71   0.0     
          24.72   0.0     24.73   0.0     24.74   0.0     24.75   0.0     
          24.76   0.0     24.77   0.0     24.78   0.0     24.79   0.0     
          24.8    0.0     24.81   0.0     24.82   0.0     24.83   0.0     
          24.84   0.0     24.85   0.0     24.86   0.0     24.87   0.0     
          24.88   0.0     24.89   0.0     24.9    0.0     24.91   0.0     
          24.92   0.0     24.93   0.0     24.94   0.0     24.95   0.0     
          24.96   0.0     24.97   0.0     24.98   0.0     24.99   0.0     
          25.0    0.0     25.01   0.0     25.02   0.0     25.03   0.0     
          25.04   0.0     25.05   0.0     25.06   0.0     25.07   0.0     
          25.08   0.0     25.09   0.0     25.1    0.0     25.11   0.0     
          25.12   0.0     25.13   0.0     25.14   0.0     25.15   0.0     
          25.16   0.0     25.17   0.0     25.18   0.0     25.19   0.0     
          25.2    0.0     25.21   0.0     25.22   0.0     25.23   0.0     
          25.24   0.0     25.25   0.0     25.26   0.0     25.27   0.0     
          25.28   0.0     25.29   0.0     25.3    0.0     25.31   0.0     
          25.32   0.0     25.33   0.0     25.34   0.0     25.35   0.0     
          25.36   0.0     25.37   0.0     25.38   0.0     25.39   0.0     
          25.4    0.0     25.41   0.0     25.42   0.0     25.43   0.0     
          25.44   0.0     25.45   0.0     25.46   0.0     25.47   0.0     
          25.48   0.0     25.49   0.0     25.5    0.0     25.51   0.0     
          25.52   0.0     25.53   0.0     25.54   0.0     25.55   0.0     
          25.56   0.0     25.57   0.0     25.58   0.0     25.59   0.0     
          25.6    0.0     25.61   0.0     25.62   0.0     25.63   0.0     
          25.64   0.0     25.65   0.0     25.66   0.0     25.67   0.0     
          25.68   0.0     25.69   0.0     25.7    0.0     25.71   0.0     
          25.72   0.0     25.73   0.0     25.74   0.0     25.75   0.0     
          25.76   0.0     25.77   0.0     25.78   0.0     25.79   0.0     
          25.8    0.0     25.81   0.0     25.82   0.0     25.83   0.0     
          25.84   0.0     25.85   0.0     25.86   0.0     25.87   0.0     
          25.88   0.0     25.89   0.0     25.9    0.0     25.91   0.0     
          25.92   0.0     25.93   0.0     25.94   0.0     25.95   0.0     
          25.96   0.0     25.97   0.0     25.98   0.0     25.99   0.0     
          26.0    0.0     26.01   0.0     26.02   0.0     26.03   0.0     
          26.04   0.0     26.05   0.0     26.06   0.0     26.07   0.0     
          26.08   0.0     26.09   0.0     26.1    0.0     26.11   0.0     
          26.12   0.0     26.13   0.0     26.14   0.0     26.15   0.0     
          26.16   0.0     26.17   0.0     26.18   0.0     26.19   0.0     
          26.2    0.0     26.21   0.0     26.22   0.0     26.23   0.0     
          26.24   0.0     26.25   0.0     26.26   0.0     26.27   0.0     
          26.28   0.0     26.29   0.0     26.3    0.0     26.31   0.0     
          26.32   0.0     26.33   0.0     26.34   0.0     26.35   0.0     
          26.36   0.0     26.37   0.0     26.38   0.0     26.39   0.0     
          26.4    0.0     26.41   0.0     26.42   0.0     26.43   0.0     
          26.44   0.0     26.45   0.0     26.46   0.0     26.47   0.0     
          26.48   0.0     26.49   0.0     26.5    0.0     26.51   0.0     
          26.52   0.0     26.53   0.0     26.54   0.0     26.55   0.0     
          26.56   0.0     26.57   0.0     26.58   0.0     26.59   0.0     
          26.6    0.0     26.61   0.0     26.62   0.0     26.63   0.0     
          26.64   0.0     26.65   0.0     26.66   0.0     26.67   0.0     
          26.68   0.0     26.69   0.0     26.7    0.0     26.71   0.0     
          26.72   0.0     26.73   0.0     26.74   0.0     26.75   0.0     
          26.76   0.0     26.77   0.0     26.78   0.0     26.79   0.0     
          26.8    0.0     26.81   0.0     26.82   0.0     26.83   0.0     
          26.84   0.0     26.85   0.0     26.86   0.0     26.87   0.0     
          26.88   0.0     26.89   0.0     26.9    0.0     26.91   0.0     
          26.92   0.0     26.93   0.0     26.94   0.0     26.95   0.0     
          26.96   0.0     26.97   0.0     26.98   0.0     26.99   0.0     
          27.0    0.0     27.01   0.0     27.02   0.0     27.03   0.0     
          27.04   0.0     27.05   0.0     27.06   0.0     27.07   0.0     
          27.08   0.0     27.09   0.0     27.1    0.0     27.11   0.0     
          27.12   0.0     27.13   0.0     27.14   0.0     27.15   0.0     
          27.16   0.0     27.17   0.0     27.18   0.0     27.19   0.0     
          27.2    0.0     27.21   0.0     27.22   0.0     27.23   0.0     
          27.24   0.0     27.25   0.0     27.26   0.0     27.27   0.0     
          27.28   0.0     27.29   0.0     27.3    0.0     27.31   0.0     
          27.32   0.0     27.33   0.0     27.34   0.0     27.35   0.0     
          27.36   0.0     27.37   0.0     27.38   0.0     27.39   0.0     
          27.4    0.0     27.41   0.0     27.42   0.0     27.43   0.0     
          27.44   0.0     27.45   0.0     27.46   0.0     27.47   0.0     
          27.48   0.0     27.49   0.0     27.5    0.0     27.51   0.0     
          27.52   0.0     27.53   0.0     27.54   0.0     27.55   0.0     
          27.56   0.0     27.57   0.0     27.58   0.0     27.59   0.0     
          27.6    0.0     27.61   0.0     27.62   0.0     27.63   0.0     
          27.64   0.0     27.65   0.0     27.66   0.0     27.67   0.0     
          27.68   0.0     27.69   0.0     27.7    0.0     27.71   0.0     
          27.72   0.0     27.73   0.0     27.74   0.0     27.75   0.0     
          27.76   0.0     27.77   0.0     27.78   0.0     27.79   0.0     
          27.8    0.0     27.81   0.0     27.82   0.0     27.83   0.0     
          27.84   0.0     27.85   0.0     27.86   0.0     27.87   0.0     
          27.88   0.0     27.89   0.0     27.9    0.0     27.91   0.0     
          27.92   0.0     27.93   0.0     27.94   0.0     27.95   0.0     
          27.96   0.0     27.97   0.0     27.98   0.0     27.99   0.0     
          28.0    0.0     28.01   0.0     28.02   0.0     28.03   0.0     
          28.04   0.0     28.05   0.0     28.06   0.0     28.07   0.0     
          28.08   0.0     28.09   0.0     28.1    0.0     28.11   0.0     
          28.12   0.0     28.13   0.0     28.14   0.0     28.15   0.0     
          28.16   0.0     28.17   0.0     28.18   0.0     28.19   0.0     
          28.2    0.0     28.21   0.0     28.22   0.0     28.23   0.0     
          28.24   0.0     28.25   0.0     28.26   0.0     28.27   0.0     
          28.28   0.0     28.29   0.0     28.3    0.0     28.31   0.0     
          28.32   0.0     28.33   0.0     28.34   0.0     28.35   0.0     
          28.36   0.0     28.37   0.0     28.38   0.0     28.39   0.0     
          28.4    0.0     28.41   0.0     28.42   0.0     28.43   0.0     
          28.44   0.0     28.45   0.0     28.46   0.0     28.47   0.0     
          28.48   0.0     28.49   0.0     28.5    0.0     28.51   0.0     
          28.52   0.0     28.53   0.0     28.54   0.0     28.55   0.0     
          28.56   0.0     28.57   0.0     28.58   0.0     28.59   0.0     
          28.6    0.0     28.61   0.0     28.62   0.0     28.63   0.0     
          28.64   0.0     28.65   0.0     28.66   0.0     28.67   0.0     
          28.68   0.0     28.69   0.0     28.7    0.0     28.71   0.0     
          28.72   0.0     28.73   0.0     28.74   0.0     28.75   0.0     
          28.76   0.0     28.77   0.0     28.78   0.0     28.79   0.0     
          28.8    0.0     28.81   0.0     28.82   0.0     28.83   0.0     
          28.84   0.0     28.85   0.0     28.86   0.0     28.87   0.0     
          28.88   0.0     28.89   0.0     28.9    0.0     28.91   0.0     
          28.92   0.0     28.93   0.0     28.94   0.0     28.95   0.0     
          28.96   0.0     28.97   0.0     28.98   0.0     28.99   0.0     
          29.0    0.0     29.01   0.0     29.02   0.0     29.03   0.0     
          29.04   0.0     29.05   0.0     29.06   0.0     29.07   0.0     
          29.08   0.0     29.09   0.0     29.1    0.0     29.11   0.0     
          29.12   0.0     29.13   0.0     29.14   0.0     29.15   0.0     
          29.16   0.0     29.17   0.0     29.18   0.0     29.19   0.0     
          29.2    0.0     29.21   0.0     29.22   0.0     29.23   0.0     
          29.24   0.0     29.25   0.0     29.26   0.0     29.27   0.0     
          29.28   0.0     29.29   0.0     29.3    0.0     29.31   0.0     
          29.32   0.0     29.33   0.0     29.34   0.0     29.35   0.0     
          29.36   0.0     29.37   0.0     29.38   0.0     29.39   0.0     
          29.4    0.0     29.41   0.0     29.42   0.0     29.43   0.0     
          29.44   0.0     29.45   0.0     29.46   0.0     29.47   0.0     
          29.48   0.0     29.49   0.0     29.5    0.0     29.51   0.0     
          29.52   0.0     29.53   0.0     29.54   0.0     29.55   0.0     
          29.56   0.0     29.57   0.0     29.58   0.0     29.59   0.0     
          29.6    0.0     29.61   0.0     29.62   0.0     29.63   0.0     
          29.64   0.0     29.65   0.0     29.66   0.0     29.67   0.0     
          29.68   0.0     29.69   0.0     29.7    0.0     29.71   0.0     
          29.72   0.0     29.73   0.0     29.74   0.0     29.75   0.0     
          29.76   0.0     29.77   0.0     29.78   0.0     29.79   0.0     
          29.8    0.0     29.81   0.0     29.82   0.0     29.83   0.0     
          29.84   0.0     29.85   0.0     29.86   0.0     29.87   0.0     
          29.88   0.0     29.89   0.0     29.9    0.0     29.91   0.0     
          29.92   0.0     29.93   0.0     29.94   0.0     29.95   0.0     
          29.96   0.0     29.97   0.0     29.98   0.0     29.99   0.0     
          30.0    0.0     ENDT    
#+end_src

#+NAME: BUGdihedral
#+begin_src org :tangle ./NASTRAN/BUGdihedral.bdf 
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ EXECUTIVE CONTROL								  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  assign OUTPUT4='data_out/Dihedral.op4',formatted,UNIT=11
  $ TIME 100 $(Max execution time)       
  $NASTRAN NLINES = 999999
  NASTRAN QUARTICDLM = 1
  SOL 146

  INCLUDE './DMAPs/Dihedral.bdf'

  CEND

  TITLE=BUG model #
  SPC = 1                  
  METHOD = 100
  FREQ = 930
  TSTEP = 940  
  $
  RESVEC = NO
  ECHO=NONE
  SUBCASE  1       
   GUST  = 10      
   DLOAD = 1     

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ BULK   									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  BEGIN BULK
  PARAM,BAILOUT,0
  PARAM,GRDPNT,0                                                              
  PARAM,K6ROT,1.0
  PARAM,SNORM,20.0
  PARAM,POST,0
  $PARAM,MAXRATIO,1.0E07 $Default anyway
  $PARAM   AUTOSPC YES
  MDLPRM  MLTSPLIN 1 $Aero grids can be defined in multiple splines (dafault 0)
  PARAM   WTMASS  1.0  
  PARAM   GUSTAERO -1     
  PARAM   Q       1. 
  $PARAM   LMODES  4

  $ TABDMP1 920     CRIT
  $         0.      0.015   8000.   0.015   ENDT    
  FREQ1   930     0.0     1.E-9   1   
  TSTEP   940     1       0.01    1            
  AERO           0      1.   7.271      1.
  DAREA,99999999,1005,3,0.          

  INCLUDE './Gusts/DummyGust.bdf'

  PARAM   MACH    0.82     
  MKAERO1 0.82   
          1.E-9    

  EIGRL,100,,,<<parameters_gafs(output="num_modes")>>
  SPC1    1       123456  1005
  INCLUDE './base_model.bdf'
  INCLUDE './DLMs/<<parameters_gafs(output="label_dlm")>>.bdf'

  ENDDATA

#+end_src

*** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :results none :tangle P4_rundihedral.sh
  cd NASTRAN
  source run_nastran.sh
  run_nastran BUGdihedral.bdf
  move_outputs BUGdihedral.bdf              
#+end_src

*** Read op4

#+begin_src python  :results none  :noweb yes :tangle P5_getdihedral.py
  import numpy as np
  import feniax.unastran.op4handler as op4handler
  dihedral = op4handler.read_data(f'./NASTRAN/data_out/Dihedral.op4',
                             'WJ')
  SAVE_DIHEDRAL = True
  if SAVE_DIHEDRAL:
      np.save(f"./AERO/Dihedral_{label_dlm}.npy", dihedral.real[:,0])

#+end_src

* GAFs extraction
:PROPERTIES:
:header-args: :session *pybug* :tangle ./P6_outputgafs.py :comments yes :noweb yes
:END:
** INPUT PARAMETERS
#+NAME: parameters_gafs0
#+begin_src python :noweb yes
  import numpy as np
  import feniax.unastran.aero as nasaero
  import feniax.unastran.op4handler as op4handler
  from feniax.utils import standard_atmosphere
  import pickle
  import itertools
  sol = "eao"
  num_modes = 100
  mach = 0.7
  altitude = 10000 # meters
  Mach = str(mach).replace('.','_')
  machs = [mach]
  reduced_freqs = np.hstack([1e-6, np.linspace(1e-5,1e-1, 25),
                             np.linspace(1e-1,5e-1, 25)[1:],
                             np.linspace(5e-1, 1., 10)[1:]])
  reduced_freqs = np.hstack([1e-5, np.linspace(1e-4, 1, 100)
                             ])
  #reduced_freqs = np.geomspace(1e-5, 1, 100, endpoint=True)
  flutter_id = 9010
  mach_fact = machs
  kv_fact = [200., 220.]
  T, rho_inf, P, a = standard_atmosphere(altitude)
  u_inf = mach * a
  #rho_inf = 1.2
  density_fact = [rho_inf]
  chord_ref = 3.
  span_ref = 24. * 2  # always full span
  area_ref = span_ref * chord_ref # make it half full area if half model
  rho_ref=rho_inf
  q_inf = 0.5 * rho_inf * u_inf ** 2
  flutter_method="PK"
  flutter_sett = dict()
  aero_sett = dict()
  label_dlm = "<<parameters_dlm(output="label_dlm")>>"
  label_flow = f"F3"
  label_gaf = f"D{label_dlm}{label_flow}S{sol}-{num_modes}"
  input_dict = dict(reduced_freqs=list(reduced_freqs), mach=mach, u_inf=u_inf, rho_inf=rho_inf)
  with open(f"./NASTRAN/GAFs/input_{label_flow}.json", "w") as fp:
      json.dump(input_dict, fp)  # encode dict into JSON
#+end_src

#+RESULTS: parameters_gafs0

#+NAME: parameters_gafs
#+begin_src python :var output="num_modes" :results value :tangle no :noweb yes
  <<parameters_gafs0>>
  eval(output)
#+end_src

#+RESULTS: parameters_gafs

** Unsteady
#+begin_src python :results none
  dlm_gafs = nasaero.GenFlutter(flutter_id,
                                density_fact,
                                mach_fact,
                                kv_fact,
                                machs,
                                reduced_freqs,
                                u_inf,
                                chord_ref,
                                rho_ref,
                                flutter_method,
                                flutter_sett,
                                aero_sett)

  dlm_gafs.build_model()
  dlm_gafs.model.write_bdf(f"./NASTRAN/GAFs/{label_flow}.bdf")
#+end_src

*** bdf models
:PROPERTIES:
:header-args: :comments no :noweb yes
:END:

#+NAME: BUGgafs_case
#+begin_src org :tangle no 
  NASTRAN QUARTICDLM=1
  SOL 145
  INCLUDE './DMAPs/Qhhj.bdf'
  CEND

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CASE CONTROL									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  TITLE=BUG GAFs1 #                                 
#+end_src

#+NAME: BUGgafs_bulk
#+begin_src org :tangle no :noweb yes 
  METHOD = 100
  FMETHOD = <<parameters_gafs(output="flutter_id")>>
  $
  $ DISP(PLOT) = ALL
  $
  RESVEC = YES
  $ MODESELECT (STRUCTURE, LMODES = <<parameters_gafs(output="num_modes")>>)
  $ MODESELECT (STRUCTURE,LFREQ=0.001,HFREQ=15.0) 
  $ MODESELECT (FLUID,LFREQ=0.001,HFREQ=15.0)
  ECHO=NONE

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ BULK   									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  BEGIN BULK
  PARAM,BAILOUT,0
  PARAM,GRDPNT,0                                                              
  PARAM,K6ROT,1.0
  PARAM,SNORM,20.0
  PARAM,POST,0
  $PARAM,MAXRATIO,1.0E07 $Default anyway
  $PARAM   AUTOSPC YES
  MDLPRM  MLTSPLIN 1 $Aero grids can be defined in multiple splines (dafault 0)
  PARAM   WTMASS  1.0  
  PARAM   OPPHIB  1
  PARAM   OPPHIPA 1

  EIGRL,100,,,<<parameters_gafs(output="num_modes")>>

  INCLUDE './base_model.bdf'
  INCLUDE './DLMs/<<parameters_gafs(output="label_dlm")>>.bdf'
  INCLUDE './GAFs/<<parameters_gafs(output="label_flow")>>.bdf'
#+end_src

**** cao
TODO: add ASETs and check whether it affects the results
#+begin_src org  :tangle "./NASTRAN/BUGgafs_cao.bdf"
  $EXECUTIVE CONTROL DECK
  assign OUTPUT4='./data_out/Qhh<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=11
  assign OUTPUT4='./data_out/Qhj<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=12
  assign INPUTT4='./data_out/Phi<<parameters_gafs(output="num_modes")>>_<<parameters_gafs(output="sol")>>.op4',formatted,UNIT=90
  $assign INPUTT4= 'Phi1.op4',formatted,UNIT=91
  $NASTRAN NLINES=999999
  <<BUGgafs_case>>
  SPC = 1                  
  <<BUGgafs_bulk>>  
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       123456  1005
#+end_src
**** eao
#+begin_src org  :tangle "./NASTRAN/BUGgafs_eao.bdf"
  $EXECUTIVE CONTROL DECK
  assign OUTPUT4='./data_out/Qhh<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=11
  assign OUTPUT4='./data_out/Qhj<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=12
  assign INPUTT4='./data_out/Phi<<parameters_gafs(output="num_modes")>>_<<parameters_gafs(output="sol")>>.op4',formatted,UNIT=90
  $assign INPUTT4= 'Phi1.op4',formatted,UNIT=91
  $NASTRAN NLINES=999999
  <<BUGgafs_case>>
  <<BUGgafs_bulk>>  
#+end_src
*** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :results none :tangle P7_rungafs.sh :dir NASTRAN
  source run_nastran.sh
  run_nastran BUGgafs_<<parameters_gafs(output="sol")>>.bdf
  move_outputs BUGgafs_<<parameters_gafs(output="sol")>>.bdf              
#+end_src
** Steady
*** bdf models
:PROPERTIES:
:header-args: :noweb yes :comments no
:END:

#+NAME: GAFsSteady_setup
#+begin_src org :tangle no
  $
  $---------------------------------------------------------------------------
  $   AERODYNAMIC DOFS
  $---------------------------------------------------------------------------
  $
  AESTAT  1       ANGLEA  
  AESTAT  2       SIDES  
  AESTAT  3       PITCH  
  AESTAT  4       ROLL  
  AESTAT  5       YAW  
  AESTAT  6       URDD1  
  AESTAT  7       URDD2  
  AESTAT  8       URDD3  
  AESTAT  9       URDD4  
  AESTAT  10      URDD5  
  AESTAT  11      URDD6  

  $AEROS                   4.163   44.8    146.6  
  AEROS,,,<<parameters_gafs(output="chord_ref")>>,<<parameters_gafs(output="span_ref")>>,<<parameters_gafs(output="area_ref")>>
  $
  $
  $ TRIM    960     0.81    15762.81  URDD1   0.      URDD2   0.      1.
  $         URDD3   0.      URDD4   0.      URDD5   0.      URDD6   0.
  $         ROLL    0.      YAW     0.      SIDES   0.      PITCH   0.
  $         Flprn_r 0.      WTAil_r 0.      Elev_r  0.      ANGLEA  0.261799
  TRIM,960,<<parameters_gafs(output="mach")>>,<<parameters_gafs(output="q_inf")>>,URDD1,0.,URDD2,0.,1.,
      ,URDD3,0.,URDD4,0.,URDD5,0.,URDD6,0.,
      ,ROLL,0.,YAW,0.,SIDES,0.,PITCH,0.
  $ANGLEA  0.261799

#+end_src

#+NAME: GAFsSteady_case
#+begin_src org :tangle no 
  NASTRAN QUARTICDLM=1
  SOL 144
  INCLUDE './DMAPs/Qhx.bdf'
  CEND

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CASE CONTROL									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  TITLE=BUG model #                                 
  TRIM = 960
  $LOAD = 2000
  $
  DISP = ALL
  FORCE = ALL
  AEROF = ALL
  MONITOR = ALL
  TRIMF = ALL
  OLOAD(CID) = ALL
  ECHO=NONE
#+end_src

#+NAME: GAFsSteady_bulk
#+begin_src org :tangle no 
  BEGIN BULK
  PARAM,BAILOUT,0
  PARAM,GRDPNT,0                                                              
  PARAM,K6ROT,1.0
  PARAM,SNORM,20.0
  PARAM,POST,0
  $PARAM,MAXRATIO,1.0E07 $Default anyway
  $PARAM   AUTOSPC YES
  MDLPRM  MLTSPLIN 1 $Aero grids can be defined in multiple splines (dafault 0)
  PARAM   WTMASS  1.0  

  INCLUDE './base_model.bdf'
  INCLUDE './DLMs/<<parameters_gafs(output="label_dlm")>>.bdf'
#+end_src

**** cao
#+begin_src org  :tangle "./NASTRAN/BUGgafsSteady_cao.bdf"
  assign OUTPUT4='./data_out/Qax<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=11
  assign OUTPUT4='./data_out/Qah<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=12
  assign OUTPUT4='./data_out/Qhx<<parameters_gafs(output="label_gaf")>>.op4',formatted,UNIT=13
  assign INPUTT4='./data_out/Phi<<parameters_gafs(output="num_modes")>>_<<parameters_gafs(output="sol")>>.op4',formatted,UNIT=90  

  <<GAFsSteady_case>>
  SPC = 1
  <<GAFsSteady_bulk>>
  <<GAFsSteady_setup>>

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  $ CLAMPING NODE									  $
  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

  SPC1    1       12346   1005
  SUPORT  1005    5
#+end_src

*** Run Nastran
Running Nastran using the tailored functions in run_nastra.sh which moves output files and checks for fatal errors.

#+begin_src bash :session shell1 :results none :noweb yes :tangle P8_rungafSteady.sh
  cd NASTRAN
  source run_nastran.sh
  run_nastran BUGgafsSteady_<<parameters_gafs(output="sol")>>.bdf
  move_outputs BUGgafsSteady_<<parameters_gafs(output="sol")>>.bdf              
#+end_src

*** Read op4

#+begin_src python  :results none  :noweb yes :tangle P9_getgafSteady.py
  import numpy as np
  import feniax.unastran.op4handler as op4handler
  
  Qax_name = "Qax<<parameters_gafs(output="label_gaf")>>"
  Qah_name = "Qah<<parameters_gafs(output="label_gaf")>>"
  Qhx_name = "Qhx<<parameters_gafs(output="label_gaf")>>"
  Qax = op4handler.read_data(f'./NASTRAN/data_out/{Qax_name}.op4',
                             'Q_AX')
  Qah = op4handler.read_data(f'./NASTRAN/data_out/{Qah_name}.op4',
                             'Q_AH')
  Qhx = op4handler.read_data(f'./NASTRAN/data_out/{Qhx_name}.op4',
                             'Q_HX')
  SAVE_Qx = True
  if SAVE_Qx:
      np.save(f"./AERO/{Qax_name}.npy", Qax)
      np.save(f"./AERO/{Qah_name}.npy", Qah)
      np.save(f"./AERO/{Qhx_name}.npy", Qhx)

#+end_src

* Roger RFA
:PROPERTIES:
:header-args: :session *pybug* :noweb yes
:END:

** INPUT PARAMETERS
#+NAME: parameters_rfa0
#+begin_src python 
  num_poles = 5
  Dhj_file = f"D{label_gaf}p{num_poles}"
  Ahh_file = f"A{label_gaf}p{num_poles}"
  Poles_file = f"Poles{label_gaf}p{num_poles}"
#+end_src

#+RESULTS: parameters_rfa0

#+begin_src python  :results none  :tangle P10_rogerRFA.py
  import numpy as np
  import feniax.unastran.aero as nasaero
  import feniax.unastran.op4handler as op4handler
  import pickle
  import importlib
  import feniax.aeromodal.roger as roger
  importlib.reload(roger)
  #op4m = op4.OP4()
  #Qop4 = op4m.read_op4(file_name)

  Qhh = op4handler.read_data('./NASTRAN/data_out/Qhh<<parameters_gafs(output="label_gaf")>>.op4',
                             'Q_HH')
  Qhj = op4handler.read_data('./NASTRAN/data_out/Qhj<<parameters_gafs(output="label_gaf")>>.op4',
                             'Q_HJ')
#+end_src

** RFA for Qhh and Qhj

- Pole optimisation
  #+begin_src python  :results none :tangle P10_rogerRFA.py  
    <<parameters_rfa0>>    
    optpoles = roger.OptimisePoles(reduced_freqs, Qhh,
                                   num_poles_=num_poles,
                                   poles_step_=0.3,
                                   poles_range_=[0.05,3],
                                   rfa_method_=1
                                   )
    # optpoles.set_errsettings(#error_name="max",
    #                          rfa_method=2,
    #                          norm_order=None)
    optpoles.run(show_info=True)

    qhhr1 = optpoles.get_model(label='m1')
    # optimize with method 2
    optpoles.set_errsettings(error_name="average", rfa_method=2, norm_order=None)
    optpoles.run(show_info=True)
    qhhr2 = optpoles.get_model(label='m2')
    # optimize for max function
    optpoles.set_errsettings(error_name="max", rfa_method=2, norm_order=None)
    optpoles.run(show_info=True)
    optpoles.save("./AERO", Ahh_file,
                  Poles_file)
    qhhr3 = optpoles.get_model(label='m3')
    Qroger1 = qhhr1.eval_array(reduced_freqs)
    Qroger2 = qhhr2.eval_array(reduced_freqs)
    Qroger3 = qhhr3.eval_array(reduced_freqs)    
  #+end_src

  #+begin_src python  :results none   :tangle P10_rogerRFA.py  
    poles = qhhr3.poles #jnp.load("./AERO/PolesDd1c7F1Scao-50.npy")
    rogerhj = roger.ComputeRoger(Qhj, reduced_freqs, poles, 2)
    np.save(f"./AERO/{Dhj_file}.npy", rogerhj.roger_matrices)
    rogerhjeval = roger.EvaluateRoger.create(rogerhj)
    Qrogerhj = rogerhjeval.eval_array(reduced_freqs)
  #+end_src

- Double number of poles
  #+begin_src python  :results none 
    num_poles *= 2 
    Dhj_file = f"D{label_gaf}p{num_poles}"
    Ahh_file = f"A{label_gaf}p{num_poles}"
    Poles_file = f"Poles{label_gaf}p{num_poles}"    
    optpoles = roger.OptimisePoles(reduced_freqs, Qhh,
                                   num_poles_=num_poles,
                                   poles_step_=0.1,
                                   poles_range_=[0.05,1],
                                   rfa_method_=1
                                   )
    optpoles.set_errsettings(error_name="max",
                             rfa_method=2, norm_order=None)
    optpoles.run(show_info=True)
    optpoles.save("./AERO", Ahh_file,
                  Poles_file)
    qhhr4 = optpoles.get_model(label='m4')
    Qroger4 = qhhr4.eval_array(reduced_freqs)    
  #+end_src

  #+begin_src python  :results none 
    poles = qhhr4.poles #jnp.load("./AERO/PolesDd1c7F1Scao-50.npy")
    rogerhj = roger.ComputeRoger(Qhj, reduced_freqs, poles, 2)
    np.save(f"./AERO/{Dhj_file}.npy", rogerhj.roger_matrices)
    rogerhjeval = roger.EvaluateRoger.create(rogerhj)
    Qrogerhj = rogerhjeval.eval_array(reduced_freqs)
  #+end_src
  
- n times more poles, no optimisation
  #+begin_src python  :results none 
    n = 1.4
    num_poles = 7 # *= n
    num_poles = int(num_poles) 
    Dhj_file = f"D{label_gaf}p{num_poles}"
    Ahh_file = f"A{label_gaf}p{num_poles}"
    Poles_file = f"Poles{label_gaf}p{num_poles}"        
    poles = np.linspace(0.05,2,num_poles)
    np.save(f"./AERO/{Poles_file}.npy", poles)
    rogerhh = roger.ComputeRoger(Qhh, reduced_freqs, poles, 2)
    np.save(f"./AERO/{Ahh_file}.npy", rogerhh.roger_matrices)
    rogerhj = roger.ComputeRoger(Qhj, reduced_freqs, poles, 2)
    np.save(f"./AERO/{Dhj_file}.npy", rogerhj.roger_matrices)

    rogerhheval = roger.EvaluateRoger.create(rogerhh)
    Qrogerhh = rogerhheval.eval_array(reduced_freqs)  
    rogerhjeval = roger.EvaluateRoger.create(rogerhj)
    Qrogerhj = rogerhjeval.eval_array(reduced_freqs)
  #+end_src

  #+begin_src python  :results none 
  
    roger.plot_gafs(0, 0, Qhh, [Qrogerhh])
    
    #roger.plot_gafs(20, 2, Qhh, [Qroger, Qroger2, Qroger3])
  #+end_src

** Plot Qhh study
#+begin_src python  :results none  

  roger.plot_gafs(0, 1, Qhh, [Qroger1, Qroger2, Qroger3, Qroger4])
  
  #roger.plot_gafs(20, 2, Qhh, [Qroger, Qroger2, Qroger3])
#+end_src

#+begin_src python  :results none  
  iterate_vect = list(range(10))
  plot_prod = list(itertools.product(iterate_vect,iterate_vect))
  for li in plot_prod:
      if np.linalg.norm(Qhh[:, li[0], li[1]]) > 1e-3:
          roger.plot_gafs(li[0], li[1], Qhh, [Qroger1])
#+end_src

#+begin_src python  :results none 
  iterate_vect = list(range(10))
  plot_prod = list(itertools.product(iterate_vect,iterate_vect))
  for li in plot_prod:
      if np.linalg.norm(Qhh[:, li[0], li[1]]) > 5e-2:
          roger.plot_gafs(li[0], li[1], Qhh, [Qroger1, Qroger2, Qroger3, Qroger4])
#+end_src

** Plot Qhj
#+begin_src python  :results none  

  roger.plot_gafs(0, 1, Qhj, [Qrogerhj])
  
  #roger.plot_gafs(20, 2, Qhh, [Qroger, Qroger2, Qroger3])
#+end_src

#+begin_src python  :results none 
  iterate_vect = list(range(10))
  plot_prod = list(range(20))
  panel = 20
  for li in plot_prod:
      if np.linalg.norm(Qhj[:, li, panel]) > 1e-3:
          roger.plot_gafs(li, panel, Qhj, [Qrogerhj])
#+end_src

* FENIAX
:PROPERTIES:
:header-args: :session *pybug* :comments yes :noweb yes :results none
:END:

#+NAME: ImportsFeniax
#+begin_src python
  import pathlib
  import time
  import jax.numpy as jnp
  import numpy as np
  import feniax.preprocessor.configuration as configuration  # import Config, dump_to_yaml
  from feniax.preprocessor.inputs import Inputs
  import feniax.feniax_main
  import feniax.plotools.reconstruction as reconstruction
#+end_src

#+NAME: ImportsFeniaxShard
#+begin_src python
  import pathlib
  import time
  #import jax.numpy as jnp
  import numpy as np
  from feniax.preprocessor.inputs import Inputs
  import feniax.feniax_shardmain
#+end_src

#+NAME: MainBugParameters
#+begin_src python
  label_dlm = "<<parameters_dlm(output="label_dlm")>>"
  sol = "<<parameters_gafs(output="sol")>>"
  label_gaf = "<<parameters_gafs(output="label_gaf")>>"
  num_modes = <<parameters_gafs(output="num_modes")>>
  c_ref = <<parameters_gafs(output="chord_ref")>>
  u_inf = <<parameters_gafs(output="u_inf")>>
  rho_inf = <<parameters_gafs(output="rho_inf")>>
#+end_src

#+NAME: MainBug
#+begin_src python
  inp = Inputs()
  inp.engine = "intrinsicmodal"
  inp.fem.eig_type = "inputs"

  inp.fem.connectivity = dict(# FusWing=['RWing',
                              #          'LWing'],
                              FusBack=['FusTail',
                                       'VTP'],
                              FusFront=None,
                              RWing=None,
                              LWing=None,
                              FusTail=None,
                              VTP=['HTP', 'VTPTail'],
                              HTP=['RHTP', 'LHTP'],
                              VTPTail=None,
                              RHTP=None,
                              LHTP=None,
                              )
  inp.fem.grid = f"./FEM/structuralGrid_{sol[:-1]}"
  #inp.fem.folder = pathlib.Path('./FEM/')
  inp.fem.Ka_name = f"./FEM/Ka_{sol[:-1]}.npy"
  inp.fem.Ma_name = f"./FEM/Ma_{sol[:-1]}.npy"
  inp.fem.eig_names = [f"./FEM/eigenvals_{sol}{num_modes}.npy",
                       f"./FEM/eigenvecs_{sol}{num_modes}.npy"]
  inp.driver.typeof = "intrinsic"
  inp.fem.num_modes = num_modes

#+end_src
** Discrete loads
Forces and moments at node 35 and 61

#+NAME: DiscreteLoads
#+begin_src python :tangle settings_DiscreteLoads.py 
  <<ImportsFeniax>>
  sol = "cao"
  num_modes = 300
  <<MainBug>>
  inp.driver.sol_path = pathlib.Path(
      "./results/DiscreteLoads1")

  inp.simulation.typeof = "single"
  inp.system.name = "s1"
  inp.system.solution = "static"
  inp.system.solver_library = "diffrax"
  inp.system.solver_function = "newton"
  inp.system.solver_settings = dict(rtol=1e-6,
                                    atol=1e-6,
                                    max_steps=100,
                                    norm="linalg_norm",
                                    kappa=0.01)
  inp.system.xloads.follower_forces = True
  inp.system.xloads.x = [0, 1, 2, 3, 4, 5]
  inp.system.t = [0.5, 1, 1.5, 2, 2.5, 3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5.]
  lz1 = 5e4  * 0.5
  lz2 = 9e4  * 0.5
  lz3 = 2e5  * 0.5
  lz4 = 4e5  * 0.5
  lz5 = 5e5  * 0.5 
  lx1 = lz1 * 5 
  lx2 = lz2 * 5
  lx3 = lz3 * 5
  lx4 = lz4 * 5
  lx5 = lz5 * 5
  ly1 = lz1 * 7
  ly2 = lz2 * 7
  ly3 = lz3 * 7
  ly4 = lz4 * 7
  ly5 = lz5 * 7

  # rwing: 14-35
  # lwing: 40-61
  inp.system.xloads.follower_points = [[35, 2], [61, 2], [35, 4], [61, 4]]
  inp.system.xloads.follower_interpolation = [[0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lx1, lx2, lx3, lx4, lx5], 
                                               [0., lx1, lx2, lx3, lx4, lx5]]
  t1 = time.time()
  sol = feniax.feniax_main.main(input_dict=inp)
  t2 = time.time()
  print(f"Time DiscreteLoads: {t2 - t1}")
#+end_src

** Manoeuvre

!!Warning: label_gaf may have a solution with a free model (eao for instance) instead of a clamped, in which case it is not correct.

#+NAME: ManoeuvreMain
#+begin_src python
  <<MainBugParameters>>
  <<parameters_rfa0>>
  <<MainBug>>
  inp.simulation.typeof = "single"
  inp.system.name = "s1"
  inp.system.solution = "static"
  inp.system.solver_library = "diffrax"
  inp.system.solver_function = "newton"
  inp.system.solver_settings = dict(rtol=1e-6,
                                             atol=1e-6,
                                             max_steps=100,
                                             norm="linalg_norm",
                                             kappa=0.01)
  inp.system.xloads.modalaero_forces = True
  inp.system.xloads.x = [0.,1.]
  inp.system.t = [1/6, 1/3, 1/2, 2/3, 5/6, 1]#[0.25, 0.5, 0.75, 1]
  inp.system.aero.c_ref = c_ref
  inp.system.aero.u_inf = u_inf # a0(7000) =312
  inp.system.aero.rho_inf = rho_inf
  inp.system.aero.poles = f"./AERO/{Poles_file}.npy"
  inp.system.aero.A = f"./AERO/{Ahh_file}.npy"
  inp.system.aero.Q0_rigid = f"./AERO/Qhx{label_gaf}.npy"
  inp.system.aero.qalpha = [[0.,  0., 0, 0, 0, 0],
                            [0.,  6 * np.pi / 180, 0, 0, 0, 0]] # interpolation: x=0 => qalpha=0
                                                                # x=1 => qalpha = 4   
#+end_src

*** Run
#+begin_src python :tangle ./settings_manoeuvre1.py
  <<ImportsFeniax>>
  <<ManoeuvreMain>>
  inp.driver.sol_path = pathlib.Path(
      "./results/manoeuvre2")  
  config =  configuration.Config(inp)
  t1 = time.time()
  solstatic1 = feniax.feniax_main.main(input_obj=config)
  t2 = time.time()
  print(f"Time Manoeuvre: {t2 - t1}")
  
#+end_src

*** Plot
#+NAME: 3Dstatic
#+begin_src python :tangle ./settings_manoeuvre1.py
  rintrinsic, uintrinsic = reconstruction.rbf_based(
          nastran_bdf="./NASTRAN/BUG103.bdf",
          X=config.fem.X,
          time=range(len(inp.system.t)),
          ra=solstatic1.staticsystem_sys1.ra,
          Rab=solstatic1.staticsystem_sys1.Cab,
          R0ab=solstatic1.modes.C0ab,
          vtkpath=inp.driver.sol_path / "paraview/solstatic1/bug",
          plot_timeinterval=1,
          plot_ref=False,
          tolerance=1e-3,
          size_cards=8,
          rbe3s_full=False,
          ra_movie=None)
#+end_src

** Gust
#+NAME: GustMain
#+begin_src python
  <<MainBugParameters>>
  <<parameters_rfa0>>
  <<MainBug>>
  inp.simulation.typeof = "single"
  inp.system.name = "s1"
  if sol[0] == "e": # free model, otherwise clamped
      inp.system.bc1 = 'free'
      inp.system.q0treatment = 1
  inp.system.solution = "dynamic"
  inp.system.t1 = 1.
  inp.system.tn = 2001
  inp.system.solver_library = "runge_kutta"
  inp.system.solver_function = "ode"
  inp.system.solver_settings = dict(solver_name="rk4")
  inp.system.xloads.modalaero_forces = True
  inp.system.aero.c_ref = c_ref
  inp.system.aero.u_inf = u_inf
  inp.system.aero.rho_inf = rho_inf
  inp.system.aero.poles = f"./AERO/{Poles_file}.npy"
  inp.system.aero.A = f"./AERO/{Ahh_file}.npy"
  inp.system.aero.D = f"./AERO/{Dhj_file}.npy"
  inp.system.aero.gust_profile = "mc"
  inp.system.aero.gust.intensity = 20
  inp.system.aero.gust.length = 150.
  inp.system.aero.gust.step = 0.1
  inp.system.aero.gust.shift = 0.
  inp.system.aero.gust.panels_dihedral = f"./AERO/Dihedral_{label_dlm}.npy"
  inp.system.aero.gust.collocation_points = f"./AERO/Collocation_{label_dlm}.npy"
#+end_src

*** Run
#+begin_src python :tangle settings_gust1.py
  <<ImportsFeniax>>
  <<GustMain>>
  inp.driver.sol_path = pathlib.Path(
      f"./results/gust2_{sol}")

  config =  configuration.Config(inp)
  t1 = time.time()  
  sol1 = feniax.feniax_main.main(input_obj=config)
  t2 = time.time()
  print(f"Time gust: {t2 - t1}")

#+end_src

*** Plot
#+NAME: Tipdisplacement
#+begin_src python :results value file  :var name=(org-element-property :name (org-element-context))
  import feniax.plotools.uplotly as uplotly
  import feniax.plotools.utils as putils
  x, y = putils.pickIntrinsic2D(sol1.dynamicsystem_sys1.t,
                                sol1.dynamicsystem_sys1.ra,
                                fixaxis2=dict(node=35, dim=2))
  fig = None
  fig = uplotly.lines2d(x, (y), fig,
                          dict(#name=f"NMROM-",
                               #line=dict(color=colors[i],
                               #         dash=dash[i % 3])
                               
                               ),
                          dict(xaxis_range=[0,2],yaxis_range=[0,5]))
  figname = f"./figs/try1.png"
  fig.write_image(figname, scale=1)
  fig.show()
  figname
#+end_src

#+RESULTS: Tipdisplacement
[[file:./figs/try1.png]]

#+NAME: 3Ddynamic
#+begin_src python :tangle ./paraview_3Ddynamic.py
  import time
  time1 = time.time()
  rintrinsic, uintrinsic = reconstruction.rbf_based(
          nastran_bdf="./NASTRAN/BUG103.bdf",
          X=config.fem.X,
          time=config.system.t, #range(len(inp.system.t)),
          ra=sol1.dynamicsystem_sys1.ra,
          Rab=sol1.dynamicsystem_sys1.Cab,
          R0ab=sol1.modes.C0ab,
          vtkpath=inp.driver.sol_path /"paraview/bug",
          plot_timeinterval=4,
          plot_ref=False,
          tolerance=1e-3,
          size_cards=8,
          rbe3s_full=False,
          ra_movie=None)
  time2 = time.time()
  print(time1-time2)
#+end_src

#+begin_src python :tangle ./paraview_gust.py
  from paraview.simple import *
  import pathlib

  def merge_paraview(file_list, file_out):
      # Create a reader for each file
      readers = [XMLUnstructuredGridReader(FileName=file) for file in file_list]

      # Append the readers to merge the datasets
      appended = AppendDatasets(Input=readers)

      # Save the merged dataset
      writer = XMLUnstructuredGridWriter(Input=appended, FileName=file_out)
      writer.UpdatePipeline()


  paraview_files = ['CQUAD4.vtu',
                    'CONM2.vtu',
                    #'CBUSH.vtu',
                    'RBE2.vtu',
                    'CTRIA3.vtu',
                    'RBE3.vtu',
                    'CBAR.vtu']

  folder = pathlib.Path("./results/gust2_eao/paraview") # pathlib.Path('./paraview/soldyn1')
  folder_out = folder / "merged"
  folder_out.mkdir(exist_ok=True, parents=True)
  for i, fi in enumerate(folder.glob("bug_*")):
      if fi.is_dir() and (fi / paraview_files[0]).is_file():
          #print(fi)
          name_len = len("bug_")
          index = fi.name[name_len:].split('.')[0]
          file_list = [str(fi / pvf) for pvf in paraview_files]
          #print(file_list)
          file_out = str(folder_out / f"bug_{index}.vtu")
          # readers = [XMLUnstructuredGridReader(FileName=file) for file in file_list]

          # # Append the readers to merge the datasets
          # appended = AppendDatasets(Input=readers)
          # print(file_out)
          # # Save the merged dataset
          # writer = XMLUnstructuredGridWriter(Input=appended, FileName=file_out)
          # writer.UpdatePipeline()        
          merge_paraview(file_list, file_out)

#+end_src

merge all vtu files 
#+begin_src bash :results none :session shell4
  ~/Downloads/ParaView-5.10.1-MPI-Linux-Python3.9-x86_64/bin/pvpython paraview_gust.py
#+end_src

make gust video
#+begin_src bash :session shell4
  cd ./results/gust2_eao/paraview/merged/anim
  #ffmpeg -y -framerate 20 -pattern_type glob -i '*.png'  -c:v mjpeg -qscale:v 1 BugGust.mp4
  #ffmpeg -ss 00:00:03 -to 00:00:13 -i BugGust.mp4 -c copy BugGustshort.mp4
  ffmpeg -y -i BugGustshort.mp4 -filter_complex "fps=15,scale=680:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=32[p];[s1][p]paletteuse=dither=bayer" BugGust1.gif
  #ffmpeg -y -framerate 20 -pattern_type glob -i '*.png' -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" BugGust2.gif 
  cd -
#+end_src

make gif
#+begin_src bash :session shell4
  cd ./results1gust/paraview/merged
  ffmpeg -i BugGust.mp4  -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" BugGust.gif
  #ffmpeg -y -i input.mp4 -filter_complex "fps=5,scale=480:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=32[p];[s1][p]paletteuse=dither=bayer" output.gif
  cd -
#+end_src


#+begin_src bash :session shell4
  cd ./results1gust/paraview/merged
  # ffmpeg -y -framerate 20 -pattern_type glob -i '*.png'  -c:v mpeg4 -qscale:v 1 BugGust.mp4
  ffmpeg -y -framerate 20 -pattern_type glob -i '*.png'  -c:v mjpeg -qscale:v 1 BugGust.mp4
  cd -
#+end_src


#+RESULTS:
: bash: cd: ./results1gust/paraview/merged: No such file or directory

#+begin_src bash :session shell4
  cd ./paraview/soldyn1/merged
  # ffmpeg -y -framerate 20 -pattern_type glob -i '*.png' BugGustWrecked.gif
  #ffmpeg -y -framerate 20 -pattern_type glob -i '*.png' -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" BugGustWrecked2.gif
  ffmpeg -i BugGust_wrecked.mp4  -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" BugGustWrecked2.gif
  cd -
#+end_src

** Sharding

*** Discrete loads
Forces and moments at node 35 and 61

#+NAME: DiscreteLoads
#+begin_src python :tangle settings_ShardDiscreteLoads.py :session *pyshard3*
  <<ImportsFeniaxShard>>
  sol = "cao"
  num_modes = 300
  device_count = 1
  <<MainBug>>
  inp.driver.sol_path = pathlib.Path(
      "./results/ShardDiscreteLoads1")

  inp.simulation.typeof = "single"
  inp.system.name = "s1"
  inp.system.solution = "static"
  inp.system.solver_library = "diffrax"
  inp.system.solver_function = "newton"
  inp.system.solver_settings = dict(rtol=1e-6,
                                    atol=1e-6,
                                    max_steps=100,
                                    norm="linalg_norm",
                                    kappa=0.01)
  inp.system.xloads.follower_forces = True
  inp.system.xloads.x = [0, 1, 2, 3, 4, 5]
  inp.system.t = [0.5, 1, 1.5, 2, 2.5, 3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5.]
  lz1 = 5e4  * 0.5
  lz2 = 9e4  * 0.5
  lz3 = 2e5  * 0.5
  lz4 = 4e5  * 0.5
  lz5 = 5e5  * 0.5 
  lx1 = lz1 * 5 
  lx2 = lz2 * 5
  lx3 = lz3 * 5
  lx4 = lz4 * 5
  lx5 = lz5 * 5
  ly1 = lz1 * 7
  ly2 = lz2 * 7
  ly3 = lz3 * 7
  ly4 = lz4 * 7
  ly5 = lz5 * 7

  # rwing: 14-35
  # lwing: 40-61
                        # [[[node_i, component_j]..(total_forces per run)],...(parallel forces)[[node_i, component_j]..]]      
  inputforces = dict(follower_points=[[[35, 0], [61, 0], [35, 1], [61, 1]],
                                      [[35, 1], [61, 1], [35, 0], [61, 0]],
                                      [[35, 2], [61, 2], [35, 0], [61, 0]],
                                      [[35, 3], [61, 3], [35, 0], [61, 0]],
                                      [[35, 4], [61, 4], [35, 0], [61, 0]],
                                      [[35, 5], [61, 5], [35, 0], [61, 0]],
                                      [[35, 0], [61, 0], [35, 4], [61, 4]],
                                      [[35, 2], [61, 2], [35, 4], [61, 4]],
                                      ],
                     # [[[0,...interpolation points]..(total_forces per run)],...(parallel forces)[[0,...]..]]
                     follower_interpolation= [[[0., lx1, lx2, lx3, lx4, lx5], 
                                               [0., lx1, lx2, lx3, lx4, lx5],
                                               [0., 0., 0., 0., 0., 0.],
                                               [0., 0., 0., 0., 0., 0.]], 
                                              [[0., ly1, ly2, ly3, ly4, ly5], 
                                               [0., ly1, ly2, ly3, ly4, ly5],
                                               [0., 0., 0., 0., 0., 0.],
                                               [0., 0., 0., 0., 0., 0.]], 
                                              [[0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lz1, lz2, lz3, lz4, lz5],
                                               [0., 0., 0., 0., 0., 0.],
                                               [0., 0., 0., 0., 0., 0.]], 
                                              [[0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lz1, lz2, lz3, lz4, lz5],
                                               [0., 0., 0., 0., 0., 0.],
                                               [0., 0., 0., 0., 0., 0.]], 
                                              [[0., lx1, lx2, lx3, lx4, lx5], 
                                               [0., lx1, lx2, lx3, lx4, lx5],
                                               [0., 0., 0., 0., 0., 0.],
                                               [0., 0., 0., 0., 0., 0.]], 
                                              [[0., lx1, lx2, lx3, lx4, lx5], 
                                               [0., lx1, lx2, lx3, lx4, lx5],
                                               [0., 0., 0., 0., 0., 0.],
                                               [0., 0., 0., 0., 0., 0.]], 
                                              [[0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lx1, lx2, lx3, lx4, lx5], 
                                               [0., lx1, lx2, lx3, lx4, lx5]
                                               ], 
                                              [[0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lz1, lz2, lz3, lz4, lz5], 
                                               [0., lx1, lx2, lx3, lx4, lx5], 
                                               [0., lx1, lx2, lx3, lx4, lx5]]
                                              ]
                   )  
  inp.system.shard = dict(input_type="pointforces",
                          inputs=inputforces)
  t1 = time.time()
  sol = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
  t2 = time.time()
  print(f"Time DiscreteLoads: {t2 - t1}")
#+end_src

**** Plot results

#+begin_src python :session *pyshard3*
  import pyvista as pv
  import feniax.intrinsic.xloads as xloads
  import importlib
  importlib.reload(xloads)
  import pathlib
  import feniax.preprocessor.configuration as configuration
  def glyph_forcefolllower(t, x, force, ra, Rab, scale=1, save_path=None, folder="", name="force", X=None, R0ab=None, plot=False):
      ra = np.array(ra)
      Rab = np.array(Rab)
      if save_path is not None:
          save_path = pathlib.Path(save_path)
      for i, ti in enumerate(t):
          _ffollower = np.array(xloads.force_pointfollower(t=ti, x=np.array(inp.system.xloads.x), force_follower=force, Rab=Rab[i]))
          ffollower = _ffollower[:3].T / scale
          mesh = pv.PolyData(ra[i].T)
          mesh["vectors"] = ffollower 
          # Create glyphs to represent vectors
          glyphs = mesh.glyph() #orient="vectors", scale=False, factor=1e-3)
          if save_path is not None:
              path = save_path / f"{folder}_{i}.vtk"
              path.mkdir(parents=True, exist_ok=True)
              glyphs.save(path / f"{name}.vtk", binary=False)
      if X is not None and R0ab is not None:
          _ffollower = np.array(xloads.force_pointfollower(t=0, x=np.array(inp.system.xloads.x),
                                                           force_follower=force, Rab=np.array(R0ab)))
          ffollower = _ffollower[:3].T / scale
          mesh = pv.PolyData(np.array(X))
          mesh["vectors"] = ffollower 
          # Create glyphs to represent vectors
          glyphs = mesh.glyph() #orient="vectors", scale=False, factor=1e-3)
          if save_path is not None:
              path = save_path / f"{folder}_ref.vtk/"
              path.mkdir(parents=True, exist_ok=True)
              glyphs.save(path / f"{name}.vtk", binary=False)
      if plot:
          # Plot the vector field
          plotter = pv.Plotter()
          plotter.add_mesh(glyphs, color='red')
          plotter.add_mesh(mesh)
          plotter.show()

  config =  configuration.Config(inp)
  X=config.fem.X
  for li in range(8):
      f = sol.shards_sys1.points[li]
      R0ab=sol.modes.C0ab
      glyph_forcefolllower(t=inp.system.t,
                           x = inp.system.xloads.x,
                           force=f,
                           ra=sol.staticsystem_sys1.ra[li],
                           Rab=sol.staticsystem_sys1.Cab[li],
                           scale=1e4*4,
                           save_path=inp.driver.sol_path / f"paraviewM{num_modes}/L{li}/",
                           folder="bug",
                           X=X,
                           R0ab=R0ab)      
#+end_src

#+begin_src python :session *pyshard3*
  import feniax.plotools.reconstruction as reconstruction
  import feniax.preprocessor.configuration as configuration
  config =  configuration.Config(inp)
  for i in range(8):
      rintrinsic, uintrinsic = reconstruction.rbf_based(
          nastran_bdf="./NASTRAN/BUG103.bdf",
          X=config.fem.X,
          time=range(len(inp.system.t)),
          ra=sol.staticsystem_sys1.ra[i],
          Rab=sol.staticsystem_sys1.Cab[i],
          R0ab=sol.modes.C0ab,
          vtkpath=inp.driver.sol_path / f"paraviewM{num_modes}/L{i}/bug",
          plot_timeinterval=1,
          plot_ref=False,
          tolerance=1e-3,
          size_cards=8,
          rbe3s_full=False,
          ra_movie=None)
#+end_src

#+begin_src python :tangle ./results/ShardDiscreteLoads1/paraviewM300/merge.py :session *pyshard3*
  from paraview.simple import *
  import pathlib

  def merge_paraview(file_list, file_out):
      # Create a reader for each file
      #readers = [XMLUnstructuredGridReader(FileName=file) for file in file_list]
      readers = [OpenDataFile(file) for file in file_list]
      # Append the readers to merge the datasets
      appended = AppendDatasets(Input=readers)

      # Save the merged dataset
      #writer = XMLUnstructuredGridWriter(Input=appended, FileName=file_out)
      #writer.UpdatePipeline()
      SaveData(file_out, proxy=appended)

  paraview_files = ['CQUAD4.vtu',
                    'CONM2.vtu',
                    #'CBUSH.vtu',
                    'RBE2.vtu',
                    'CTRIA3.vtu',
                    'RBE3.vtu',
                    'CBAR.vtu',
                    'force.vtk'
                    ]

  for i in range(8):
      folder = pathlib.Path(f"./L{i}")
      folder_out = folder / "merged"
      folder_out.mkdir(exist_ok=True, parents=True)
      for i, fi in enumerate(folder.glob("bug_*")):
          if fi.is_dir() and (fi / paraview_files[0]).is_file():
              print(fi)
              name_len = len("bug_")
              index = fi.name[name_len:].split('.')[0]
              file_list = [str(fi / pvf) for pvf in paraview_files]
              #print(file_list)
              file_out = str(folder_out / f"bug_{index}.vtu")
              # readers = [XMLUnstructuredGridReader(FileName=file) for file in file_list]

              # # Append the readers to merge the datasets
              # appended = AppendDatasets(Input=readers)
              # print(file_out)
              # # Save the merged dataset
              # writer = XMLUnstructuredGridWriter(Input=appended, FileName=file_out)
              # writer.UpdatePipeline()        
              merge_paraview(file_list, file_out)

#+end_src

merge all vtu files 
#+begin_src bash :results none :session *shell-shard3* :dir ./results/ShardDiscreteLoads1/paraviewM300

  # cd results/ShardDiscreteLoads1/paraview/
  ~/Downloads/ParaView-5.10.1-MPI-Linux-Python3.9-x86_64/bin/pvpython merge.py
#+end_src
one needs to go to paraview now and save images

make gust video
#+begin_src bash :session *shell-shard3* :dir ./results/ShardDiscreteLoads1/paraviewM300
  loads="0 2 4"
  for li in $loads
  do
    cd "L$li/merged"
    # ffmpeg -y -framerate 20 -pattern_type glob -i '*.png'  -c:v mpeg4 -qscale:v 1 BugGust.mp4
    ffmpeg -y -framerate 2 -pattern_type glob -i '*.png'  -c:v mjpeg -qscale:v 1 "BugDiscrete_L$li.mp4"
    #ffmpeg -i "BugDiscrete_L$li.mp4"  -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" "BugDiscrete_L$li.gif"
    #ffmpeg -y -framerate 2 -pattern_type glob -i '*.png' -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" "BugDiscrete2_L$li.gif"
    ffmpeg -y -i "BugDiscrete_L$li.mp4" -filter_complex "fps=2,scale=680:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=32[p];[s1][p]paletteuse=dither=bayer" "BugDiscrete3_L$li.gif"
    
    cd -
  done

#+end_src

*** Discrete loads Montecarlo
**** High loading
#+begin_src python :tangle settings_DiscreteLoadsMC.py :session *pyshard4*
  <<ImportsFeniaxShard>>
  sol = "cao"
  paths = 8*200
  num_modes = 100
  device_count = 1
  <<MainBug>>
  inp.driver.sol_path = pathlib.Path(
      f"./results/DiscreteMC1high{num_modes}")

  inp.simulation.typeof = "single"
  inp.system.name = "s1"
  inp.system.solution = "static"
  inp.system.solver_library = "diffrax"
  inp.system.solver_function = "newton"
  inp.system.solver_settings = dict(rtol=1e-6,
                                    atol=1e-6,
                                    max_steps=50,
                                    norm="linalg_norm",
                                    kappa=0.01)
  inp.system.xloads.follower_forces = True
  inp.system.xloads.x = [0, 1, 2, 3, 4, 5]
  inp.system.t = [1, 2, 3, 4, 5]
  # rwing: 14-35
  # lwing: 40-61
  points = []
  interpolation = []
  _interpolation = [0., 3.e3, 7e3, 9e3, 1e4, 1.5e4] # 1.5e4, 2e4..4e4] #[0., 0., 0., 0.]
  _interpolation_torsion = [i*2 for i in _interpolation] #[0., 4e3, 1e4, 2e4, 4e4, 5e4] 
  for ri,li in zip(range(14, 36),range(40,62)):
      points.append([ri, 2])
      points.append([ri, 4])
      points.append([li, 2])
      points.append([li, 4])
  for i, _ in enumerate(range(len(points))):

      if i % 2 == 0:
          interpolation.append(_interpolation)
      else:
          interpolation.append(_interpolation_torsion)

  interpolation = np.array(interpolation)  # num_pointforces x num_interpolation  
  sigma0 = 0.15  # percentage of mu for sigma
  mu = _interpolation[-1]
  sigma = (sigma0) * _interpolation[-1]
  rand = np.random.normal(mu, sigma, paths)
  mu_torsion = _interpolation_torsion[-1]
  sigma_torsion = (sigma0) * _interpolation_torsion[-1]
  rand_torsion = np.random.normal(mu_torsion, sigma_torsion, paths)
  follower_interpolation = []
  for i, ri in enumerate(rand):
      interpolationrand = np.copy(interpolation)
      interpolationrand[::2, -1] = ri
      interpolationrand[1::2, -1] = rand_torsion[i]
      follower_interpolation.append(interpolationrand)
  #follower_interpolation = [interpolation * ri for ri in rand]
  follower_points = [points]*paths
  inputforces = dict(follower_points=follower_points,
                     follower_interpolation=follower_interpolation
                     )
  inp.system.shard = dict(input_type="pointforces",
                          inputs=inputforces)

  t1 = time.time()
  sol1 = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
  t2 = time.time()
  print(f"Time DiscreteLoads MC: {t2 - t1}")

  # np.mean(sol.staticsystem_sys1.ra[:,-1,2,35])
  # np.std(sol.staticsystem_sys1.ra[:,-1,2,35])
#+end_src

***** Plot results

#+begin_src python :session *pyshard4*
  import feniax.plotools.reconstruction as reconstruction
  import feniax.preprocessor.configuration as configuration
  config =  configuration.Config(inp)
  for li in [0, paths-1]:  
      rintrinsic, uintrinsic = reconstruction.rbf_based(
          nastran_bdf="./NASTRAN/BUG103.bdf",
          X=config.fem.X,
          time=range(len(inp.system.t)),
          ra=sol1.staticsystem_sys1.ra[li],
          Rab=sol1.staticsystem_sys1.Cab[li],
          R0ab=sol1.modes.C0ab,
          vtkpath=inp.driver.sol_path / f"paraviewM{num_modes}/L{li}/bug",
          plot_timeinterval=1,
          plot_ref=True,
          tolerance=1e-3,
          size_cards=8,
          rbe3s_full=False,
          ra_movie=None
      )
#+end_src


#+NAME: discrete loads
#+begin_src python :session *pyshard4*
  import pyvista as pv
  import feniax.intrinsic.xloads as xloads
  import importlib
  importlib.reload(xloads)
  import pathlib
  import feniax.preprocessor.configuration as configuration
  def glyph_forcefolllower(t, x, force, ra, Rab, scale=1, save_path=None, folder="", name="force", X=None, R0ab=None, plot=False):
      ra = np.array(ra)
      Rab = np.array(Rab)
      if save_path is not None:
          save_path = pathlib.Path(save_path)
      for i, ti in enumerate(t):
          _ffollower = np.array(xloads.force_pointfollower(t=ti, x=np.array(inp.system.xloads.x), force_follower=force, Rab=Rab[i]))
          ffollower = _ffollower[:3].T / scale
          mesh = pv.PolyData(ra[i].T)
          mesh["vectors"] = ffollower 
          # Create glyphs to represent vectors
          glyphs = mesh.glyph() #orient="vectors", scale=False, factor=1e-3)
          if save_path is not None:
              path = save_path / f"{folder}_{i}.vtk"
              path.mkdir(parents=True, exist_ok=True)
              glyphs.save(path / f"{name}.vtk", binary=False)
      if X is not None and R0ab is not None:
          _ffollower = np.array(xloads.force_pointfollower(t=0, x=np.array(inp.system.xloads.x),
                                                           force_follower=force, Rab=np.array(R0ab)))
          ffollower = _ffollower[:3].T / scale
          mesh = pv.PolyData(np.array(X))
          mesh["vectors"] = ffollower 
          # Create glyphs to represent vectors
          glyphs = mesh.glyph() #orient="vectors", scale=False, factor=1e-3)
          if save_path is not None:
              path = save_path / f"{folder}_ref.vtk/"
              path.mkdir(parents=True, exist_ok=True)
              glyphs.save(path / f"{name}.vtk", binary=False)
      if plot:
          # Plot the vector field
          plotter = pv.Plotter()
          plotter.add_mesh(glyphs, color='red')
          plotter.add_mesh(mesh)
          plotter.show()

  config =  configuration.Config(inp)
  X=config.fem.X
  for li in [0, paths-1]:
      f = sol1.shards_sys1.points[li]
      R0ab=sol1.modes.C0ab
      glyph_forcefolllower(t=inp.system.t,
                           x = inp.system.xloads.x,
                           force=f,
                           ra=sol1.staticsystem_sys1.ra[li],
                           Rab=sol1.staticsystem_sys1.Cab[li],
                           scale=1e4*0.5,
                           save_path=inp.driver.sol_path / f"paraviewM{num_modes}/L{li}/",
                           folder="bug",
                           X=X,
                           R0ab=R0ab)      
#+end_src

**** Small loading

#+begin_src python :tangle settings_DiscreteLoadsMC.py :session *pyshard4*
  <<ImportsFeniaxShard>>
  sol = "cao"
  <<MainBug>>
  inp.driver.sol_path = pathlib.Path(
      "./results/DiscreteMC1small")

  inp.simulation.typeof = "single"
  inp.system.name = "s1"
  inp.system.solution = "static"
  inp.system.solver_library = "diffrax"
  inp.system.solver_function = "newton"
  inp.system.solver_settings = dict(rtol=1e-6,
                                    atol=1e-6,
                                    max_steps=50,
                                    norm="linalg_norm",
                                    kappa=0.01)
  inp.system.xloads.follower_forces = True
  inp.system.xloads.x = [0, 1, 2, 3, 4, 5]
  inp.system.t = [1, 2, 3, 4, 5]
  # rwing: 14-35
  # lwing: 40-61
  points = []
  interpolation = []
  _interpolationsmall = [i*1e-2 for i in _interpolation] 
  _interpolationsmall_torsion = [i*1e-2 for i in _interpolation_torsion]
  for ri,li in zip(range(14, 36),range(40,62)):
      points.append([ri, 2])
      points.append([ri, 4])
      points.append([li, 2])
      points.append([li, 4])
  for i, _ in enumerate(range(len(points))):

      if i % 2 == 0:
          interpolation.append(_interpolationsmall)
      else:
          interpolation.append(_interpolationsmall_torsion)

  interpolation = np.array(interpolation)  # num_pointforces x num_interpolation  
  sigma0 = 0.15  # percentage of mu for sigma
  mu = _interpolationsmall[-1]
  sigma = (sigma0) * _interpolationsmall[-1]
  rand = np.random.normal(mu, sigma, paths)
  mu_torsion = _interpolationsmall_torsion[-1]
  sigma_torsion = (sigma0) * _interpolationsmall_torsion[-1]
  rand_torsion = np.random.normal(mu_torsion, sigma_torsion, paths)
  follower_interpolation = []
  for i, ri in enumerate(rand):
      interpolationrand = np.copy(interpolation)
      interpolationrand[::2, -1] = ri
      interpolationrand[1::2, -1] = rand_torsion[i]
      follower_interpolation.append(interpolationrand)
  #follower_interpolation = [interpolation * ri for ri in rand]
  follower_points = [points]*paths
  inputforces = dict(follower_points=follower_points,
                     follower_interpolation=follower_interpolation
                     )
  inp.system.shard = dict(input_type="pointforces",
                          inputs=inputforces)
  t1 = time.time()
  sol2 = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
  t2 = time.time()
  print(f"Time DiscreteLoads MC: {t2 - t1}")
  # np.mean(sol.staticsystem_sys1.ra[:,-1,2,35])
  # np.std(sol.staticsystem_sys1.ra[:,-1,2,35])
#+end_src

**** Very Small loading
 #+begin_src python :tangle settings_DiscreteLoadsMC.py :session *pyshard4*
   <<ImportsFeniaxShard>>
   sol = "cao"
   <<MainBug>>
   inp.driver.sol_path = pathlib.Path(
        "./results/DiscreteMC1verysmall")

   inp.simulation.typeof = "single"
   inp.system.name = "s1"
   inp.system.solution = "static"
   inp.system.solver_library = "diffrax"
   inp.system.solver_function = "newton"
   inp.system.solver_settings = dict(rtol=1e-6,
                                     atol=1e-6,
                                     max_steps=50,
                                     norm="linalg_norm",
                                     kappa=0.01)
   inp.system.xloads.follower_forces = True
   inp.system.xloads.x = [0, 1, 2, 3, 4, 5]
   inp.system.t = [1, 2, 3, 4, 5]
   # rwing: 14-35
   # lwing: 40-61
   points = []
   interpolation = []
   _interpolationverysmall = [i*1e-3 for i in _interpolation] 
   _interpolationverysmall_torsion = [i*1e-3 for i in _interpolation_torsion]   

   for ri,li in zip(range(14, 36),range(40,62)):
       points.append([ri, 2])
       points.append([ri, 4])
       points.append([li, 2])
       points.append([li, 4])
   for i, _ in enumerate(range(len(points))):

       if i % 2 == 0:
           interpolation.append(_interpolationverysmall)
       else:
           interpolation.append(_interpolationverysmall_torsion)

   interpolation = np.array(interpolation)  # num_pointforces x num_interpolationverysmall  
   sigma0 = 0.15  # percentage of mu for sigma
   mu = _interpolationverysmall[-1]
   sigma = (sigma0) * _interpolationverysmall[-1]
   rand = np.random.normal(mu, sigma, paths)
   mu_torsion = _interpolationverysmall_torsion[-1]
   sigma_torsion = (sigma0) * _interpolationverysmall_torsion[-1]
   rand_torsion = np.random.normal(mu_torsion, sigma_torsion, paths)
   follower_interpolation = []
   for i, ri in enumerate(rand):
       interpolationrand = np.copy(interpolation)
       interpolationrand[::2, -1] = ri
       interpolationrand[1::2, -1] = rand_torsion[i]
       follower_interpolation.append(interpolationrand)
   #follower_interpolation = [interpolation * ri for ri in rand]
   follower_points = [points]*paths
   inputforces = dict(follower_points=follower_points,
                      follower_interpolation=follower_interpolation
                      )
   inp.system.shard = dict(input_type="pointforces",
                           inputs=inputforces)
   t1 = time.time()
   sol3 = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
   t2 = time.time()
   print(f"Time DiscreteLoads MC: {t2 - t1}")

    # np.mean(sol.staticsystem_sys1.ra[:,-1,2,35])
    # np.std(sol.staticsystem_sys1.ra[:,-1,2,35])
#+end_src
**** Statistics
#+begin_src python :tangle settings_DiscreteLoadsMC.py :session *pyshard4*
  u_mean = np.mean(sol1.staticsystem_sys1.ra[:,-1,2,35] - config.fem.X[35,2])
  u_std = np.std(sol1.staticsystem_sys1.ra[:,-1,2,35])

  print(f"Mean displacement node 35: {u_mean}")
  print(f"std displacement node 35: {u_std}") 
  print(f"Ratio displacement node 35: {u_mean/u_std}") 
  print("***************") 

  u_mean2 = np.mean(sol2.staticsystem_sys1.ra[:,-1,2,35] - config.fem.X[35,2])
  u_std2 = np.std(sol2.staticsystem_sys1.ra[:,-1,2,35])

  print(f"Mean displacement node 35: {u_mean2}")
  print(f"std displacement node 35: {u_std2}") 
  print(f"ratio displacement node 35: {u_mean2/u_std2}") 
  print("***************") 

  u_mean3 = np.mean(sol3.staticsystem_sys1.ra[:,-1,2,35] - config.fem.X[35,2])
  u_std3 = np.std(sol3.staticsystem_sys1.ra[:,-1,2,35])
  
  print(f"Mean displacement node 35: {u_mean3}")
  print(f"std displacement node 35: {u_std3}") 
  print(f"ratio displacement node 35: {u_mean3/u_std3}") 
  print("***************") 
  
#+end_src

*** Manoeuvre
#+begin_src python :tangle ./settings_manoeuvre1shard.py :session *pyshard1*
  <<ImportsFeniaxShard>>
  <<ManoeuvreMain>>
  device_count = 8
  #rho_rand = np.random.normal(0.6, 0.6*0.15, 500)
  inp.driver.sol_path = pathlib.Path(
      "./results/manoeuvre1Shard")  
  inputflow = dict(u_inf=np.linspace(167.7, 251.6, 16),
                   rho_inf=np.linspace(0.33, 0.5, 16))
  inp.system.shard = dict(input_type="steadyalpha",
                          inputs=inputflow)
  t1 = time.time()  
  solstatic1shard = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
  t2 = time.time()
  print(f"Time Manoeuvre: {t2 - t1}")
  
#+end_src

*** Gust
for local testing:
#+begin_src python  :session *pyshard2*
  <<ImportsFeniaxShard>>
  <<GustMain>>
  device_count = 4
  inp.driver.sol_path = pathlib.Path(
      f"./results/gust3_{sol}Shard")
  inp.system.aero.gust.fixed_discretisation = [150, u_inf]
  # Shard inputs
  inputflow = dict(length=np.linspace(25,150,2),
                   intensity= np.linspace(0.1, 20, 2),
                   rho_inf = np.linspace(0.3, rho_inf, 2)
                 )
  inp.system.shard = dict(input_type="gust1",
                        inputs=inputflow)
  t1 = time.time()  
  solgust21shard = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
  t2 = time.time()
  print(f"Time SHARD Gust: {t2 - t1}")
  
#+end_src

#+begin_src python :tangle settings_gust1shard.py :session *pyshard2*
  <<ImportsFeniaxShard>>
  <<GustMain>>

  inp.driver.sol_path = pathlib.Path(
      f"./results/gust3_{sol}Shard")
  inp.system.aero.gust.fixed_discretisation = [150, u_inf]
  # Shard inputs
  inputflow = dict(length=np.linspace(25,265,13),
                   intensity=np.linspace(0.1, 3, 11),
                   rho_inf = np.linspace(0.34,0.48,8)
                 )
  inp.system.shard = dict(input_type="gust1",
                        inputs=inputflow)

  solgust21shard = feniax.feniax_shardmain.main(input_dict=inp, device_count=device_count)
#+end_src


* Gust solution (146)
:PROPERTIES:
:header-args: :session *pybug* :comments yes :noweb yes
:END:

#+begin_src python
  import feniax.unastran.gustgen as gustgen
  import importlib
  importlib.reload(gustgen)
  M = <<parameters_gafs(output="mach")>>
  chord = <<parameters_gafs(output="chord_ref")>>
  label = "<<parameters_gafs(output="label_gaf")>>"
  h = 7000  # altitude  
  H = [40]  # gust semi-lengths 
  U_inf_TAS = 230
  u_inf_type = 'tas' #'tas', 'eas'
  grid_DAREA=1
  N_step_freq = 150 # steps in the freq
  F_max = 20 # maximum frequency
  U_ds = [0.14] # gust intensity
  Fg = None #gust intensity for cooked formula
  nasgust = gustgen.Gust4Nastran(h,
                                 M,
                                 U_inf_TAS,
                                 u_inf_type,
                                 chord,
                                 F_max,
                                 N_step_freq,
                                 H,
                                 Fg,
                                 grid_DAREA,
                                 VD=False,
                                 U_ds=U_ds          
                                 )

  nasgust.gust_family(f"./NASTRAN/Gusts/gust{label}.bdf",
                      f"./NASTRAN/Gusts/subcase{label}.bdf")
  nasgust.gust_setup(f"./NASTRAN/Gusts/setup{label}.bdf")
#+end_src

#+RESULTS:
: None
