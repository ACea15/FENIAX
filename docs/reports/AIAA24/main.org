#+setupfile: ./config.org
* House keeping  :noexport: 
#+begin_src elisp :results none :tangle no :exports none
    (add-to-list 'org-structure-template-alist
    '("sp" . "src python :session (print pythonShell)"))
    (add-to-list 'org-structure-template-alist
    '("se" . "src elisp"))
    (setq org-confirm-babel-evaluate nil)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (setq org-latex-pdf-process
      '("latexmk -pdflatex='pdflatex --syntex=1 -interaction nonstopmode' -pdf -bibtex -f %f"
        "latexmk -pdflatex='pdflatex --syntex=1 -interaction nonstopmode' -pdf -bibtex -f %f"))
    ;; (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))
    (pyvenv-workon "fem4inasdev")
    (require 'org-tempo)
    ;; Veval_blocks -> eval blocks of latex
    ;; Veval_blocks_run -> eval blocks to obtain results
    (setq Veval_blocks "yes") ;; yes, no, no-export
    (setq Vpics "png") ;; yes, no, no-export   
    (setq Veval_blocks_run "yes")
    (setq pythonShell "*py1*")
    ;; export_blocks: code, results, both, none
    (setq export_blocks  "results")  
#+end_src

* Load modules :noexport: 
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes  :eval (print Veval_blocks) :exports (print export_blocks) :comments both
:END:

#+begin_src python  :results none 
  import plotly.express as px
  import pyNastran.op4.op4 as op4
  import matplotlib.pyplot as plt
  import pdb
  import datetime
  import os
  import shutil
  REMOVE_RESULTS = False
  #   for root, dirs, files in os.walk('/path/to/folder'):
  #       for f in files:
  #           os.unlink(os.path.join(root, f))
  #       for d in dirs:
  #           shutil.rmtree(os.path.join(root, d))
  # 
  if os.getcwd().split('/')[-1] != 'results':
      if not os.path.isdir("./figs"):
          os.mkdir("./figs")
      if REMOVE_RESULTS:
          if os.path.isdir("./results"):
              shutil.rmtree("./results")
      if not os.path.isdir("./results"):
          print("***** creating results folder ******")
          os.mkdir("./results")
      os.chdir("./results")
#+end_src

#+NAME: PYTHONMODULES
#+begin_src python  :results none  :tangle ./results/run.py
  import pathlib
  import plotly.express as px
  import pickle
  import jax.numpy as jnp
  import jax
  import pandas as pd
  import numpy as np
  import fem4inas.preprocessor.configuration as configuration  # import Config, dump_to_yaml
  from fem4inas.preprocessor.inputs import Inputs
  import fem4inas.fem4inas_main
  import fem4inas.plotools.uplotly as uplotly
  import fem4inas.plotools.utils as putils
  import fem4inas.preprocessor.solution as solution
  import fem4inas.unastran.op2reader as op2reader
  import fem4inas.plotools.nastranvtk.bdfdef as bdfdef
  from tabulate import tabulate
#+end_src

* Run models
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes :tangle ./results/run.py :eval (print Veval_blocks_run) :exports (print export_blocks) :comments both
:END:

- Models run on this exercise:

#+INCLUDE: "./runs.org::*RunModels" :only-contents t

* Introduction
#+INCLUDE: "./sec_intro.org::*Introduction" :only-contents t
* Theory and implementation
#+INCLUDE: "./sec_intro.org::*Theory and implementation" :only-contents t

* Results
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes :tangle ./results/examples.py :eval (print Veval_blocks) :exports (print export_blocks) :comments both
:END:

#+INCLUDE: "./sec_results.org::*Results" :only-contents t

* Conclusions
A modal-based formulation has been presented for the dynamics of flexible aircraft that accounts for both geometrically nonlinear deformations and rigid-body motions -as well as the nonlinear interaction between them-. The approach is built on a non-intrusive reduction order process combined with a nonlinear description of the dominant dimension in slender structures. It achieves a nonlinear representation of linear aeroelastic models of arbitrary complexity in a very efficient manner and without losing the characteristics of the linear model.  
While the underlying theory had already been introduced, a new implementation was put in-place for both high-performance and software modularity, with the numerical library JAX as the engine powering the computations. This has allowed time-domain computations in near real-time with two orders of magnitude speed-ups compared to conventional implementations.
A new algorithm to efficiently compute the aircraft trim equilibrium was also devised.
\\
A relevant amount of test cases accompany the software, of which two have been presented herein to illustrate the aforementioned features in the code. Firstly, a very flexible, unsupported shell structure is shown to fly through the air undergoing large, coupled rigid and flexible motions in vacuum. Secondly, the aeroelastic response of a full aircraft model built to industry standards is analysed. The trim equilibrium for various accelerations is computed and compared against the linear response provided by MSC Nastran. Next the gust response of the aircraft flying at trimmed conditions is studied, with the nonlinear analysis leading to slightly higher loads than its linear counterpart.
On all of these cases we have shown how the program running the computations can be deployed on standard CPUs but also on modern hardware architectures such as GPUs that can lead to performance gains of over 30 times faster.

\appendix
* But how fast is JAX?

bibliographystyle:plain
# bibliography:/home/acea/Documents/Engineering.bib
bibliography:~/Documents/Engineering.bib

