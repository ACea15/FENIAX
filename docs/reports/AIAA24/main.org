#+TITLE: Geometrically Nonlinear Analysis of Flexible Aircraft on Modern Hardware Architectures
# #+TITLE: A Nonlinear Approach for Flexible Aircraft in Modern Hardware Architectures
# #+TITLE: JAX-based Nonlinear Aeroelastic Simulation of Large Aircraft Models
# #+TITLE: JAX-based Aeroelastic Framework for Nonlinear Analysis of Large Aircraft Models
# #A Nearly-Real Time Nonlinear Aeroelastic Simulation Architecture Based on JAX
#+AUTHOR: Alvaro Cea and Rafael Palacios
#+BIBLIOGRAPHY:/home/acea/Documents/Engineering.bib
:LATEX_PROPERTIES:
#+OPTIONS: toc:nil
#+OPTIONS: broken-links:mark
#+LATEX_HEADER: \synctex=1
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{amsmath,bm}
# +LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage[ruled,vlined]{algorithm2e}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}
#+LATEX_HEADER: \usepackage{siunitx}
#+LATEX_HEADER: \usepackage{longtable,tabularx}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage{tabularx,longtable,multirow,subfigure,caption}
#+LATEX_HEADER: \setlength\LTleft{0pt} 
#+LATEX_HEADER: \usepackage{mathrsfs}
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{mathalpha}
#+LATEX_HEADER: \renewcommand{\figurename}{\bf \small Figure}
#+LATEX_HEADER: \renewcommand{\tablename}{\bf \small Table}
#+LATEX_HEADER: \newcommand{\de}{\delta}
#+LATEX_HEADER: \newcommand{\ve}{\text{v}}
#+LATEX_HEADER: \newcommand{\lo}{\mathcal{L}}
#+LATEX_HEADER: \newcommand{\vt}{\overline{\delta\bm{\theta}}}
#+LATEX_HEADER: \newcommand{\vu}{\overline{\delta\bm{u}}}
#+LATEX_HEADER: \newcommand{\e}{\bm{\mathfrak{e}}}
#+LATEX_HEADER: \newcommand{\E}{\bm{\mathbb{E}}}
#+LATEX_HEADER: \newcommand{\T}{\bm{\mathcal{T}}}
#+LATEX_HEADER: \newcommand{\fra}{(\mathtt{1})}
#+LATEX_HEADER: \newcommand{\frb}{(\mathtt{2})}
#+LATEX_HEADER: \newcommand{\fri}{(\mathfrak{i})}
#+LATEX_HEADER: \newcommand{\bs}[1]{\boldsymbol{#1}}
#+LATEX_HEADER: \newcommand{\rhoinf}{\rho}	
#+LATEX_HEADER: \newcommand{\Vinf}{U}
#+LATEX_HEADER: \newcommand{\Cl}[1]{c_{l_{#1}}}
#+LATEX_HEADER: \newcommand{\barCl}[1]{\bar{c}_{l_{#1}}}
#+LATEX_HEADER: \newcommand{\Cm}[1]{c_{m_{#1}}}
#+LATEX_HEADER: \newcommand{\barCm}[1]{\bar{c}_{m_{#1}}}
#+LATEX_HEADER: \newcommand{\AIC}{\bs{\mathcal{A}}}

:END:

#+begin_abstract
This paper presents a new implementation for time-domain nonlinear aeroelastic simulations built for performance and that is suitable for modern hardware architectures such as GPUs.
The numerical library JAX and a novel description of the aircraft dynamics are brought together into a highly vectorised codebase that achieves two orders of magnitude accelerations compare to conventional implementations. This brings full-vehicle simulations to run close to if not in real-time, thus opening new possibilities for aircraft aeroelastic analysis which have traditionally been constrained to either linear, frequency domain solutions, or to their nonlinear counterparts but narrower in scope. Moreover, the approach seamlessly integrates with conventional aeroelastic load packages which facilitates the analysis of complex aircraft configurations.
A large test suite of problems has been built for the validation and maintainability of the code, which includes static and dynamic, structural and aeroelastic examples. A summary is presented herein along side a computational benchmark on the CPUs and GPUs.
The nonlinear trim and gust response of an industrial configuration are studied and illustrate the capabilities of the proposed approach. Verification against MSC Nastran is shown first for small deformations, to then highlight the main differences between linear and nonlinear analysis for very high loading scenarios that induce large displacements.
#+end_abstract

* House keeping  :noexport: 
#+begin_src elisp :results none :tangle no :exports none
  (add-to-list 'org-structure-template-alist
  '("sp" . "src python :session (print pythonShell)"))
  (add-to-list 'org-structure-template-alist
  '("se" . "src elisp"))
  (setq org-confirm-babel-evaluate nil)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex --syntex=1 -interaction nonstopmode' -pdf -bibtex -f %f"))
  ;; (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))
  (pyvenv-workon "fem4inas")
  (require 'org-tempo)
  ;; Veval_blocks -> eval blocks of latex
  ;; Veval_blocks_run -> eval blocks to obtain results
  (setq Veval_blocks "yes") ;; yes, no, no-export 
  (setq Veval_blocks_run "no")
  (setq pythonShell "py1org")
  ;; export_blocks: code, results, both, none
  (setq export_blocks  "results")  
#+end_src

* Load modules :noexport: 
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes  :eval (print Veval_blocks) :exports (print export_blocks) :comments both
:END:

#+begin_src python  :results none 
  import plotly.express as px
  import pyNastran.op4.op4 as op4
  import matplotlib.pyplot as plt
  import pdb
  import datetime
  import os
  import shutil
  REMOVE_RESULTS = False
  #   for root, dirs, files in os.walk('/path/to/folder'):
  #       for f in files:
  #           os.unlink(os.path.join(root, f))
  #       for d in dirs:
  #           shutil.rmtree(os.path.join(root, d))
  # 
  if os.getcwd().split('/')[-1] != 'results':
      if not os.path.isdir("./figs"):
          os.mkdir("./figs")
      if REMOVE_RESULTS:
          if os.path.isdir("./results"):
              shutil.rmtree("./results")
      if not os.path.isdir("./results"):
          print("***** creating results folder ******")
          os.mkdir("./results")
      os.chdir("./results")
#+end_src

#+NAME: PYTHONMODULES
#+begin_src python  :results none  :tangle ./results/run.py
  import pathlib
  import plotly.express as px
  import pickle
  import jax.numpy as jnp
  import jax
  import pandas as pd
  import numpy as np
  import fem4inas.preprocessor.configuration as configuration  # import Config, dump_to_yaml
  from fem4inas.preprocessor.inputs import Inputs
  import fem4inas.fem4inas_main
  import fem4inas.plotools.uplotly as uplotly
  import fem4inas.plotools.utils as putils
  import fem4inas.preprocessor.solution as solution
  import fem4inas.unastran.op2reader as op2reader
  import fem4inas.plotools.nastranvtk.bdfdef as bdfdef
  from tabulate import tabulate

#+end_src

* Run models :noexport:  
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes :tangle ./results/run.py :eval (print Veval_blocks_run) :exports (print export_blocks) :comments both
:END:

#+begin_src python :results none

  import time

  TIMES_DICT = dict()
  SOL = dict()
  CONFIG = dict()

  def run(input1, **kwargs):
      jax.clear_caches()
      label = kwargs.get('label', 'default')
      t1 = time.time()
      config =  configuration.Config(input1)
      sol = fem4inas.fem4inas_main.main(input_obj=config)
      t2 = time.time()
      TIMES_DICT[label] = t2 - t1      
      SOL[label] = sol
      CONFIG[label] = config

  def save_times():
      pd_times = pd.DataFrame(dict(times=TIMES_DICT.values()),
                              index=TIMES_DICT.keys())
      pd_times.to_csv("./run_times.csv")

#+end_src


- Models run on this exercise:

  | Label | Model         | NumModes | Solver                      | tol/dt    | settings       |
  |-------+---------------+----------+-----------------------------+-----------+----------------|
  | SP1   | SailPlane     |        5 | Newton-Raphson (Diffrax)    | 1e-6/     |                |
  | SP2   | ...           |       15 | ...                         | 1e-6/     |                |
  | SP3   | ...           |       30 | ...                         | 1e-6/     |                |
  | SP4   | ...           |       50 | ...                         | 1e-6/     |                |
  | SP5   | ...           |      100 | ...                         | 1e-6/     |                |
  |-------+---------------+----------+-----------------------------+-----------+----------------|
  | WSP1  | WingSailPlane |        5 | RK4                         | /         |                |
  | WSP2  | ...           |       15 | RK4                         | /         |                |
  | WSP3  | ...           |       30 | RK4                         | /         |                |
  | WSP4  | ...           |       50 | RK4                         | /         |                |
  | WSP5  | ...           |      100 | RK4                         | /         |                |
  |-------+---------------+----------+-----------------------------+-----------+----------------|
  | XRF1  | XRF1 Airbus   |       70 | RK4                         | 0.005     | [[Table2]],Index=1 |
  | XRF2  | ...           |       70 | RK4                         | 0.005     | [[Table2]],Index=2 |
  | XRF3  | ...           |       70 | RK4                         | 0.005     | [[Table2]],Index=3 |
  | XRF4  | ...           |       70 | RK4                         | 0.005     | [[Table2]],Index=4 |
  | XRF5  | ...           |       70 | Dopri5 (Diffrax)            | 0.005     | [[Table2]],Index=2 |
  | XRF6  | ...           |       70 | RK4                         | 0.02      | [[Table2]],Index=2 |
  | XRF7  | ...           |       70 | Implicit Euler (Diffrax)    | 1e-5/0.02 | [[Table2]],Index=2 |
  | XRF8  | ...           |       70 | Implicit Kvaerno3 (Diffrax) | 1e-5/0.02 | [[Table2]],Index=2 |
  |-------+---------------+----------+-----------------------------+-----------+----------------|


#+begin_comment
|   t | $f(t)$ | $f'(t)$ [AD] | $f'(t)$ [FD] |
|-----+--------+--------------+--------------|
| 1.5 |   2.81 m |        0.700 |        0.700 |
| 3.5 |  4.527 m |        1.344 |        1.344 |
| 5.5 |  6.538 m |        0.623 |        0.623 |


| $\alpha$ | $f(\alpha)$          | $f'(\alpha)$ [AD]     | $f'(\alpha)$ [FD]     |
|----------+----------------------+-----------------------+-----------------------|
|      0.5 | $1723.2 \times 10^3$ | $3587.71 \times 10^3$ | $3587.77 \times 10^3$ |
|      1.0 | $3624.4 \times 10^3$ | $3735.26 \times 10^3$ | $3735.11 \times 10^3$ |
|      1.5 | $5608.3 \times 10^3$ | $3957.81 \times 10^3$ | $3958.31 \times 10^3$ |
#+end_comment

** SailPlane
*** Runs
#+NAME: SP
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  SP_folder = fem4inas.PATH / "../examples/SailPlane"
  inp = Inputs()
  inp.engine = "intrinsicmodal"
  inp.fem.eig_type = "inputs"
  inp.fem.connectivity = dict(FuselageFront=['RWingInner',
                                           'LWingInner'],
                              FuselageBack=['BottomTail',
                                            'Fin'],
                              RWingInner=['RWingOuter'],
                              RWingOuter=None,
                              LWingInner=['LWingOuter'],
                              LWingOuter=None,
                              BottomTail=['LHorizontalStabilizer',
                                          'RHorizontalStabilizer'],
                              RHorizontalStabilizer=None,
                              LHorizontalStabilizer=None,
                              Fin=None
                              )

  inp.fem.folder = pathlib.Path(SP_folder / 'FEM/')
  inp.fem.num_modes = 50
  inp.driver.typeof = "intrinsic"
  inp.simulation.typeof = "single"
  inp.systems.sett.s1.solution = "static"
  inp.systems.sett.s1.solver_library = "diffrax"
  inp.systems.sett.s1.solver_function = "newton_raphson"
  inp.systems.sett.s1.solver_settings = dict(rtol=1e-6,
                                             atol=1e-6,
                                             max_steps=50,
                                             norm="linalg_norm",
                                             kappa=0.01)
  # inp.systems.sett.s1.solver_library = "scipy"
  # inp.systems.sett.s1.solver_function = "root"
  # inp.systems.sett.s1.solver_settings = dict(method='hybr',#'krylov',
  #                                           tolerance=1e-9)
  inp.systems.sett.s1.xloads.follower_forces = True
  inp.systems.sett.s1.xloads.follower_points = [[25, 2], [48, 2]]

  inp.systems.sett.s1.xloads.x = [0, 1, 2, 3, 4, 5, 6]
  inp.systems.sett.s1.xloads.follower_interpolation = [[0.,
                                                        2e5,
                                                        2.5e5,
                                                        3.e5,
                                                        4.e5,
                                                        4.8e5,
                                                        5.3e5],
                                                       [0.,
                                                        2e5,
                                                        2.5e5,
                                                        3.e5,
                                                        4.e5,
                                                        4.8e5,
                                                        5.3e5]
                                                       ]
  inp.systems.sett.s1.t = [1, 2, 3, 4, 5, 6]

#+end_src

**** SP1
#+NAME: SP1
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<SP>>
  inp.fem.num_modes = 5
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  run(inp, label=name)

#+end_src
**** SP2
#+NAME: SP2
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<SP>>
  inp.fem.num_modes = 15
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  run(inp, label=name)
#+end_src
**** SP3
#+NAME: SP3
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<SP>>
  inp.fem.num_modes = 30
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  run(inp, label=name)

#+end_src
**** SP4
#+NAME: SP4
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<SP>>
  inp.fem.num_modes = 50
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  run(inp, label=name)

#+end_src
**** SP5
#+NAME: SP5
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<SP>>
  inp.fem.num_modes = 100
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  run(inp, label=name)
#+end_src

** wingSP
*** Runs
#+NAME: wingSP
#+begin_src python :results none :eval (print Veval_blocks_run)

  wingSP_folder = fem4inas.PATH / "../examples/wingSP"
  inp = Inputs()
  inp.engine = "intrinsicmodal"
  inp.fem.connectivity = {'c1': None}
  inp.fem.grid = "structuralGrid"
  inp.fem.folder = pathlib.Path(f'{wingSP_folder}/FEM/')
  eigenvals = jnp.load(inp.fem.folder / "eigenvals.npy")
  inp.fem.eig_type = "inputs"
  inp.driver.typeof = "intrinsic"
  inp.simulation.typeof = "single"
  inp.systems.sett.s1.solution = "dynamic"
  inp.systems.sett.s1.t1 = 15.
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4")
  inp.systems.sett.s1.solver_library = "runge_kutta"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.xloads.follower_forces = True
  inp.systems.sett.s1.xloads.follower_points = [[23, 0],
                                                [23, 2]]
  inp.systems.sett.s1.xloads.x = [0, 4, 4+1e-6, 20]
  inp.systems.sett.s1.xloads.follower_interpolation = [[0.05 * -2e5, 1 * -2e5, 0., 0.],
                                                       [0.05 * 6e5, 1 * 6e5,  0., 0.]
                                                       ]

#+end_src

****  WSP1
#+NAME: WSP1
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<wingSP>>
  inp.fem.num_modes = 5
  inp.systems.sett.s1.dt = round(1./ eigenvals[inp.fem.num_modes]**0.5, 6)
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  run(inp, label=name)
#+end_src
****  WSP2
#+NAME: WSP2
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<wingSP>>
  inp.fem.num_modes = 15
  inp.systems.sett.s1.dt = round(1./ eigenvals[inp.fem.num_modes]**0.5, 6)
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  run(inp, label=name)
#+end_src
****  WSP3
#+NAME: WSP3
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<wingSP>>
  inp.fem.num_modes = 30
  inp.systems.sett.s1.dt = round(1./ eigenvals[inp.fem.num_modes]**0.5, 6)
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  run(inp, label=name)
#+end_src
****  WSP4
#+NAME: WSP4
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<wingSP>>
  inp.fem.num_modes = 50
  inp.systems.sett.s1.dt = round(1./ eigenvals[inp.fem.num_modes]**0.5, 6)
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  run(inp, label=name)
#+end_src
****  WSP5
#+NAME: WSP5
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))

  <<wingSP>>
  inp.fem.num_modes = 100
  inp.systems.sett.s1.dt = round(1./ eigenvals[inp.fem.num_modes]**0.5, 6)
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  run(inp, label=name)
#+end_src

*** Plot
:PROPERTIES:
:header-args+: :tangle ./results/plot_wingSP.py :eval (print Veval_blocks)
:END:

Read Nastran

#+begin_src python :results none :exports (print export_blocks)
  <<PYTHONMODULES>>
  wingSP_folder = fem4inas.PATH / "../examples/wingSP"
  nastran_path = wingSP_folder / "NASTRAN/"
  nas_wspl = op2reader.NastranReader(op2name=(nastran_path / "wing_109d.op2"),
                                     bdfname=(nastran_path / "wing_109b.bdf"))
  nas_wspl.readModel()
  t_wspl, u_wspl = nas_wspl.displacements()  
  ###
  nas_wsp = op2reader.NastranReader(op2name=(nastran_path / "wing400d.op2"),
                                     bdfname=(nastran_path / "wing_109b.bdf"))
  nas_wsp.readModel()
  t_wsp, u_wsp = nas_wsp.displacements()

#+end_src

#+NAME: WSP1_z
#+begin_src python :results value file :exports no 
  figname = f"figs/{name}.png"
  sol_wsp1 = solution.IntrinsicReader("./WSP5")
  x, y = putils.pickIntrinsic2D(sol_wsp1.data.dynamicsystem_s1.t,
                                sol_wsp1.data.dynamicsystem_s1.ra,
                                fixaxis2=dict(node=23, dim=2))

  fig = uplotly.lines2d(x, y - y[0], None,
                        dict(name="NMROM",
                             line=dict(color="navy")
                             ),
                        dict())
  fig = uplotly.lines2d(t_wsp[0], u_wsp[0,:,-4, 2], fig,
                        dict(name="NASTRAN",
                             line=dict(color="grey",
                                       dash="dash")
                             ))
  fig = uplotly.lines2d(t_wspl[0], u_wspl[0,:,-4, 2], fig,
                        dict(name="NASTRAN",
                             line=dict(color="red",
                                       dash="dash")
                             ))
  #fig.update_xaxes(range=[0, 5])
  fig.write_image(f"../{figname}")
  fig.show()
  figname
#+end_src

** XRF1
:PROPERTIES:
:header-args+: 
:END:

*WARNING: private model, not available open source* 

Gust lengths and corresponding gust velocities that have been run here and elsewhere.
L_g                          18.0,67.0,116.0,165.0,214
V0_g                         11.3047276743,14.0732311562,15.4214195361,16.3541764073,17.0785232867

#+NAME: Table2
#+CAPTION: Table with various gusts on the XRF1 that have been run in this work or in the past
| Index | Gust length [m] | Gust intensity | Intensity constant | u_inf [m/s] | rho_inf [Kg/m^3008] | Mach |
|-------+-----------------+----------------+--------------------+-------------+---------------------+------|
|     1 |              67 |  14.0732311562 |               0.01 |         200 |               1.225 | 0.81 |
|     2 |              67 |  14.0732311562 |                  2 |         200 |               1.225 | 0.81 |
|     3 |            165. |  16.3541764073 |               0.01 |         200 |               1.225 | 0.81 |
|     4 |            165. |  16.3541764073 |                  2 |         200 |               1.225 | 0.81 |
|     5 |              67 |  14.0732311562 |               0.01 |         200 |               1.225 |   0. |
|     6 |              67 |  14.0732311562 |                  2 |         200 |               1.225 |   0. |
|     7 |            165. |  16.3541764073 |               0.01 |         200 |               1.225 |   0. |
|     8 |            165. |  16.3541764073 |                  2 |         200 |               1.225 |   0. |




#+NAME: XRF
#+begin_src python :results none
  xrf1_folder = fem4inas.PATH / "../examples/XRF1/"
  inp = Inputs()
  inp.engine = "intrinsicmodal"
  inp.fem.eig_type = "input_memory"
  inp.fem.eigenvals = jnp.load(f"{xrf1_folder}/FEM/Dreal70.npy")
  inp.fem.eigenvecs = jnp.load(f"{xrf1_folder}/FEM/Vreal70.npy").T
  inp.fem.connectivity = [[1, 7, 13, 31], [2], [3], [4, 5], [27], [6], [],
                          [8], [9], [10, 11], [29], [12], [],
                          [14], [15], [16, 21], [17, 23, 25],
                          [18], [19], [20], [], [22], [], [24], [],
                          [26], [], [28], [], [30], [], []]
  inp.fem.folder = pathlib.Path(f"{xrf1_folder}/FEM/")
  inp.fem.grid = "structuralGridc.txt"
  inp.fem.num_modes = 70
  inp.driver.typeof = "intrinsic"
  inp.simulation.typeof = "single"
  mach = "081"
  inp.systems.sett.s1.aero.u_inf = 200.
  inp.systems.sett.s1.aero.rho_inf = 1.225
  inp.systems.sett.s1.aero.A = f"{xrf1_folder}/AERO/AICs{mach}_8r{inp.fem.num_modes}.npy"
  inp.systems.sett.s1.aero.D = f"{xrf1_folder}/AERO/AICsQhj{mach}_8r{inp.fem.num_modes}.npy"
  inp.systems.sett.s1.aero.poles = f"{xrf1_folder}/AERO/Poles{mach}_8r{inp.fem.num_modes}.npy"
  inp.systems.sett.s1.solution = "dynamic"
  inp.systems.sett.s1.t1 = 10.
  inp.systems.sett.s1.tn = 2001
  inp.systems.sett.s1.xloads.modalaero_forces = True
  inp.systems.sett.s1.q0treatment = 2
  inp.systems.sett.s1.aero.c_ref = 7.271
  inp.systems.sett.s1.aero.gust_profile = "mc"
  inp.systems.sett.s1.aero.gust.shift = 0.
  inp.systems.sett.s1.aero.gust.panels_dihedral = f"{xrf1_folder}/AERO/Dihedral.npy"
  inp.systems.sett.s1.aero.gust.collocation_points = f"{xrf1_folder}/AERO/Control_nodes.npy"
#+end_src

*** XRF1

#+NAME: XRF1
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.solver_library = "runge_kutta"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4")
  inp.systems.sett.s1.aero.gust.intensity = 14.0732311562*0.01
  inp.systems.sett.s1.aero.gust.length = 67.
  inp.systems.sett.s1.aero.gust.step = 0.5

  run(inp, label=name)
#+end_src

*** XRF2
#+NAME: XRF2
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.solver_library = "runge_kutta"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4")
  inp.systems.sett.s1.aero.gust.intensity = 16.3541764073 * 0.01
  inp.systems.sett.s1.aero.gust.length = 165.
  inp.systems.sett.s1.aero.gust.step = 0.05

  run(inp, label=name)
#+end_src

*** XRF3
#+NAME: XRF3
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.solver_library = "runge_kutta"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4")
  inp.systems.sett.s1.aero.gust.intensity = 14.0732311562*2 #11.304727674272842/10000
  inp.systems.sett.s1.aero.gust.length = 67.
  inp.systems.sett.s1.aero.gust.step = 0.5

  run(inp, label=name)
#+end_src

*** XRF4
#+NAME: XRF4
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.solver_library = "runge_kutta"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4")
  inp.systems.sett.s1.aero.gust.intensity = 16.3541764073*2 #11.304727674272842/10000
  inp.systems.sett.s1.aero.gust.length = 165.
  inp.systems.sett.s1.aero.gust.step = 0.5

  run(inp, label=name)


#+end_src

*** XRF5
#+NAME: XRF5
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.tn = 2001
  inp.systems.sett.s1.solver_library = "diffrax"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="Dopri5",#"Kvaerno3",
                                           )

  inp.systems.sett.s1.aero.gust.intensity = 14.0732311562*2 #11.304727674272842/10000
  inp.systems.sett.s1.aero.gust.length = 67.
  inp.systems.sett.s1.aero.gust.step = 0.5

  run(inp, label=name)
#+end_src

*** XRF6

#+NAME: XRF6
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  inp.systems.sett.s1.tn = 501
  inp.systems.sett.s1.solver_library = "runge_kutta"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4")
  inp.systems.sett.s1.aero.gust.intensity = 14.0732311562*2 #11.304727674272842/10000
  inp.systems.sett.s1.aero.gust.length = 67.
  inp.systems.sett.s1.aero.gust.step = 0.5

  run(inp, label=name)
#+end_src

*** XRF7
#+NAME: XRF7
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.tn = 1501
  inp.systems.sett.s1.solver_library = "diffrax"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="ImplicitEuler",#"Kvaerno3",
            # stepsize_controller=dict(PIDController=dict(atol=1e-5,
                #                                            rtol=1e-5)),
            root_finder=dict(Newton=dict(atol=1e-5,
                                         rtol=1e-5))
                                           )

  inp.systems.sett.s1.aero.gust.intensity = 14.0732311562*2 #11.304727674272842/10000
  inp.systems.sett.s1.aero.gust.length = 67.
  inp.systems.sett.s1.aero.gust.step = 0.5

  run(inp, label=name)
#+end_src
*** XRF8
#+NAME: XRF8
#+begin_src python  :noweb yes :results none :var name=(org-element-property :name (org-element-context))

  <<XRF>>
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")

  inp.systems.sett.s1.tn = 1501
  inp.systems.sett.s1.solver_library = "diffrax"
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="Kvaerno3", #"ImplicitEuler",#"Kvaerno3",
            # stepsize_controller=dict(PIDController=dict(atol=1e-5,
            #                                            rtol=1e-5)),
            root_finder=dict(Newton=dict(atol=1e-5,
                                        rtol=1e-5))                              
            # root_finder=dict(Newton=dict(atol=1e-6,
            #                              rtol=1e-6))
                                           )

  inp.systems.sett.s1.aero.gust.intensity = 14.0732311562*2 #11.304727674272842/10000
  inp.systems.sett.s1.aero.gust.length = 67.
  inp.systems.sett.s1.aero.gust.step = 0.5
  run(inp, label=name)
#+end_src

** Wrap up
#+begin_src python :results none
  save_times()
#+end_src
* NASTRAN :noexport: 
:PROPERTIES:
:header-args: :mkdirp yes :tangle ./results/run_nastran.sh :eval no :exports (print export_blocks) :comments both
:END:

#+begin_src bash :shebang #!/bin/zsh :session *nastran*
  source ~/.zshrc
  cd "../../../examples/SailPlane/NASTRAN/static400/"
  start=$(date +%s.%N)
  nastran "run.bdf"
  pidn=$!
  wait $pidn
  #sleep 6
  end=$(date +%s.%N)
  runtime=$(echo "$end - $start" | bc)
  echo "Runtime: $runtime seconds" > runtime_output.txt
#+end_src



#+begin_src bash
  # WSP400file="../../../examples/wingSP/NASTRAN/wing400d.bdf"
  # nastran $WSP400file
  # WSP109file="../../../examples/wingSP/NASTRAN/wing109d.bdf"
  # nastran $WSP109file
#+end_src

[[file:../../../examples/SailPlane/generate3D.py][SailPlane generate 3D]]

* Plotting :noexport: 
:PROPERTIES:
:header-args:  :session (print pythonShell) :noweb yes :tangle ./results/examples.py :eval (print Veval_blocks_run) :exports (print export_blocks) :comments both
:END:
** Helper functions

#+begin_src python :results none  :var name=(org-element-property :name (org-element-context))

  def fig_out(name, figformat="png", update_layout=None):
      def inner_decorator(func):
          def inner(*args, **kwargs):
              fig = func(*args, **kwargs)
              if update_layout is not None:
                  fig.update_layout(**update_layout)
              fig.show()
              figname = f"figs/{name}.{figformat}"
              fig.write_image(f"../{figname}")
              return fig, figname
          return inner
      return inner_decorator


  def fig_background(func):

      def inner(*args, **kwargs):
          fig = func(*args, **kwargs)
          # if fig.data[0].showlegend is None:
          #     showlegend = True
          # else:
          #     showlegend = fig.data[0].showlegend

          fig.update_xaxes(
                         titlefont=dict(size=16),
                         tickfont = dict(size=16),
                         mirror=True,
                         ticks='outside',
                         showline=True,
                         linecolor='black',
              #zeroline=True,
          #zerolinewidth=2,
              #zerolinecolor='LightPink',
                         gridcolor='lightgrey')
          fig.update_yaxes(tickfont = dict(size=16),
                         titlefont=dict(size=16),
                         zeroline=True,
                         mirror=True,
                         ticks='outside',
                         showline=True,
                         linecolor='black',
                         gridcolor='lightgrey')
          fig.update_layout(plot_bgcolor='white',
                            yaxis=dict(zerolinecolor='lightgrey'),
                            showlegend=True, #showlegend,
                            margin=dict(
                                autoexpand=True,
                                l=0,
                                r=0,
                                t=2,
                                b=0
                            ))
          return fig
      return inner

  @fig_background
  def xrf1_wingtip(sol, dim, nast_scale=None, nast_load=None):
      scale = 100./33.977
      fig=None
      x, y = putils.pickIntrinsic2D(sol.data.dynamicsystem_s1.t,
                                    sol.data.dynamicsystem_s1.ra,
                                    fixaxis2=dict(node=150, dim=dim))

      fig = uplotly.lines2d(x[1:], (y[:-1]-y[0])*scale, fig,
                            dict(name="NMROM",
                                 line=dict(color="navy")
                                 ))
      if nast_scale is not None:
          offset = 0. #u111m[nast_load,0,-1, dim]
          fig = uplotly.lines2d(t111m[nast_load], (u111m[nast_load,:,-1, dim] -
                                                   offset) * nast_scale*scale, fig,
                                dict(name="NASTRAN",
                                     line=dict(color="grey",
                                               dash="dot")
                                     ))
      dim_dict = {0:'x', 1:'y', 2:'z'}
      fig.update_yaxes(title='$\hat{u}'+f'_{dim_dict[dim]}$')
      fig.update_xaxes(range=[0, 4], title='time [s]')
      #fig.update_yaxes(range=[-0.1, 0.2])
      fig.update_layout(yaxis=dict(zerolinecolor='black'))      
      return fig

  @fig_background
  def xrf1_wingtip2(sol1, sol2, dim, labels=None,nast_scale=None, nast_load=None):
      scale = 100./33.977
      fig=None
      x1, y1 = putils.pickIntrinsic2D(sol1.data.dynamicsystem_s1.t,
                                    sol1.data.dynamicsystem_s1.ra,
                                    fixaxis2=dict(node=150, dim=dim))
      x2, y2 = putils.pickIntrinsic2D(sol2.data.dynamicsystem_s1.t,
                                    sol2.data.dynamicsystem_s1.ra,
                                    fixaxis2=dict(node=150, dim=dim))

      fig = uplotly.lines2d(x1[:], (y1[:]-y1[0])*scale, fig,
                            dict(name=f"NMROM-{labels[0]}",
                                 line=dict(color="navy")
                                 ))
      fig = uplotly.lines2d(x2[1:], (y2[:-1]-y2[0])*scale, fig,
                            dict(name=f"NMROM-{labels[1]}",
                                 line=dict(color="blue")
                                 ))

      if nast_scale is not None:
          offset = 0. #u111m[nast_load[0],0,-1, dim]
          fig = uplotly.lines2d(t111m[nast_load[0]], (u111m[nast_load[0],:,-1, dim] - offset)*nast_scale*scale, fig,
                                dict(name=f"NASTRAN-{labels[0]}",
                                     line=dict(color="black",
                                               dash="dash",
                                               width=1.5)
                                     ))
          offset2 = 0. #u111m[nast_load[1],0,-1, dim]
          fig = uplotly.lines2d(t111m[nast_load[1]], (u111m[nast_load[1],:,-1, dim] - offset2)*nast_scale*scale, fig,
                                dict(name=f"NASTRAN-{labels[1]}",
                                     line=dict(color="grey",
                                               dash="dot",
                                               width=1.5)
                                     ))
      dim_dict = {0:'x', 1:'y', 2:'z'}
      fig.update_yaxes(title='$\hat{u}' + f'_{dim_dict[dim]}$')
      fig.update_xaxes(range=[0, 4], title='time [s]')
      return fig

  @fig_background
  def xrf1_wingtip4(sol1, sol2, sol3, sol4, dim, labels=None,nast_scale=None, nast_load=None):
      scale = 100./33.977
      fig=None
      x1, y1 = putils.pickIntrinsic2D(sol1.data.dynamicsystem_s1.t,
                                      sol1.data.dynamicsystem_s1.ra,
                                      fixaxis2=dict(node=150, dim=dim))
      x2, y2 = putils.pickIntrinsic2D(sol2.data.dynamicsystem_s1.t,
                                      sol2.data.dynamicsystem_s1.ra,
                                      fixaxis2=dict(node=150, dim=dim))
      x3, y3 = putils.pickIntrinsic2D(sol3.data.dynamicsystem_s1.t,
                                      sol3.data.dynamicsystem_s1.ra,
                                      fixaxis2=dict(node=150, dim=dim))
      x4, y4 = putils.pickIntrinsic2D(sol4.data.dynamicsystem_s1.t,
                                      sol4.data.dynamicsystem_s1.ra,
                                      fixaxis2=dict(node=150, dim=dim))

      fig = uplotly.lines2d(x1[1:], (y1[:-1]-y1[0])*scale, fig,
                            dict(name=f"NMROM-{labels[0]}",
                                 line=dict(color="orange",
                                           dash="solid")
                                 ))
      fig = uplotly.lines2d(x2[:], (y2[:]-y2[0])*scale, fig,
                            dict(name=f"NMROM-{labels[1]}",
                                 line=dict(color="blue", dash="dot")
                                 ))
      fig = uplotly.lines2d(x3[:], (y3[:]-y3[0])*scale, fig,
                            dict(name=f"NMROM-{labels[2]}",
                                 line=dict(color="red")
                                 ))
      fig = uplotly.lines2d(x4[:], (y4[:]-y4[0])*scale, fig,
                            dict(name=f"NMROM-{labels[3]}",
                                 line=dict(color="grey", dash="dash")
                                 ))

      dim_dict = {0:'x', 1:'y', 2:'z'}
      fig.update_yaxes(title='$\hat{u}' + f'_{dim_dict[dim]}$')
      fig.update_xaxes(range=[0, 4], title='time [s]')
      return fig

  @fig_background
  def wsp_wingtip(sol_list, dim, labels=None, nast_load=None, axes=None):
      scale = 100./28.8
      fig = None
      colors=["darkgrey", "darkgreen",
              "blue", "magenta", "orange", "black"]
      dash = ['dash', 'dot', 'dashdot']
      modes = [5, 15, 30, 50, 100]
      for i, si in enumerate(sol_list):
          x, y = putils.pickIntrinsic2D(si.data.dynamicsystem_s1.t,
                                        si.data.dynamicsystem_s1.ra,
                                        fixaxis2=dict(node=23, dim=dim))
          if i != len(sol_list) - 1:
            fig = uplotly.lines2d(x, (y - y[0]) * scale, fig,
                                  dict(name=f"NMROM {modes[i]} modes",
                                       line=dict(color=colors[i],
                                                 dash=dash[i % 3])
                                       ),
                                  dict())
          else:
            fig = uplotly.lines2d(x, (y - y[0]) * scale, fig,
                                  dict(name=f"NMROM {modes[i]} modes",
                                       line=dict(color=colors[i])
                                       ),
                                  dict())              
      if nast_load is not None:
          fig = uplotly.lines2d(t_wsp[nast_load], u_wsp[nast_load,:,-4, dim]* scale, fig,
                                dict(name="NASTRAN-400",
                                     line=dict(color="black",
                                               dash="dash")
                                     ))
          fig = uplotly.lines2d(t_wspl[nast_load], u_wspl[nast_load,:,-4, dim]* scale, fig,
                                dict(name="NASTRAN-109",
                                     line=dict(color="red",
                                               #dash="dash"
                                               )
                                     ))
      dim_dict = {0:'x', 1:'y', 2:'z'}
      if axes is None:
          fig.update_yaxes(title='$\hat{u}_%s$'%dim_dict[dim])
          fig.update_xaxes(range=[0, 15], title='time [s]')
      else:
          fig.update_yaxes(range=axes[1], title='$\hat{u}_%s$'%dim_dict[dim])
          fig.update_xaxes(range=axes[0], title='time [s]')

      return fig

  def fn_spErrorold(sol_list, config, print_info=True):

    sol_sp= [solution.IntrinsicReader(f"./SP{i}") for i in range(1,6)]
    err = {f"M{i}_L{j}": 0. for i in range(1,6) for j in range(6)}
    for li in range(6): # loads
      for mi in range(1,6):  # modes
        count = 0  
        for index, row in config.fem.df_grid.iterrows():
          r_spn = u_sp[li, row.fe_order,:3] + config.fem.X[index]
          r_sp = sol_sp[mi - 1].data.staticsystem_s1.ra[li,:,index]
          err[f"M{mi}_L{li}"] += jnp.linalg.norm(r_spn - r_sp) #/ jnp.linalg.norm(r_spn)
          # print(f"nas = {r_spn}  ,  {r_sp}")
          count += 1
        err[f"M{mi}_L{li}"] /= count
        if print_info:
            print(f"**** LOAD: {li}, NumModes: {mi} ****")
            print(err[f"M{mi}_L{li}"])
    return err

  def fn_spError(sol_list, config, print_info=True):

      sol_sp= [solution.IntrinsicReader(f"./SP{i}") for i in range(1,6)]
      err = {f"M{i}_L{j}": 0. for i in range(1,6) for j in range(6)}
      for li in range(6): # loads
        for mi in range(1,6):  # modes
          count = 0
          r_spn = []
          r_sp = []
          for index, row in config.fem.df_grid.iterrows():
            r_spn.append(u_sp[li, row.fe_order,:3] + config.fem.X[index])
            r_sp.append(sol_sp[mi - 1].data.staticsystem_s1.ra[li,:,index])
            # print(f"nas = {r_spn}  ,  {r_sp}")
            # count += 1
          r_spn = jnp.array(r_spn)
          r_sp = jnp.array(r_sp)        
          err[f"M{mi}_L{li}"] += jnp.linalg.norm(r_spn - r_sp) #/ jnp.linalg.norm(r_spn)
          err[f"M{mi}_L{li}"] /= len(r_sp)
          if print_info:
              print(f"**** LOAD: {li}, NumModes: {mi} ****")
              print(err[f"M{mi}_L{li}"])
      return err

  @fig_background
  def fn_spPloterror(error):

      loads = [200, 250, 300, 400, 480, 530]
      num_modes = [5, 15, 30, 50, 100]
      e250 = jnp.array([error[f'M{i}_L1'] for i in range(1,6)])
      e400 = jnp.array([error[f'M{i}_L3'] for i in range(1,6)])
      e530 = jnp.array([error[f'M{i}_L5'] for i in range(1,6)])
      fig = None
      fig = uplotly.lines2d(num_modes, e250 , fig,
                                dict(name="Error, F = 250 KN",
                                     line=dict(color="red")
                                     ),
                                dict())
      fig = uplotly.lines2d(num_modes, e400, fig,
                                dict(name="Error, F = 400 KN",
                                     line=dict(color="green", dash="dash")
                                     ),
                                dict())
      fig = uplotly.lines2d(num_modes, e530, fig,
                                dict(name="Error, F = 530 KN",
                                     line=dict(color="black", dash="dot")
                                     ),
                                dict())

      fig.update_yaxes(type="log", tickformat= '.0e')
      fig.update_layout(height=950)
      return fig

  @fig_background
  def fn_spPloterror3D(error, error3d):

      loads = [200, 250, 300, 400, 480, 530]
      fig = None
      if error is not None:
        fig = uplotly.lines2d(loads, error, fig,
                                  dict(name="Error ASET",
                                       line=dict(color="red"),
                                       marker=dict(symbol="square")
                                       ),
                                  dict())

      fig = uplotly.lines2d(loads, error3d, fig,
                                dict(name="Error full 3D",
                                     line=dict(color="green")
                                     ),
                                dict())

      fig.update_yaxes(type="log", tickformat= '.0e')
      fig.update_layout(height=700,
                        showlegend=False,
                        xaxis_title='Loading [KN]',
                        yaxis_title='Error')

      return fig

  def fn_wspError(sol_list):
      error_dict = dict()
      for i, si in enumerate(sol_list):
          for di in range(3):
              x, y = putils.pickIntrinsic2D(si.data.dynamicsystem_s1.t,
                                            si.data.dynamicsystem_s1.ra,
                                            fixaxis2=dict(node=23, dim=di))
              yinterp = jnp.interp(t_wsp, x, y)
              ynastran = u_wsp[0,:,-4, di] + y[0]
              n = 10000
              error = jnp.linalg.norm((yinterp[1,:n] - ynastran[:n]) / ynastran[:n]) / len(ynastran[:n])
              label = f"M{i}x{di}"
              error_dict[label] = error

      return error_dict

  @fig_background
  def fn_wspPloterror(error):

      loads = [200, 250, 300, 400, 480, 530]
      num_modes = [5, 15, 30, 50, 100]
      ex1 = [error[f'M{i}x0'] for i in range(5)]
      ex2 = [error[f'M{i}x1'] for i in range(5)]
      ex3 = [error[f'M{i}x2'] for i in range(5)]
      fig = None
      fig = uplotly.lines2d(num_modes, ex1, fig,
                                dict(name="Error - x1",
                                     line=dict(color="red")
                                     ),
                                dict())
      fig = uplotly.lines2d(num_modes, ex2, fig,
                                dict(name="Error - x2",
                                     line=dict(color="green")
                                     ),
                                dict())
      fig = uplotly.lines2d(num_modes, ex3, fig,
                                dict(name="Error - x3",
                                     line=dict(color="black")
                                     ),
                                dict())

      fig.update_yaxes(type="log", tickformat= '.0e')
      return fig

  @fig_background
  def fn_wspPloterror3D(time, error):

      fig = None
      fig = uplotly.lines2d(time, error, fig,
                                dict(name="Error",
                                     line=dict(color="blue")
                                     ),
                                dict())

      fig.update_yaxes(type="log", tickformat= '.0e')
      fig.update_layout(
                        height=950,
                        xaxis_title='Time [s]',
                        yaxis_title='Error')
      return fig

#+end_src

**** COMMENT Plot alphas
#+begin_src python :results none :tangle ./results/plot_XRF1.py
  import numpy as np
  directory = fem4inas.PATH / "../Models/XRF1-2/Results_modes/"
  nmodes = 70
  #q = np.load("%s/q_%s.npy"%(directory, nmodes))
  omega = np.load("%s/../Results_modes/Omega_%s.npy"%(directory, nmodes))
  alpha1 = np.load("%s/../Results_modes/alpha1_%s.npy"%(directory, nmodes))
  alpha2 = np.load("%s/../Results_modes/alpha2_%s.npy"%(directory, nmodes))
  gamma1 = np.load("%s/../Results_modes/gamma1_%s.npy"%(directory, nmodes))
  gamma2 = np.load("%s/../Results_modes/gamma2_%s.npy"%(directory, nmodes))
#+end_src

#+NAME: XRF1Plot_alpha1old
#+begin_src python :results value file :exports (print export_blocks) :tangle ./results/plot_XRF1.py
  figname = f"figs/{name}.png"
  fig = px.imshow(np.abs(alpha1-np.eye(70)),
                  labels=dict(color="Absolute values"),
                  color_continuous_scale="Blues"
                  )
  fig.update_layout(coloraxis_colorbar=dict(tickfont=dict(size=16)),margin=dict(
        autoexpand=True,
        l=0,
        r=0,
        t=0,
        b=0
    ))
  fig.update_xaxes(title='Mode',
                   titlefont=dict(size=16),
                   tickfont = dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )
  fig.update_yaxes(title='Mode', tickfont = dict(size=16),
                   titlefont=dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )
  #fig.update_traces(colorbar_tickfont=dict(size=26))
  fig.write_image(f"../{figname}")
  fig.show()
  figname
#+end_src


#+NAME: XRF1Plot_alpha1
#+begin_src python :results value file :exports (print export_blocks) :tangle ./results/plot_XRF1.py

  figname = f"figs/{name}.png"
  sol_x1 = solution.IntrinsicReader("./Gust3")
  fig = px.imshow(np.abs(sol_x1.data.couplings.alpha1-np.eye(70)),
                  labels=dict(color="Absolute values"),
                  color_continuous_scale="Blues"
                  )
  fig.update_layout(coloraxis_colorbar=dict(tickfont=dict(size=16)),margin=dict(
        autoexpand=True,
        l=0,
        r=0,
        t=0,
        b=0
    ))
  fig.update_xaxes(title='Mode',
                   titlefont=dict(size=16),
                   tickfont = dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )
  fig.update_yaxes(title='Mode', tickfont = dict(size=16),
                   titlefont=dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )

  fig.write_image(f"../{figname}")
  fig.show()
  figname
#+end_src

#+NAME: XRF1Plot_alpha2old
#+begin_src python :results value file :exports (print export_blocks) :tangle ./results/plot_XRF1.py
  figname = f"figs/{name}.png"
  fig = px.imshow(np.abs(alpha2-np.eye(70)),
                  labels=dict(color="Absolute values"),
                  color_continuous_scale="Blues"
                  )
  fig.update_layout(coloraxis_colorbar=dict(tickfont=dict(size=16)),margin=dict(
        autoexpand=True,
        l=0,
        r=0,
        t=0,
        b=0
    ))
  fig.update_xaxes(title='Mode',
                   titlefont=dict(size=16),
                   tickfont = dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )
  fig.update_yaxes(title='Mode', tickfont = dict(size=16),
                   titlefont=dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )


  fig.write_image(f"../{figname}")
  fig.show()
  figname
#+end_src

#+NAME: XRF1Plot_alpha2
#+begin_src python :results value file :exports (print export_blocks) :tangle ./results/plot_XRF1.py
  #px.colors.named_colorscales()
  figname = f"figs/{name}.png"
  fig = px.imshow(np.abs(sol_x1.data.couplings.alpha2-np.eye(70)),
                  labels=dict(color="Absolute values"),
                  color_continuous_scale="Blues"
                  )
  fig.update_layout(coloraxis_colorbar=dict(tickfont=dict(size=16)),margin=dict(
        autoexpand=True,
        l=0,
        r=0,
        t=0,
        b=0
    ))
  fig.update_xaxes(title='Mode',
                   titlefont=dict(size=16),
                   tickfont = dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )
  fig.update_yaxes(title='Mode', tickfont = dict(size=16),
                   titlefont=dict(size=16)
                   # mirror=True,
                   # ticks='outside',
                   # showline=True,
                   # linecolor='black',
                   # gridcolor='lightgrey'
                   )

  fig.write_image(f"../{figname}")
  fig.show()
  figname
#+end_src

** NASTRAN data
Read data from Nastran simulations
#+begin_src python  :results none 

  <<PYTHONMODULES>>

  examples_path = pathlib.Path("../../../../examples")
  ####### SailPlane ###########
  SP_folder = examples_path / "SailPlane"
  #nastran_path = wingSP_folder / "NASTRAN/"

  op2model = op2reader.NastranReader("/Users/ac5015/pCloud Drive/Imperial/Computations/FEM4INAS/Models/SailPlane/SP400/SailPlane_MakeMatc.op2",
                                   "/Users/ac5015/pCloud Drive/Imperial/Computations/FEM4INAS/Models/SailPlane/SP400/SailPlane_MakeMatc.bdf",
                                   static=True)
  op2model = op2reader.NastranReader(SP_folder / "NASTRAN/static400/run.op2",
                                     SP_folder / "NASTRAN/static400/run.bdf",
                                   static=True)

  op2model.readModel()
  t_sp, u_sp = op2model.displacements()

  ####### wingSP ###########
  wingSP_folder = examples_path / "wingSP"
  nastran_path = wingSP_folder / "NASTRAN/"
  nas_wspl = op2reader.NastranReader(op2name=(nastran_path / "wing_109d.op2"),
                                     bdfname=(nastran_path / "wing_109b.bdf"))
  nas_wspl.readModel()
  t_wspl, u_wspl = nas_wspl.displacements()  
  # ###
  nas_wsp = op2reader.NastranReader(op2name=(nastran_path / "wing400d.op2"),
                                     bdfname=(nastran_path / "wing_109b.bdf"))
  nas_wsp.readModel()
  t_wsp, u_wsp = nas_wsp.displacements()
  ####### XRF1 ###########
  nastran_path = examples_path / "XRF1/NASTRAN/146-111/"
  nas111 = op2reader.NastranReader(op2name=(nastran_path / "XRF1-146run.op2"))
  nas111.readModel()
  t111, u111 = nas111.displacements()

  nastran_pathm = examples_path / "XRF1/NASTRAN/146-111_081"
  nas111m = op2reader.NastranReader(op2name=(nastran_pathm / "XRF1-146run.op2"))
  nas111m.readModel()
  t111m, u111m = nas111m.displacements()

  sp_error3d = jnp.load(examples_path/ "SailPlane/sp_err.npy")
  wsp_error3d = jnp.load(examples_path/ "wingSP/wsp_err.npy")

#+end_src

* COMMENT Paraview
:PROPERTIES:
:header-args:  :session (print pythonShell) :noweb yes :tangle ./results/paraview.py :eval (print Veval_blocks_run) :exports (print export_blocks) :comments both
:END:

#+begin_src python  :results none 
  # bdfdef.vtk_fromop2(bdf_file, op2_file, scale = 100., modes2plot=None)
#+end_src

* COMMENT Run UML diagrams 
:PROPERTIES:
:header-args: :mkdirp yes :eval no-export
:END:

#+Name: classes_architecture
#+begin_src plantuml :file figs/classes_architecture.png :exports (print export_blocks)
  abstract Driver {
            +pre_simulation()
            +run_cases()
    }

     class IntrinsicDriver {
             #integration: IntrinsicIntegration
             #simulation: Simulation
             #systems: [System]
             -__init__(config: Config)
             #_set_case()
             #_set_integration()
             #_set_simulation()
             #_set_systems()
     }

     class  XLoads {
             +q: [jnp.ndarray]
             +Rab: [jnp.ndarray]
             +GAFs: [jnp.ndarray]
             -__init__(config.systems.loads,
            q, Rab, GAFs)
	       +interpolation()
             +followerF()
             +deadF()
             +gravityF()
             +modalAero()
             }

     /'
      ' abstract class Integration {
      '         +run()
      ' }
      '/

     class IntrinsicIntegration {
                     + <math>phi_1, phi_2, psi_1, psi_2</math>
                     + <math>Gamma_1, Gamma_2 </math>
                     -__init__(X, Ka, Ma)		
                     +run()
                     #compute_modalshapes()
                     #compute_modalcouplings()
     }

     abstract class Simulation {
                     +systems: [System]
                     #workflow: dict[str:str]
                     -__init__(config.simulation,
                    systems, config.simulation)
                     +trigger()
                     #run_systems()
                     #post_run()
             }

     /'
      ' package Simulations {
      '         class SerialSimulation {
      '         }
      '         class ParallelSimulation {
      '         }
      '         class SingleSimulation {
      '         }
      '         class CoupledSimulation {
      '         }
      ' }
      '/

     class SerialSimulation {
     }
     class ParallelSimulation {
     }
     class SingleSimulation {
     }
     class CoupledSimulation {
     }

     abstract class System {
             +set_ic(q0)
             +solve() -> sol
             +build_solution() -> qs
     }

     class IntrinsicSystem {
            -__init__(name[str], settings:config.Dsystem,
                      fem: config.Dfem,
                      sol: solution.IntrinsicSolution)						
            -dq: callable
            -solver: callable
            +sol: obj
            #set_states()
              #set_xloading()					
            #set_generator() -> dq
            #set_solver() -> solver

     }
     class StaticSystem {
     }
     class DynamicSystem {
     }

     class ControlSystem {
     }

     class MultibodySystem {
     }

        /'
         ' Simulation <|-- SerialSimulation
         ' Simulation <|-- ParallelSimulation
         ' Simulation <|-- SingleSimulation
         ' Simulation <|-- CoupledSimulation
         '/
     /'
      ' abstract class Optimisation {
      '       +save_grads()
      '       +assemble()
      ' }
      '/

     abstract class Sollibs {
           +name()
           +pull_name()
     }
      enum dq {
  - dq_{label}
  }

  /'
   '     enum loads {
   ' - eta_{label}
   ' }
   '/
      enum args {
  - arg_{label}
  }

     'Simulation <|-- Simulations
     Simulation <|-- SingleSimulation
     SingleSimulation -- SerialSimulation 
     SerialSimulation -- ParallelSimulation
     ParallelSimulation -- CoupledSimulation					
     'Driver "1" -- "1" Integration : composition
     'Driver "1" -- "1" Simulation : composition'
     IntrinsicIntegration  -* IntrinsicDriver
     Driver <|-- IntrinsicDriver
     /'
      ' IntrinsicDriver  *-- Optimisation						
      '/
     IntrinsicDriver  *-- Simulation
     IntrinsicDriver  *- System
     System ..> Simulation
     'Integration <|-- IntrinsicIntegration
     System  <|-- IntrinsicSystem
     System  *- Sollibs
     IntrinsicSystem <|-- StaticSystem
     StaticSystem -- DynamicSystem
     DynamicSystem -- ControlSystem
     IntrinsicSystem o- XLoads
     ControlSystem -- MultibodySystem
     /'
      ' loads --* XLoads
      '/
     dq *-- IntrinsicSystem
     dq . args
#+end_src

#+Name: components_architecture
#+begin_src plantuml :file figs/components_architecture.png :exports (print export_blocks)
  skinparam linetype ortho
  [Driver] as d
  [Config] as c
  [Simulation] as si
  [Solution] as so
  [Systems] as sy
  c -r[dotted]-> d
  d -d-> so
  d -u-> si
  d -r-> sy
  si ..> sy
  so -u[dotted]-> sy
#+end_src

* Introduction
The ever-growing need for performance and operating costs reduction, together with the current push for sustainability in aviation, are driving new aircraft designs outside the conventional envelop. A particular feature are very high aspect ratio wings to minimise induced drag, which when combined with advancements in lighter materials to reduced vehicle weight, can significantly increase wing flexibility.  
In this scenario, aeroelastic analysis are expected to become critical in the very early phases of the wing design process: while the field was more important in post-design stages to ensure in-flight integrity, it now becomes paramount to capture the cross-couplings between disciplines.
In this more nonlinear landscape, the overall aerodynamic performance needs to be calculated around a flight shape with large deformations cite:&GRAY2021; the input for efficient control laws account for the steady state and nonlinear couplings cite:&Artola2021; and the loads ultimately sizing the wings are atmospheric disturbances computed in the time-domain cite:&CESNIK2014a.
This is also the case for more radical configurations that may or may not exhibit high flexibility but whose aeroelastic behaviour is more uncertain.
A more holistic approach to the design also increases the complexity of the processes exponentially, and the trade-offs and cost-benefit analysis may not be possible until robust computational tools are in-place to simulate the different assumptions.
 Certification of new air vehicles is another important aspect that requires 100,000s of load cases simulations cite:&Kier2017, as it considers manoeuvres and gust loads at different velocities and altitudes, and for a range of mass cases and configurations. This poses another challenge for new methods that aim to include new physics since they normally incur in prohibitly expensive computational times.
Lastly, the mathematical representation of the airframe, embodied in the complex Finite-Element Models (FEMs) built by organizations, encompasses a level of knowledge that is to be preserved when including the new physics mentioned above.
Those previous considerations set the goals for the current effort: 1) to be able to perform geometrically nonlinear aeroelastic analysis, 2) to work with generic FE models in a non-intrusive manner, and 3) to achieve a computational efficiency that is equivalent to present linear methods (if not faster).
Grounded on previous developments where the first two points where demonstrated cite:&PALACIOS2019, cite:&CEA2021, cite:&CEA2023 we tackle the third point herein with a new implementation that achieves remarkable computational performance.
The numerical library JAX cite:&jax2018github was leveraged to produce highly vectorised, automatically differentiated routines that are managed by a modular, object-oriented approach in Python. The power of JAX for scientific computation has been proved recently in fluid dynamics cite:&BEZGIN2023 and solid mechanics cite:&XUE2023 applications. We add to those an aeroelastic solution to enhance already built models for linear loads analysis. This aligns with current efforts to build robust methods that incorporate nonlinear effects to complex 3-D FEMs, via stick models cite:&RISO2023 or other modal-based methods cite:&DRACHINSKY2022.
\\
Our proposed method has two main inputs for the analysis: a linear (arbitrarily complex) FE model, and aerodynamic influence coefficient matrices that provide the mapping between FE states and the corresponding aerodynamic forces (either in modal or in physical coordinates). The latter are obtained herein from the Doublet Lattice Method (DLM) and a rational function approximation (RFA) cite:&ROGER1975 to transform to the time domain. We have also presented a more efficient data-driven approach that circumvents the additional states added by the RFA in cite:&PALACIOS2023b and the approach would also be suitable for more accurate Computational Fluids Aerodynamics (CFD). Using the 3D FE model, a skeleton-like substructure along the main load paths is derived, on which modal shapes and nonlinear couplings are evaluated in intrinsic variables (velocities and strains). They conform a basis of a Galerkin-projection of the geometrically-nonlinear 1D domain after which the projected equations are solved in time-domain. Advantages of the approach are its direct and accurate map between the 3D and 1D domains, as it only requires of a modal condensation that is already available in many industrial aeroelastic models to link the structural model to the aerodynamic loading.
This is unlike stick models which need of various post-processing steps to build the equivalent stiffness and mass models.
Furthermore, we show how the full 3D solution using the nonlinear 1D solution is computed to a good accuracy by reconstructing the cross-sectional elements and applying a Radial Basis Function (RBF) interpolation to the remaining nodes in the domain.
A well established formulation effectively applied to industrial-scale aeroelastic models and now combined with a highly vectorised implementation in JAX results in an extremely efficient nonlinear aeroelastic solver. The overall procedure has been implemented in what we have named as \emph{Nonlinear Modal Reduced Order Model} (NMROM). 
\\
The structure of the rest of the paper is as follows. Sec. [[Theory and implementation]] presents a summary of the mathematical description that conforms the backbone behind the computational implementation of \texttt{FEM$_4$INAS} (Finite-Element-Models for Intrinsic Nonlinear Aeroelastic Simulations), the high performance software for aeroelasticity we have built. Sec. [[Results]] shows the verification cases that cover the static and dynamic structural response of of a simplified aircraft model, and the aeroelastic response to gusts of a full aircraft configuration. The improvements in performance are highlighted in all of the examples. 
Lastly, sec. [[Conclusions]] summarises the the achievements and further developments planned for future work.

* Theory and implementation
In this section we briefly describe the backbone theory of the proposed methods for nonlinear aeroelasticity modelling as continuation of the work in cite:&CEA2021, cite:&CEA2023.
Next we described the main formulation that leads to a geometrically nonlinear enhancement of generic aircraft models and its integration into an aeroelastic framework, along with some implementation details.
** Nonlinear aeroelastic system
We start with a global FE model of the airframe as illustrated in Fig..

#+NAME: workflow
#+CAPTION: Workflow of the solution process
#+ATTR_LATEX: :width 1.\textwidth 
[[./figs/workflowAIAA2.pdf]]
It is common practice for large-scale aeroelastic models to feature lumped masses along a load path axis that are attached to their corresponding cross-sectional nodes via interpolation elements.
With those characteristics a reduced model can be obtained from a static or dynamic condensation that captures well the stiffness and inertia properties in the condensed matrices, $\pmb{K}_a$ and $\pmb{M}_a$. The eigenvalue solution of the FEM yields the modal shapes, $\pmb \Phi_0$, and frequencies $\pmb \omega$. The dynamics of this reduced model are described by a system on nonlinear equations [[cite:&HODGES2003]] written in material velocities, $\bm x_1$,  and stresses, $\bm x_2$, as state variables. A modal expansion of those is a key step in seamlessly mapping the global FEM into the nonlinear description. The intrinsic modes are introduced and the projection of the state variables is such  $\pmb{x}_1 = \pmb{\Phi}_1\pmb{q}_1$ and $\pmb{x}_2 = \pmb{\Phi}_2\pmb{q}_2$.
A resulting set of four intrinsic modal shapes are directly linked to the displacement modal shapes coming from the global FEM:

1. Velocity modes, $\bm \Phi_1 = \bm \Phi_0$, which follow after the linear relation with displacements: $\bm x_1 = \dot{\bm x}_0$, $\bm \Phi_1 \bm q_1 = \bm \Phi_0 \dot{\bm q}_0$.

2. Momentum modes, $\bm \Psi_1 = \bm M_a \bm \Phi_0$. Note from this definition that for arbitrary distributed mass models, the dynamic condensation technique will produce a fully-populated mass matrix, and the various couplings will be captured after the matrix multiplication, as opposed to simpler models that require a lumped mass values at the nodes. 

3. Force/moment modes, $\bm \Phi_2 = \mathcal{S}(\bm K_a \bm \Phi_0)$, represent the internal stresses in the structure as the sum, $\mathcal{S}$, of equilibrium forces and moments produced by the modal deformations. Note that if $\bm{\mathfrak{f}} = \bm K_a \bm \Phi_0|^{1-3}$ are the internal forces and $\bm{\mathfrak{m}} = \bm K_a \bm \Phi_0|^{3-6}$ the internal moments, the moments produced by the internal forces also need to be taken into account: $\bm \Phi_2|^{3-6} = \mathcal{S}(\bm{\mathfrak{m}} + \bm{r}_{\frac{1}{2}} \times \bm{\mathfrak{f}})$. Results are presented in the mid-point, $\bm{r}_{\frac{1}{2}}$, between nodes because more information cannot be extracted in terms of linear stresses from one node to the other.
   
4. Strain modes, $\bm \Phi_2 = -\bm \Phi_{0d} + \pmb{E}^{\top}\bm \Phi_{0m}$, with $\bm \Phi_{0d}$ the approximate derivative along $s$: $\bm \Phi_{0d}^i = \frac{\bm \Phi_0^{i+1} - \bm \Phi_0^{i}}{\Delta s_i}$; and $\bm \Phi_{0m} = \frac{\bm \Phi_0^{i+1} + \bm \Phi_0^{i}}{2}$, the displacement modal shape in between nodes. $\pmb{E}^{\top}$ is the constant matrix defined below.

After the intrinsic modes have been computed, a dynamic system is obtained after a Galerkin projection of the equations of motion \cite[Ch. 8]{PALACIOS2023}:

\begin{equation}
\label{eq2:sol_qs}
\begin{split}
\dot{\pmb{q}}_{1} &=  \pmb{\omega} \odot  \pmb{q}_{2} - \pmb{\Gamma}_{1} \pmb{:} \left(\pmb{q}_{1} \otimes \pmb{q}_{1} \right) - \pmb{\Gamma}_{2} \pmb{:} \left( \pmb{q}_{2} \otimes  \pmb{q}_{2} \right) + \bm{\eta}  \\
\dot{\pmb{q}}_{2} &= -\pmb{\omega} \odot \pmb{q}_{1} + \pmb{\Gamma}_{2}^{\top} \pmb{:} \left( \pmb{q}_{2} \otimes  \pmb{q}_{1} \right)
\end{split}
\end{equation}
where $\odot$ is the  Hadamard product (element-wise multiplication), $\otimes$ is the tensor product operation and $\pmb{:}$ is the double dot product[fn:1: The double dot product represents a contraction of the last two indexes of the first tensor with the first two indexes of the second one; it however needs further specification as two alternative definitions can be adopted and here we opt for the following: \(\pmb{a} \pmb{:} \pmb{b} = a_{..ij} b_{ij..} \). This has implications on the definition of the transpose of \(\bm{\Gamma}_2 \) in the second equation since for high order tensors multiple transpose operators can be defined. Consistency is achieved by ensuring the dot product operation satisfies the following: \( \pmb{x} \cdot \left(\bm{\Gamma} \pmb{:} \left( \pmb{y} \otimes \pmb{z} \right)  \right) = \pmb{y} \cdot \left(\bm{\Gamma}^{\top} \pmb{:} \left(\pmb{z} \otimes \pmb{x} \right)  \right) \), which leads to the transpose of the third order tensor, \( \bm{\Gamma} = \Gamma^{ijk} \), as \( \bm{\Gamma}^{\top} = \Gamma^{jki} \).].
The form of the equations in compact tensorial notation is in fact the way they have been implemented and vectorised. This description is geometrically-exact, with nonlinearities encapsulated in the modal couplings of the third-order tensors $\pmb{\Gamma}_{1}$ and $\pmb{\Gamma}_{2}$ (the former introduces the gyroscopic terms in the dynamics and the latter introduces the strain-force nonlinear relation). $\pmb{\eta}$ is the modal projection of the external forcing terms. They are computed as integrals along the load-paths as an inner product: $\langle \pmb{u},\pmb{v}  \rangle = \int_\Gamma \pmb{u}^\top \pmb{v} ds$, for any $\pmb{u}\in\mathbb{R}^6$ and $\pmb{v}\in\mathbb{R}^6$: 
# ?? messy in tensorial notation (computation is via vmap)
\begin{align}\label{eq2:gammas12}
\Gamma_{1}^{ijk} & = \langle \pmb{\Phi}_{1i}, \lo_1(\pmb{\Phi}_{1j})\pmb{\psi}_{1k}\rangle, \nonumber \\
\Gamma_{2}^{ijk} & = \langle \pmb{\Phi}_{1i}, \lo_2(\pmb{\Phi}_{2j})\pmb{\psi}_{2k}\rangle,  \\
\eta_{i} & = \langle \pmb{\Phi}_{1i}, \pmb{f}_1\rangle  \nonumber
\end{align}
The linear operators, $\lo_1$, $\lo_2$, and the matrix $\pmb{\mathsf{E}}$ are defined as,
\begin{equation}
\lo_1 (\pmb{x}_1)  = \begin{bmatrix} \tilde{\pmb{\omega}} & \pmb{0} \\ \tilde{\pmb{\ve}} & \tilde{\pmb{\omega}} \end{bmatrix} \hspace{0.5cm} ; \hspace{0.5cm}
\lo_2 (\pmb{x}_2)=  \begin{bmatrix} \pmb{0} & \tilde{\pmb{f}} \\ \tilde{\pmb{f}} & \tilde{\pmb{m}} \end{bmatrix} \hspace{0.5cm} ; \hspace{0.5cm}  \pmb{\mathsf{E}}= \lo_1 \begin{pmatrix} \begin{bmatrix} 1 \\ \bm 0_5 \end{bmatrix} \end{pmatrix}
\end{equation}

The full aeroelastic solution is attained extending Eq. \eqref{eq2:sol_qs} with gravity forces, $\bm{\eta}_g$, aerodynamic forces and gust disturbances, $\bm{v}_g$. Control states can also be included [[cite:&CEA2021a]], but they are not necessary for this work. For a set of reduced frequencies and a given Mach number, the DLM (or a higher fidelity aerodynamic method) yields the Generalised Aerodynamic Forces (GAFs). The current implementation uses Roger's rational function approximation to those GAFs, which results in the follower modal forces:

\begin{equation}\label{eq3:eta_full}
\begin{split}
\bm{\eta}_a = \tfrac12\rho_\infty U_\infty^2 & \left(\vphantom{\sum_{p=1}^{N_p}} \pmb{\mathcal{A}}_0\bm{q}_0 +\frac{c}{2U_\infty}\pmb{\mathcal{A}}_1 \bm{q}_1 +\left(\frac{c}{2U_\infty}\right)^2 \pmb{\mathcal{A}}_2\dot{\bm{q}}_1   \right.  \\
& \left. + \pmb{\mathcal{A}}_{g0}\bm{v}_g +\frac{c}{2U_\infty}\pmb{\mathcal{A}}_{g1} \dot{\bm{v}}_g +\left(\frac{c}{2U_\infty}\right)^2 \pmb{\mathcal{A}}_{g2}\ddot{\bm{v}}_g +  \sum_{p=1}^{N_p} \pmb{\lambda}_p  \right) 
\end{split}
\end{equation}
The coupling of the structure and aerodynamic equations combined with the aerodynamic lags gives the final ODE system: 

\begin{equation}
\label{eq2:sol_qs}
\begin{split}
\dot{\pmb{q}}_{1} &=  \hat{\pmb{\Omega}}  \pmb{q}_{2} - \hat{\pmb{\Gamma}}_{1} \pmb{:} \left(\pmb{q}_{1} \otimes \pmb{q}_{1} \right) - \hat{\pmb{\Gamma}}_{2} \pmb{:} \left( \pmb{q}_{2} \otimes  \pmb{q}_{2} \right) + \hat{\bm{\eta}}  \\
\dot{\pmb{q}}_{2} &= -\pmb{\omega} \odot \pmb{q}_{1} + \pmb{\Gamma}_{2}^{\top} \pmb{:} \left( \pmb{q}_{2} \otimes  \pmb{q}_{1} \right) \\
\dot{\bm{\lambda}}_{p} &= \hat{\bm{\mathcal{A}}}_{p+2}\pmb{q}_{1}
                       + \hat{\bm{\mathcal{A}}}_{p+2}\dot{\pmb{v}}_g
                       -\frac{2U_\infty\gamma_p}{c}\bm{\lambda}_{p}
\end{split}
\end{equation}
in this system the aerodynamic added-mass effect has been moved to the left hand side such that $\bm{\mathrm{A}}_2 = (\pmb{I} - \frac{\rho c^2}{8}\pmb{\mathcal{A}}_2)^{-1}$, and it couples all DoF in $\pmb q_1$. Thus the natural frequency terms become $\hat{\pmb{\Omega}} = \bm{\mathrm{A}}_2 \textup{diag}(\pmb{\omega})$ and the nonlinear terms $\hat{\pmb{\Gamma}} = \bm{\mathrm{A}}_2 \bm{\Gamma}$. The effect of all external forces, aero, $\bm{\eta}_a$, gravity, $\bm{\eta}_g$, and others, $\bm{\eta}_f$, are combined in such that $\hat{\bm{\eta}} = \bm{\mathrm{A}}_2 \left( \left( \bm{\eta}_a - \frac{\rho c^2}{8} \pmb{\mathcal{A}}_2\dot{\bm{q}}_1 \right) +  \bm{\eta}_g + \bm{\eta}_f \right)$.
The aerodynamic matrices $\hat{\bm{\mathcal{A}}}_{p+2}$ have also been scaled accordingly.
\\
Once the nonlinear solution of the condensed model is computed, the corresponding full 3D state is calculated via a two postprocessing steps: firstly the displacements of the cross-sectional nodes linked to the reduced model via the interpolation elements are computed using the positions and rotations of the latter; secondly, Radial Basis Functions (RBFs) kernels are placed on those cross-sections, thus building an intermediate model that is utilised to extrapolate the positions of the remaining nodes in the full model.
This paves the way for a broader multidisciplinary analysis where CFD-based aerodynamic loading could be used for the calculation of the nonlinear static equilibrium, and also with the transfer of the full deformed state back to the original FE solver to study other phenomena such as buckling. 
** Aircraft trim flight
A very important part in the calculation of dynamic loads is including the rigid body DoF in the analysis and thus having the aircraft in a state of equilibrium between lift, gravity and control devices forces, i.e. trimmed. This implies a solution to the following nonlinear system of equations: 
\begin{equation}
\begin{split}
\pmb F(\pmb{q}_{2}, \pmb{q}_{0}, \pmb{q}_{c}) &=  \pmb{\omega} \odot  \pmb{q}_{2}  - \pmb{\Gamma}_{2} \pmb{:} \left( \pmb{q}_{2} \otimes  \pmb{q}_{2} \right) + \tfrac12\rho_\infty U_\infty^2  \left( \pmb{\mathcal{A}}_0\bm{q}_0 + \pmb{\mathcal{A}}_{0r}\bm{q}_{0r} + \pmb{\mathcal{A}}_c\bm{q}_c \right) + \bm{\eta}_g  = \bm 0 \\
\bm{q}_0 &= \bm{q}_2 \odot \pmb{\omega}^{-1} \\
\bm A_r\bm{q}_{0r} &= \bm 0
\end{split}
\end{equation}

The simplest case would be a trim where only two rigid-body DoF are allowed, the pitch $q_{0\alpha}$ and the plunge, $q_{0h}$; $q_{0h}$ is set to 0 and $q_{0\alpha}$ is part of the variables to be calculated along with a single tail elevator deflection, $q_c$ and the elastic strain modal DoF, $\bm q_{2}$. A somewhat more advanced trim would also allow a forward direction of flight and include thrust as another control state variable. However for this a good estimate of the aerodynamic drag forces would be required, which is not the case for the DLM.  
** Computational implementation and benchmarks
The main contribution of this work is a new computational implementation that achieves accelerations of over 2 orders of magnitude with respect to its predecessor[fn:2::Both the new implementation and the examples of this paper can be found at https://github.com/ACea15/FEM4INAS.]. In addition, a highly modular, flexible architecture based on software design patterns has been put in place, which was further described in cite:&CEA2024. Moreover, the resulting nonlinear aeroelastic framework is suitable for modern hardware architectures as will be demonstrated herein, and the computation of sensitivities via algorithmic differentiation (AD) across solvers has been implemented in [].
The key enabler was moving from standard Python to a highly vectorised, JAX-based numerical implementation. JAX is a Python library designed for high-performance numerical computing with focus on machine learning activities \cite{jax2018github}. This library is developed and maintained by Google research team. It combines XLA (accelerated linear algebra) and Autograd, the former being a compiler that optimises models for different hardware platforms, the latter is an Automatic Differentiation (AD) tool in Python. 
Moreover, its extensible system of composable function transformations provides a set of important features for Computational Science as illustrated in Fig. \ref{fig:JAX-overview}. For instance, the vmap function allows for complex vectorisation operations and the pmap function for Single-Program Multiple-Data (SPMD) parallelisation. Both forward and reverse mode automatic differentiation are supported. Finally the just-in-time compilation (jit) relies on the XLA engine to compile and execute functions on CPUs but also on accelerators such as GPUs and TPUs, offering a versatile solution for seamlessly connecting the software to various types of hardware without requiring extra CUDA code, or a Domain Specific Language (DSL).

#+begin_export latex
\begin{figure}[htbp]
\centering
\includegraphics[width=0.35\textwidth]{./figs/jaxlogo2.pdf}
\caption{\label{fig:JAX-overview} JAX capabilities for modern scientific computing}
\end{figure}
#+end_export
The tensor structure of the main components in the solution process is illustrated in Fig. [[fig:tensors]] in the sequential order they are computed. The discretization of the problem comprises $N_n$ number of condensed nodes, $N_m$ modes used in the reduced order model and $N_t$ time steps in the solution (if the problem is static, $N_t$ represents a ramping load stepping scheme). The intrinsic modes, $\Phi, \Psi  \in \mathbb{R}^{N_m \times 6 \times N_n}$ are computed from the eigenvalue solution and the coordinates $\bm X_a \in \mathbb{R}^{3 \times N_n}$ of the active nodes. 
The nonlinear couplings, $\Gamma \in \mathbb{R}^{N_m \times N_m \times N_m}$ are calculated next, from which the system in Eq. \ref{eq2:sol_qs} is assembled and solved to yield the solution states $\bm q \in \mathbb{R}^{N_s \times N_t}$. Local velocities and internal forces,  $\bm X_{1,2} \in \mathbb{R}^{N_t \times 6 \times N_n}$ are computed as a product of the corresponding instrinsic modes and states, and their integration leads to the position tensor with similar structure.

#+NAME: fig:tensors
#+CAPTION: Main data components in the sequencial solution process
#+ATTR_LATEX: :width 1\textwidth 
[[file:figs/tensors.pdf]]

An simplified version of the intrinsic modes algorithm is given in [[alg:modes]].  

#+NAME: alg:modes
\begin{algorithm}[h!]
\DontPrintSemicolon
\SetKwInOut{Input}{input}
\SetKwInOut{Output}{output}
\Input{FEM and eigenvalue solution: $\bm X, \bm K_a, \bm M_a, \bm{\Phi}_0, \bm \omega$}
\Output{Intrinsic modal shapes}
\Begin{
\texttt{import jax.numpy as jnp \;
 \BlankLine
$\bm X_m$ $\leftarrow$ jnp.matmul($X_a^{\top}$, $M_{avg}$)
\Comment{Get mid-node coordinates} \;
$\bm X_d$ $\leftarrow$ jnp.matmul($X_a$, $M_{diff}$)
\Comment{vector difference between contigous nodes} \;
$\Delta_s$ = jnp.linalg.norm($X_d$, axis=0) \;
$\bm{\Phi}_1$ $\leftarrow$ $\bm{\Phi}_0$ \;
$\bm{\Phi}_{1m}$ $\leftarrow$ jnp.tensordot($\bm{\Phi}_1$, $M_{avg}$, axes=(2, 0))
\Comment{Velocity modes at mid-node locations}\;
$\bm{\psi}_{1v}$ $\leftarrow$ jnp.matmul($\bm M_a$, $\bm{\Phi}_0$)
\Comment{Momenta modes}\;
$\bm{\psi}_{1}$ $\leftarrow$ reshape\_modes($\bm{\psi}_{1v}$, Nmodes, Nnodes) \Comment{Nmx6xNn}  \;
$\bm{\Phi}_{2fv}$ $\leftarrow$ jnp.matmul($\bm K_a$, $\bm{\Phi}_0$)
\Comment{Internal forces and moments associated to modal shapes (Nm$\times$6$\times$Nn)} \;
$\bm{\Phi}_{2fv}$ $\leftarrow$ reshape\_modes($\bm{\Phi}_{2fv}$, Nmodes, Nnodes) \;
$\bm{\Phi}_{2f}$ $\leftarrow$ jnp.tensordot($\bm{\Phi}_{2fv}$, $\bm M_{paths}$, axes=(2, 0)) \Comment{Sum of internal forces and moments (Nm$\times$6$\times$Nn)} \;
$\bm X_3$ $\leftarrow$ coordinates\_difftensor($X$, $X_m$)
\Comment{mid-node vector to every other node in the reduced model (3$\times$Nn$\times$Nn}) \;
$\bm X_{3tilde}$ $\leftarrow$ -axis\_tilde($\bm X_3$)
\Comment{Cross-product in matrix form (6$\times$6$\times$Nn$\times$Nn)} \;
$\bm{\phi}_{2mn}$ $\leftarrow$ moment\_force($\bm{\phi}_{2v}$, $\bm X_{3tilde}$) \Comment{Moment distribution due to nodal forces (Nm$\times$6$\times$Nn$\times$Nn)} \;
$\bm{\phi}_{2m}$ $\leftarrow$ moment\_contraction($\bm{\phi}_{2mn}$, $M_{paths}$) \Comment{Sum of internal moments due to forces (Nm$\times$6$\times$Nn)} \;
$\bm{\Phi}_2$ $\leftarrow$ $\bm{\Phi}_{2f}$ + $\bm{\phi}_{2m}$
\Comment{Total value internal forces and moments}\;
$E_{\phi}$ $\leftarrow$ ephi(E, $\bm \phi_{1m}$)
\Comment{E times } \;
$\bm \phi_{1d}$ $\leftarrow$  jnp.tensordot($\bm{\Phi}_1$, $\bm M_{diff}$, axes=(2, 0))
\Comment{Velocity mode variation across nodes (Nm$\times$6$\times$Nn)}\;
$\bm{\psi}_2$ $\leftarrow$ - $\bm \phi_{1d} / \Delta_s + E_{\phi}$\;
\BlankLine
}
    }
\caption{Intrinsic modal shapes implementation in JAX}
\end{algorithm}

The various functions in the algorithm make heavy use of JAX $\texttt{vmap}$ function to vectorise the contraction and expansion operations. For instance, to yield the internal moments associated to each node due to the internal forces, the function \(\texttt{moment\_force}\) is cast in [[alg:internalmoments]]:

#+NAME: alg:internalmoments
\begin{algorithm}[h!]
% Set Function Names
\SetKwFunction{FSum}{moment\_force}
 
% Write Function with word ``Function''
  \SetKwProg{Fn}{Function}{:}{}
  \Fn{\FSum {$\bm{\phi}_{2v}$, $\bm X_{3tilde}$}}{
\texttt{f1 $\longleftarrow$ vmap(lambda u, v: jnp.tensordot(u, v, axes=(1,1),
      in\_axes=(None, 2), out\_axes=2))  \;
f2 $\longleftarrow$ vmap(f1, in\_axes=(2, 3), out\_axes=3)  \;
f3 $\longleftarrow$ f2($\bm{\phi}_{2v}$, $\bm X_{3tilde}$)   \Comment{Nm$\times$6$\times$Nn$\times$Nn} \;
\BlankLine
}
        \KwRet f3\;
  }
\caption{Internal moments due to internal forces}
\end{algorithm}

The function created by $\texttt{vmap}$ loops the inputs through the axes specified in $\texttt{in\_axes}$, piping the resulting vector to the function given to $\texttt{vmap}$ as the first argument, and the outputs are saved across the axes given in $\texttt{out\_axes}$. 
With the intrinsic modes computed, the algorithm to compute the nonlinear couplings in \ref{eq2:gammas12} is shown below:

\begin{algorithm}[h!]
\DontPrintSemicolon
%\KwData{$G=(X,U)$ such that $G^{tc}$ is an order.}
%\KwResult{$G’=(X,V)$ with $V\subseteq U$ such that $G’^{tc}$ is an interval order.}
\SetKwInOut{Input}{input}
\SetKwInOut{Output}{output}
\Input{Intrinsic modal shapes calculation}
\Output{Intrinsic nonlinear modal couplings $\bm{\Gamma}_1$ and $\bm{\Gamma}_2$}
\Begin{
 \BlankLine
\texttt{f1 $\longleftarrow$ vmap(lambda u, v: jnp.tensordot($\mathcal{L}_1$(u), v, axes=(1, 1),
      in\_axes=(1, 2), out\_axes=2))  \Comment{iterate through nodes} \;
f2 $\longleftarrow$ vmap(f1, in\_axes=(0, None), out\_axes=0)  \;
\bm{L}_1 $\longleftarrow$ f2($\bm \Phi_1$, $\bm \psi_1$)   \Comment{Nm$\times$6$\times$Nm$\times$Nm} \;
$\bm{\Gamma}_{1}$ $\longleftarrow$  jnp.einsum(isn,jskn$\rightarrow$ijk, $\bm \Phi_1$, $\bm{L}_1$) \;
\BlankLine
f3 $\longleftarrow$ vmap(lambda u, v: jnp.tensordot($\mathcal{L}_2$(u), v, axes=(1, 1),
      in\_axes=(1, 2), out\_axes=2))  \Comment{iterate nodes} \;
f4 $\longleftarrow$ vmap(f3, in\_axes=(0, None), out\_axes=0)  \;
\bm{L}_2 $\longleftarrow$ f4($\bm \Phi_2$, $\bm \psi_2$)   \Comment{Nm$\times$6$\times$Nm$\times$Nm} \;
$\bm{\Gamma}_2$ $\longleftarrow$  jnp.einsum(isn,jskn,n$\rightarrow$ijk, $\bm{\Phi}_{m1}$, $\bm{L}_2$, $\Delta_s$) $ \;
\BlankLine
}
    }
\caption{Nonlinear Couplings implementation in JAX}
\label{alg:couplings}
\end{algorithm}

The new capabilities come at the expense of a higher restriction in the way the code is written. Compilation and transformations in JAX only work for functionally pure programs, which pushes the software to comply with a nonconventional functional paradigm. Some of these characteristics are pure functions, i.e. functions that have no side effects, input/output stream management needs to be placed outside the numerical algorithms, inmutability of arrays. These very constraints allow to achieve the capabilities describe above via the many abstractions implemented internally in the library. An example of this restrictions is the effectively impossibility of jit-compile conventional for loops. 
[example of jax scan for]
# The challenge after the algorithms have been implemented appropriately is to manage a generic software. Thus a mixed approach has been employed for this whereby numerical algorithms are written using functional programming but the flow of execution is managed using an object oriented approach that focus on modularity and extensibility.
\\
All the cases presented are part of a Test suite that has been built as a critical step for long term software management.
They serve as a demonstration of the approach's ability to deal with geometric nonlinearities, the accuracy of the solvers when compared to full FE simulations, and the computational gains that can be achieved. Table \ref{table:benchmarks} introduces the cases that are discussed below with the improvements in performance from the new implementation.
All computations are carried out on a single core of the same CPU, an i7-6700 with 3.4 GHz clock speed. [update with GPUs]
The old code based on Python was not optimised and made heavy use of for-loops instead of vectorised operations. These results convey the potential improvements in scientific software when paying attention to the implementation solely. Besides of this, it is also worth remarking the very short times in the solutions, which is also largely due to a formulation in modal space that naturally leads to reduced order models and easily caters for vectorised operations.
[Table needs updating with GPUs performance and Nastran times]
Six examples are presented, first three are static cases and the other three are dynamic cases with the last one being a time domain aeroelastic response to a gust.
The model complexity is also augmenting starting with beam model to then move to a representative aircraft of medium complexity, the so-called Sail Plane, and finally considering an industrial-scale aircraft, the XRF1 model.
Note the longer dynamic simulation of the Sail Plane wing compared to the XRF1 gust response: despite i.e. more operations in the solution time step, driven the largest eigenvalue in the solution, was much smaller in the Sail Plane results 
#+begin_src latex
    \begin{table}[h!]
      \begin{center}
        \caption{Simulation times for cases part of the test suite}
        \label{table:benchmarks}
        \begin{tabular}{lrll}
          \toprule
          Model & Time [s] & Time (old) & Speed-up\\[0pt]
          \midrule
          ArgyrisCantilever (7 load-cases) & 7.8 & 9m:44s & $\times$74.9\\[0pt]
          Simo45Beam (11 load cases) & 7.1 & 1m:45s & $\times$14.8\\[0pt]
          SailPlane (6 load cases) & 8.1 & 56.3s & $\times$6.95\\[0pt]
          ShellBeam (Dynamic, 20 sec. with 85 modes) & 34.3 & 6h:16m:53s & $\times$659.3\\[0pt]
          SailPlaneWing (Dynamic, 15 sec. with 50 modes) & 10.88 & 2h:18min:35s & $\times$764.2\\[0pt]
          XRF1-Gust (Dynamic Aeroelastic, 15 sec. with 70 modes) & 17.4 & 1h:38min:28s & $\times$339.5\\[0pt]
          \bottomrule
                &  &  & \\[0pt]
        \end{tabular}
      \end{center}
    \end{table}
#+end_src

** COMMENT Software design
\textit{"Supporting state-of-the-art AI research means balancing rapid prototyping and quick iteration with the ability to deploy experiments at a scale traditionally associated with production systems."}.
Jax target inside DeepMind would also be desirable in a scientific research environment. It however entails a good amount of labour and expertise into the field of software design, whose payoffs are only realisable in the long term.    
# To what extent this is a feasible target is somehow unknown due to current constraints, but nonetheless a sensible objective to have in consideration when developing new tools.
Fig. [[components_architecture]] shows a high-level view of this first version of the software in terms of components. A Configuration component builds the necessary settings for the simulation, including geometric coordinates, load-paths information.
The Configuration is injected into the Driver component that initialises the Simulation component, the Systems and the Solution component, after which it triggers the simulation. The Systems are run as managed by the Simulation component and encapsulate the various equations to be solved (time marching, nonlinear static equilibrium or stability for instance). The solution component acts as a memory-efficient container of the new data to be kept as the solution process advances, and it is responsible for loading (from a previous simulations) and writing solution data too. It is thus passed to every System. 
 
#+NAME: components_architecture
#+CAPTION: Components architecture diagram
#+ATTR_LATEX: :width 0.4\textwidth 
#+RESULTS: components_architecture
[[file:figs/components_architecture.png]]

Fig. [[classes_architecture]] shows a lower view of the abstractions, interfaces between classes and how they interact via their public methods. The inputs to the program may be given via a .yaml file or a python dictionary in memory. The starting point in the main file is the initialisation of the driver corresponding to the mathematical description to be solved (so far only the intrinsic modal is available, Eqs. \eqref{eq3:intrinsic_full_aeroelastic}). The intrinsic driver computes (or loads), as a pre-simulation step, the intrinsic modal shapes and nonlinear tensors from the linear stiffness and mass matrices and the nodal coordinates; then it runs the cases by triggering the simulation class. This class is responsible for managing how the systems are being run (in serial, in parallel, or even in a coupling process between systems). From the configuration settings, the intrinsic system loads the equations (dqs), the external loads in Eqs. \eqref{eq2:sol_qs}, such as point-forces, gravity or modal aerodynamic GAFs. Various libraries can be chosen to either solve the static equations or march in time if the solution is dynamic; importantly, the JAX-based Diffrax library has been integrated and supports ordinary, stochastic and controlled equations, with many solvers and multiple adjoint methods which could be used in an optimization framework. This initial layout of the software is expected to evolve and to be consolidated as the software matures. 

* Results

* Conclusions
#+begin_comment
This paper has presented a modal-based description that incorporates geometrically nonlinear effects due to structural slenderness onto generic FE models initially built for linear analysis. 
While the underlying theory had already been introduced, a new implementation has been put in-place for both high-performance and software modularity, with the numerical library JAX as the engine powering the computations. 

Geometrically nonlinear aeroelastic framework: Follower aerodynamic forces, geometric stiffening, coupling
between elastic and rigid-body DoF...
Seamlessly compatible with industrial (linear) aeroelastic models.
Time-domain computations in near real-time with two orders of magnitude accelerations compared to
conventional implementations.
Fully differentiated code via Algorithmic Differentiation (AD).
Capable on running on modern architectures, e.g. GPUs.

An important remark about these computations is that the gusts have been input in the reference configuration. Undergoing updates in the implementation aim to update the gust intensity at each panel with its normal component. This will account for the added nonlinearity of the changing in downwash.

Furthermore, a relevant amount of test cases accompany the software, of which a subset has been presented to illustrate the main capabilities that may range from a canonical beam undergoing extremely large deformations to a full-vehicle nonlinear aeroelastic response. A major highlight are the computational accelerations experimented which reach two orders of magnitude in dynamic analysis. This is due to the heavy use of vectorisation and just-in-time compilation.  
The ability to recover the full 3D state from the NMROM was also demonstrated and compared to the solution in NASTRAN.  
\\
In the immediate future two objectives are foreseen with this implementation: first, a further assessment of the computational gains by running the examples presented here on GPUs; second and more important, the propagation of derivatives in the solution process via the Algorithmic Differentiation tool embedded in JAX. This will complete a fully differentiated aeroelastic framework that can run very efficient in modern software architectures while enhancing traditional FE models that can be very complex by construction but lack the physics of geometrically nonlinear effects. After that, increasing the fidelity in the load calculations to consider CFD-based aerodynamics would be an additional necessary step in order to achieve a more accurate nonlinear aeroelastic methodology. 
#+end_comment

bibliographystyle:plain
# bibliography:/home/acea/Documents/Engineering.bib
bibliography:~/Documents/Engineering.bib

