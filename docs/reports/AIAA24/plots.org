* House keeping  :noexport: 
#+begin_src elisp :results none :tangle no :exports none
  (add-to-list 'org-structure-template-alist
  '("sp" . "src python :session (print pythonShell)"))
  (add-to-list 'org-structure-template-alist
  '("se" . "src elisp"))
  (setq org-confirm-babel-evaluate nil)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex --syntex=1 -interaction nonstopmode' -pdf -bibtex -f %f"))
  ;; (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))
  (pyvenv-workon "fem4inas")
  (require 'org-tempo)
  ;; Veval_blocks -> eval blocks of latex
  ;; Veval_blocks_run -> eval blocks to obtain results
  (setq Veval_blocks "no-export") ;; yes, no, no-export 
  (setq Veval_blocks_run "no-export")
  (setq pythonShell "py1org")
  ;; export_blocks: code, results, both, none
  (setq export_blocks  "results")  
#+end_src

* Load modules :noexport: 
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes  :eval (print Veval_blocks) :exports (print export_blocks) :comments both :tangle ./results/run.py
:END:

#+begin_src python  :results none 
  import plotly.express as px
  import pyNastran.op4.op4 as op4
  import matplotlib.pyplot as plt
  import pdb
  import pathlib
  import datetime
  import os
  import shutil
  REMOVE_RESULTS = True
  #   for root, dirs, files in os.walk('/path/to/folder'):
  #       for f in files:
  #           os.unlink(os.path.join(root, f))
  #       for d in dirs:
  #           shutil.rmtree(os.path.join(root, d))
  # 
  if os.getcwd().split('/')[-1] != 'results':
      if not os.path.isdir("./figs"):
          os.mkdir("./figs")
      if REMOVE_RESULTS:
          if os.path.isdir("./results"):
              shutil.rmtree("./results")
      if not os.path.isdir("./results"):
          print("***** creating results folder ******")
          os.mkdir("./results")
      os.chdir("./results")
  examples_folder = pathlib.Path.cwd() / "../../../../examples"    
#+end_src

#+NAME: PYTHONMODULES
#+begin_src python  :results none  :tangle ./results/run.py
  import plotly.express as px
  import pickle
  import jax.numpy as jnp
  import jax
  import pandas as pd
  from plotly.subplots import make_subplots
  import numpy as np
  import fem4inas.preprocessor.configuration as configuration  # import Config, dump_to_yaml
  from fem4inas.preprocessor.inputs import Inputs
  import fem4inas.fem4inas_main
  import fem4inas.plotools.uplotly as uplotly
  import fem4inas.plotools.utils as putils
  import fem4inas.preprocessor.solution as solution
  import fem4inas.unastran.op2reader as op2reader
  import fem4inas.plotools.nastranvtk.bdfdef as bdfdef
  from tabulate import tabulate


#+end_src

** Helper functions

#+begin_comment
https://plotly.com/python/subplots/
#+end_comment

#+begin_src python :results none  :var name=(org-element-property :name (org-element-context)) :tangle ./results/run.py

  def fig_out(name, figformat="png", update_layout=None):
      def inner_decorator(func):
          def inner(*args, **kwargs):
              fig = func(*args, **kwargs)
              if update_layout is not None:
                  fig.update_layout(**update_layout)
              fig.show()
              figname = f"figs/{name}.{figformat}"
              fig.write_image(f"../{figname}")
              return fig, figname
          return inner
      return inner_decorator


  def fig_background(func):

      def inner(*args, **kwargs):
          fig = func(*args, **kwargs)
          # if fig.data[0].showlegend is None:
          #     showlegend = True
          # else:
          #     showlegend = fig.data[0].showlegend

          fig.update_xaxes(
                         titlefont=dict(size=14),
                         tickfont = dict(size=14),
                         mirror=True,
                         ticks='outside',
                         showline=True,
                         linecolor='black',
              #zeroline=True,
          #zerolinewidth=2,
              #zerolinecolor='LightPink',
                         gridcolor='lightgrey')
          fig.update_yaxes(tickfont = dict(size=14),
                         titlefont=dict(size=14),
                         zeroline=True,
                         mirror=True,
                         ticks='outside',
                         showline=True,
                         linecolor='black',
                         gridcolor='lightgrey')
          fig.update_layout(plot_bgcolor='white',
                            yaxis=dict(zerolinecolor='lightgrey'),
                            showlegend=True, #showlegend,
                            margin=dict(
                                autoexpand=True,
                                l=0,
                                r=0,
                                t=2,
                                b=0
                            ))
          return fig
      return inner

  @fig_background
  def xrf1_wingtip2(t, ra, dim, labels=None, node=150):
      scale = 100./33.977
      fig=None
      x1, y1 = putils.pickIntrinsic2D(t,
                                      ra,
                                      fixaxis2=dict(node=node, dim=dim))
      x2, y2 = putils.pickIntrinsic2D(t,
                                      ra,
                                      fixaxis2=dict(node=node, dim=dim))

      fig = uplotly.lines2d(x1[1:], (y1[:-1]-y1[0])*scale, fig,
                            dict(name=f"NMROM-G{labels[0]}",
                                 line=dict(color="orange")
                                 ))
      fig = uplotly.lines2d(x2[1:], (y2[:-1]-y2[0])*scale, fig,
                            dict(name=f"NMROM-G{labels[1]}",
                                 line=dict(color="steelblue")
                                 ))

      dim_dict = {0:'x', 1:'y', 2:'z'}
      fig.update_yaxes(title=r'\large $\hat{u}%s$'%dim_dict[dim])
      fig.update_xaxes(range=[0, 4], title='time [s]')
      return fig

  def subplots_wtips(fun, *args, **kwargs):

      fig1 = fun(*args, dim=0, **kwargs)
      fig2 = fun(*args, dim=1, **kwargs)
      fig3 = fun(*args, dim=2, **kwargs)
      fig3.update_xaxes(title=None)
      fig = make_subplots(rows=2, cols=2, horizontal_spacing=0.135, vertical_spacing=0.1,
                          specs=[[{"colspan": 2}, None],
                                 [{}, {}]])
      for i, f3i in enumerate(fig3.data):
          fig.add_trace(f3i,
                        row=1, col=1
                        )
      for i, f1i in enumerate(fig1.data):
          f1inew = f1i
          f1inew.showlegend = False          
          fig.add_trace(f1inew,
                        row=2, col=1
                        )
      for i, f2i in enumerate(fig2.data):
          f2inew = f2i
          f2inew.showlegend = False          
          fig.add_trace(f2inew,
                        row=2, col=2
                        )

      fig.update_xaxes(fig1.layout.xaxis,row=2, col=1)
      fig.update_yaxes(fig1.layout.yaxis,row=2, col=1)
      fig.update_xaxes(fig2.layout.xaxis,row=2, col=2)
      fig.update_yaxes(fig2.layout.yaxis,row=2, col=2)
      fig.update_xaxes(fig3.layout.xaxis,row=1, col=1)
      fig.update_yaxes(fig3.layout.yaxis,row=1, col=1)
      fig.update_layout(plot_bgcolor='white',
                        yaxis=dict(zerolinecolor='lightgrey'),
                        showlegend=True, #showlegend,
                        margin=dict(
                            autoexpand=True,
                            l=0,
                            r=0,
                            t=2,
                            b=0
                            ))
      #fig.update_layout(showlegend=False,row=2, col=1)
      # fig.update_layout(showlegend=False,row=2, col=2)
      #fig.update_layout(fig1.layout)
      return fig

  @fig_background
  def plot_ffb_times(modes, y1, y2, label1, label2):

      fig = None
      fig = uplotly.lines2d(modes, y1, fig,
                                dict(name=label1,
                                     line=dict(color="blue")
                                     ),
                                dict())

      fig = uplotly.lines2d(modes, y2, fig,
                            dict(name=label2,
                                 line=dict(color="red")
                                 ),
                            dict())          
      fig.update_yaxes(type="log", tickformat= '.0e', nticks=8)
      fig.update_layout(legend=dict(x=0.7, y=0.95),
                        height=650,
                        xaxis_title='Num. modes',
                        yaxis_title='Computational times [s]')
      return fig

  @fig_background
  def plot_ffb_error(modes, y1, label1):

      fig = None
      fig = uplotly.lines2d(modes, y1, fig,
                                dict(name=label1,
                                     line=dict(color="blue")
                                     ),
                                dict())
      fig.update_yaxes(type="log", tickformat= '.0e', nticks=8)
      fig.update_layout(showlegend=False,
                        #height=800,
                        xaxis_title='Num. modes',
                        yaxis_title='Cg error')
      return fig

#+end_src

* Results


#+NAME: GustXRF12
#+begin_src python :results value file  :var name=(org-element-property :name (org-element-context)) :tangle ./results/run.py
  sol1= solution.IntrinsicReader("./xrf1gust_1")
  #sol2= solution.IntrinsicReader("./XRF2")
  fig, figname = fig_out(name)(subplots_wtips)(xrf1_wingtip2, sol1.data.dynamicsystem_s2.t, sol1.data.dynamicsystem_s2.ra, labels=[1,2], node=0)
  figname
#+end_src

#+RESULTS: GustXRF12
[[file:figs/GustXRF12.png]]

#+NAME: fig:GustXRF12
#+CAPTION: Wing-tip response to low intensity gust
#+ATTR_LATEX: :width 0.8\textwidth :placement [!h]
#+RESULTS: GustXRF12[[file:]]
