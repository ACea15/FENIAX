* House keeping  :noexport: 
#+begin_src elisp :results none :tangle no :exports none
  (add-to-list 'org-structure-template-alist
  '("sp" . "src python :session (print pythonShell)"))
  (add-to-list 'org-structure-template-alist
  '("se" . "src elisp"))
  (setq org-confirm-babel-evaluate nil)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex --syntex=1 -interaction nonstopmode' -pdf -bibtex -f %f"))
  ;; (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))
  (pyvenv-workon "fem4inasdev")
  (require 'org-tempo)
  ;; Veval_blocks -> eval blocks of latex
  ;; Veval_blocks_run -> eval blocks to obtain results
  (setq Veval_blocks "no-export") ;; yes, no, no-export 
  (setq Veval_blocks_run "yes")
  (setq pythonShell "py1org")
  ;; export_blocks: code, results, both, none
  (setq export_blocks  "results")  
#+end_src

* Load modules :noexport: 
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes  :eval (print Veval_blocks) :exports (print export_blocks) :comments both :tangle ./results/runs.py
:END:

#+begin_src python  :results none 
  import plotly.express as px
  import pyNastran.op4.op4 as op4
  import matplotlib.pyplot as plt
  import pdb
  import pathlib
  import datetime
  import os
  import shutil
  REMOVE_RESULTS = True
  #   for root, dirs, files in os.walk('/path/to/folder'):
  #       for f in files:
  #           os.unlink(os.path.join(root, f))
  #       for d in dirs:
  #           shutil.rmtree(os.path.join(root, d))
  # 
  if os.getcwd().split('/')[-1] != 'results':
      if not os.path.isdir("./figs"):
          os.mkdir("./figs")
      if REMOVE_RESULTS:
          if os.path.isdir("./results"):
              shutil.rmtree("./results")
      if not os.path.isdir("./results"):
          print("***** creating results folder ******")
          os.mkdir("./results")
      os.chdir("./results")
  examples_folder = pathlib.Path.cwd() / "../../../../examples"    
#+end_src

#+NAME: PYTHONMODULES
#+begin_src python  :results none  :tangle ./results/runs.py
  import plotly.express as px
  import pickle
  import jax.numpy as jnp
  import jax
  import pandas as pd
  import numpy as np
  import fem4inas.preprocessor.configuration as configuration  # import Config, dump_to_yaml
  from fem4inas.preprocessor.inputs import Inputs
  import fem4inas.fem4inas_main
  import fem4inas.plotools.uplotly as uplotly
  import fem4inas.plotools.utils as putils
  import fem4inas.preprocessor.solution as solution
  import fem4inas.unastran.op2reader as op2reader
  import fem4inas.plotools.nastranvtk.bdfdef as bdfdef
  from tabulate import tabulate
#+end_src

* RunModels
:PROPERTIES:
:header-args: :mkdirp yes  :session (print pythonShell) :noweb yes :tangle ./results/runs.py :eval (print Veval_blocks_run) :exports (print export_blocks) :comments both
:END:

#+begin_src python :results none

  import time

  TIMES_DICT = dict()
  SOL = dict()
  CONFIG = dict()

  def run(input1, **kwargs):
      jax.clear_caches()
      label = kwargs.get('label', 'default')
      t1 = time.time()
      config =  configuration.Config(input1)
      sol = fem4inas.fem4inas_main.main(input_obj=config)
      t2 = time.time()
      TIMES_DICT[label] = t2 - t1      
      SOL[label] = sol
      CONFIG[label] = config

  def save_times():
      pd_times = pd.DataFrame(dict(times=TIMES_DICT.values()),
                              index=TIMES_DICT.keys())
      pd_times.to_csv("./run_times.csv")

#+end_src

- Models run on this exercise:

** COMMENT SimoFSpaguetti

25 node discretization

#+NAME: rrb
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  inp = Inputs()
  inp.engine = "intrinsicmodal"
  inp.fem.connectivity = {'0': None}
  inp.fem.folder = examples_folder / 'SimoFSpaguetti/FEMshell25'
  inp.fem.num_modes = 150
  inp.fem.eig_type = "scipy"
  inp.driver.typeof = "intrinsic"
  inp.simulation.typeof = "single"
  inp.systems.sett.s1.solution = "dynamic"
  inp.systems.sett.s1.bc1 = 'free'
  inp.systems.sett.s1.t1 = 15.
  inp.systems.sett.s1.dt = 5e-4
  inp.systems.sett.s1.solver_library = "runge_kutta" #"runge_kutta" #"diffrax" #
  inp.systems.sett.s1.solver_function = "ode"
  inp.systems.sett.s1.solver_settings = dict(solver_name="rk4") # "rk4" "Dopri5"
  inp.systems.sett.s1.xloads.dead_forces = True
#+end_src

*** 2D

#+NAME: rrb2d
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  <<rrb>>
  inp.driver.sol_path= pathlib.Path(
      f"./{name}")
  inp.systems.sett.s1.xloads.dead_points = [[24, 0],
                                            [24, 5]]
  inp.systems.sett.s1.xloads.x = [0., 2.5, 2.5+1e-6, 15.5]
  inp.systems.sett.s1.xloads.dead_interpolation = [[8., 8., 0., 0.],
                                                   [-80., -80., 0., 0.]
                                                   ]
  run(inp, label=name)
#+end_src

*** 3D
#+NAME: rrb3d
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  <<rrb>>
  inp.driver.sol_path= pathlib.Path(
      f"./{name}")
  inp.systems.sett.s1.xloads.dead_points = [[24, 0],
                                          [24, 4],
                                          [24, 5]]
  inp.systems.sett.s1.xloads.x = [0., 2.5, 5., 20.5]
  inp.systems.sett.s1.xloads.dead_interpolation = [[0., 20., 0., 0.],
                                                 [0., 100., 0., 0.],
                                                 [0., -200., 0., 0.]
                                                 ]
  run(inp, label=name)
#+end_src

** XRF1trim
#+NAME: xrf1trim
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  inp = Inputs()
  inp.engine = "intrinsicmodal"
  inp.fem.eig_type = "input_memory"
  inp.fem.folder = examples_folder / 'XRF1trim/FEM/'
  inp.fem.grid = "structuralGridc.txt"
  inp.fem.eigenvals = jnp.load(inp.fem.folder / "Dreal100.npy")
  inp.fem.eigenvecs = jnp.load(inp.fem.folder / "Vreal100.npy").T
  inp.fem.connectivity = [[1, 7, 13, 31], [2], [3], [4, 5], [27], [6], [],
                          [8], [9], [10, 11], [29], [12], [],
                          [14], [15], [16, 21], [17, 23, 25],
                          [18], [19], [20], [], [22], [], [24], [],
                          [26], [], [28], [], [30], [], []]
  inp.fem.num_modes = 50
  inp.driver.typeof = "intrinsic"
  # inp.driver.sol_path = pathlib.Path(
  #     f"./resultsGust_{datetime.datetime.now().strftime('%Y-%m-%d_%H:%M:%S')}")
  inp.simulation.typeof = "single"
  inp.systems.sett.s1.solution = "static"
  inp.systems.sett.s1.target = "trim"
  inp.systems.sett.s1.bc1 = 'free'
  # inp.systems.sett.s1.nonlinear = 
  inp.systems.sett.s1.solver_function = "newton_raphson"
  inp.systems.sett.s1.solver_settings = dict(rtol=1e-6,
                                             atol=1e-6,
                                             max_steps=100,
                                             norm="linalg_norm",
                                             kappa=0.01)
  inp.systems.sett.s1.solver_library = "diffrax"#"runge_kutta"
  inp.systems.sett.s1.solver_function = "newton_raphson"
  inp.systems.sett.s1.xloads.modalaero_forces = True
  inp.systems.sett.s1.xloads.gravity_forces = True
  #inp.systems.sett.s1.xloads.gravity = 0.5
  # inp.systems.sett.s1.q0treatment = 2
  inp.systems.sett.s1.aero.c_ref = 7.271
  inp.systems.sett.s1.aero.u_inf = 180.
  inp.systems.sett.s1.aero.rho_inf = 0.778
  inp.systems.sett.s1.aero.A = examples_folder / "XRF1trim" / f"NASTRAN/AERO/AICsQhh{inp.fem.num_modes}-000_8r{inp.fem.num_modes}.npy"
  inp.systems.sett.s1.aero.B = examples_folder / "XRF1trim" / f"NASTRAN/AERO/AICsQhx{inp.fem.num_modes}-000.npy"
  inp.systems.sett.s1.aero.elevator_index = [-2, -1]
  inp.systems.sett.s1.aero.elevator_link = [+1, -1]
#+end_src

#+NAME: xrf1trim1
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  <<xrf1trim>>
  inp.systems.sett.s1.xloads.gravity = 9.807 * 4
  inp.systems.sett.s1.t = [0.25, 0.5, 0.75, 1.]
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  run(inp, label=name)
#+end_src

#+NAME: xrf1trim_dyn
#+begin_src python :results none :var name=(org-element-property :name (org-element-context))
  <<xrf1trim>>
  inp.systems.sett.s1.xloads.gravity = 9.807 * 4
  inp.systems.sett.s1.t = [0.25, 0.5, 0.75, 1.]
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  inp.systems.borrow = 's1'
  inp.systems.sett.s2.solution = "dynamic"
  inp.systems.sett.s2.target = "level"
  inp.systems.sett.s2.bc1 = 'free'
  inp.systems.sett.s2.solver_library = "diffrax"#"runge_kutta"
  inp.systems.sett.s2.solver_function = "ode"
  inp.systems.sett.s2.solver_settings = dict(solver_name="Dopri5")#"rk4")
  inp.systems.sett.s2.q0treatment = 1
  inp.systems.sett.s2.t = None
  inp.systems.sett.s2.t1 = 1.
  inp.systems.sett.s2.dt = 5e-3
  inp.systems.sett.s2.aero.poles = f"./NASTRAN/AERO/Poles000_8r{inp.fem.num_modes}.npy"
  run(inp, label=name)
#+end_src

** XRF1-gust

#+NAME: xrf1gust1
#+begin_src python :results none :var name=(org-element-property :name (org-element-context)) :tangle ./results/runs.py 
  <<xrf1trim>>
  inp.systems.sett.s1.xloads.gravity = 9.807 * 1
  inp.systems.sett.s1.t = [1.]
  inp.driver.sol_path = pathlib.Path(
      f"./{name}")
  inp.systems.borrow = 's1'
  inp.systems.sett.s2.solution = "dynamic"
  inp.systems.sett.s2.target = "level"
  inp.systems.sett.s2.bc1 = 'free'
  inp.systems.sett.s2.solver_library = "diffrax"#"runge_kutta"
  inp.systems.sett.s2.solver_function = "ode"
  inp.systems.sett.s2.solver_settings = dict(solver_name="Dopri5")#"rk4")
  inp.systems.sett.s2.q0treatment = 1
  inp.systems.sett.s2.xloads.modalaero_forces = True
  inp.systems.sett.s2.xloads.gravity_forces = True
  inp.systems.sett.s2.t = None
  inp.systems.sett.s2.t1 = 1.
  inp.systems.sett.s2.dt = 5e-3
  inp.systems.sett.s2.aero.poles = f"./NASTRAN/AERO/Poles000_8r{inp.fem.num_modes}.npy"
  inp.systems.sett.s2.aero.D = f"./NASTRAN/AERO/AICsQhj{inp.fem.num_modes}-000_8r{inp.fem.num_modes}.npy"
  inp.systems.sett.s2.aero.gust_profile = "mc"
  inp.systems.sett.s2.aero.gust.intensity = 14.0732311562*1 #11.304727674272842/10000
  inp.systems.sett.s2.aero.gust.length = 67.
  inp.systems.sett.s2.aero.gust.step = 1.
  inp.systems.sett.s2.aero.gust.shift = 0.
  inp.systems.sett.s2.aero.gust.panels_dihedral = jnp.load("./NASTRAN/AERO/Dihedral.npy")
  inp.systems.sett.s2.aero.gust.collocation_points = "./NASTRAN/AERO/Control_nodes.npy"
  run(inp, label=name)
#+end_src
