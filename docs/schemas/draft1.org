#+TITLE: FEM4INAS initial architecture
#+AUTHOR: Alvaro Cea
#+Date: 6/06/2023
#+STARTUP: inlineimages
* HouseKeeping
#+begin_src elisp :results none :tangle no 
  (setq org-image-actual-width nil)
  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)
  (pyvenv-workon "fem4inas")
  
#+end_src

* UML
** RHEA
#+Name: dem3
#+begin_src plantuml :file my-diagram3.png
          title SU2_CFD: Harmonic Balance architecture

          class CDriver {
            +DynamicMesh_Preprocessing()
            +Inlet_Preprocessing()
              }

          class CFluidDriver {
            +StartSolver()
            +DynamicMeshUpdate()
            +UpdateFlutterConditions()
            +Monitor()
              }


         class CHBDriver {
            +Preprocess()
            +Update()
            +Run()
            +ComputeHB_Operator()
            +Preprocess()
            +StabilizeHarmonicBalance()
            +SetHarmonicBalance()
            +Output()
         }

         class CSolver {
            +AeroelasticWing_HB()        
            +SolveModalwing_HB()
            +Aeroelastic_HB()
            +Velocity_Update_3D()
            +Frequency_Velocity_Update_3D()
            +AeroelasticWing()        
          }

         class CEulerSolver {
            +SetInitialCondition()
              +Preprocessing() 	
            +Upwind_Residual()
            +Centered_Residual()
            +Source_Residual()
            }

         class CMeshSolver {
            +AeroelasticDeformMesh
            +Calculate_Generalized_Forces()
            +Calculate_Surface_Displacement()
            +SetStructuralModes()
            +RBF_Basis_Function()
            +SetBoundaryDisplacements()
            +SetBoundaryVelocities()
            +UpdateMultiGrid()
            +UpdateDualGrid()
            +DeformMesh()
          }

         class CFEASolver {
            +Solve_System
            +BC_
            +Compute_StiffMatrix()
            +_Relaxation()

          }


      class CVolumetricMovement{
          -nDim
          -nVar
          -nPoint
          +UpdateMultiGrid()
            +UpdateGridCoord()
    }

      class CIteration{
               -nZone
               -nInst
               -multizone
               -singlezone
               +SetGrid_Movement()
               +SetGrid_AeroelasticMovement()
               +SetAeroelastic_Mesh_Deformation()
               +SetMesh_Deformation()
       }

    class CFluidIteration{
            +Preprocess()
            +Iterate()
            +Solve()
            +Update()
            +Monitor()
            +Postprocess()
     }


        CDriver <|-- CFluidDriver
        CFluidDriver <|-- CHBDriver
        CDriver *- CIteration
        CIteration <|-- CFluidIteration
        CFluidIteration *-- CVolumetricMovement
        CIteration *- CSolver
        CSolver <|-- CEulerSolver
        CSolver <|-- CFEASolver
        CFEASolver <|-- CMeshSolver


#+end_src

#+RESULTS: dem3
[[file:my-diagram3.png]]

#+Name: flutter_process
#+begin_src plantuml :file flutter_process2.png
  'agent DMAPs'
  <style>
  artifact {
  BackGroundColor #ee1100
  LineThickness 1
  LineColor black
  }

  database {
  BackGroundColor #ff9933
  LineThickness 1
  LineColor black
  }
  circle {
  BackGroundColor #ff3311
  LineThickness 1
  LineColor black
  }
  /'
   ' rectangle {
   ' BackGroundColor #4444dd
   ' LineThickness 1
   ' LineColor black
   ' }
   '/
  </style>

  artifact inputs
  artifact mesh.su2
  artifact nastran.bdf [
  Model_0.bdf
  DMAPs
  ]

  file parseSU2.py

  package Parametric_analysis {
    package "PyNastran"
    component parametric_factory {
    component run_model
    component write_model
    component iterator
  }
    component parametric_engine
    package "MSc nastran"
  }
  inputs --> parametric_factory
  'parametric_engine -> iterator'
  nastran.bdf --> PyNastran 
  write_model  --> run_model
  run_model ..> "MSc nastran"
  iterator --> write_model
  "MSc nastran" --> iterator
  parametric_factory ..>  PyNastran
  iterator .l.> parametric_engine

  package "Write_modes" {
    [filters]
    [interpolation]
    [modal_reconstruction]
  }
  database database [
  model.<b>bdf
  ----
  model.<b>f06	
  ----
  model.<b>op2
  ----
  GAFs.<b>op4
  ----
  cases.<b>json
  ]
  database database2 [
  3D Modal shapes
  ----
  Frequencies
  ]
  Parametric_analysis ~> database
  database -d-> Write_modes
  modal_reconstruction -> interpolation
  interpolation -> filters

  package build_flutter {
    component nastran_postprocessor [
        f06_postprocessor.py
          - flutter and
          stability postprocessing]
    component PK_GAFs.m [
      PK_GAFs.m
      - GAFs preprocessing
      - flutter via
        fix_point iterator
      - postprocessing
      ]
    file compute_HB.sh
    file compute_steady.sh
    file mesh_deformation.sh
  }

  mesh_deformation.sh -l-> compute_steady.sh
  compute_steady.sh -l-> compute_HB.sh
  compute_HB.sh -l-> PK_GAFs.m
  PK_GAFs.m -l-> nastran_postprocessor
  node HPC {
        rectangle SU2_DEF.cpp
        rectangle SU2_CFD.cpp
  }

  mesh.su2 -l-> parseSU2.py
  parseSU2.py -u-> Write_modes
  Parametric_analysis -[hidden]> Write_modes 
  Write_modes ~u~> database2
  database2 -u-> mesh_deformation.sh
  database -d-> nastran_postprocessor
  HPC -[hidden]-> mesh_deformation.sh
  mesh_deformation.sh -d-> SU2_DEF.cpp
  compute_steady.sh -d-> SU2_CFD.cpp
  compute_HB.sh -d-> SU2_CFD.cpp
  circle Solution
  nastran_postprocessor ~up~> Solution
  /'
   ' rectangle stability
   ' PK_GAFs.m -u-> stability
   '/

  /'
   ' database -> Write_modes
   ' mesh.su2 -> Write_modes
   ' parseSU2.py -> Write_modes
   '/

#+end_src

#+RESULTS: flutter_process
[[file:flutter_process2.png]]
** NextWing
#+Name: classes_architecture
#+begin_src plantuml :file classes.png

  abstract class Driver {
          #_integration: Integration
          #_simulation: Simulation
	    #_opt: Optimisation
          +run_cases()
          #_set_case()
          #_set_integration()
          #_set_simulation()
  }

  abstract class Integration {
          +run()
  }

  class IntrinsicIntegration {
          +run()
          #_compute_modalshapes()
          #_compute_modalcouplings()
  }

  abstract class Simulation {
          +trigger()
          +pull_solution()
          #_run()
          #_post_run()
  }

  /'
   ' package Simulations {
   '         class SerialSimulation {
   '         }
   '         class ParallelSimulation {
   '         }
   '         class SingleSimulation {
   '         }
   '         class CoupledSimulation {
   '         }
   ' }
   '/

  class SerialSimulation {
  }
  class ParallelSimulation {
  }
  class SingleSimulation {
  }
  class CoupledSimulation {
  }

  abstract class System {
          +set_init()
          +set_name()
          +set_generator()
          +set_solver()
          +solve()
          +save()
  }

  class IntrinsicSystem {
        -dq: callable
        -solver: callable
  }

  class ControlIntrinsicSystem {
  }

  class MultibodyIntrinsicSystem {
  }

     /'
      ' Simulation <|-- SerialSimulation
      ' Simulation <|-- ParallelSimulation
      ' Simulation <|-- SingleSimulation
      ' Simulation <|-- CoupledSimulation
      '/
  abstract class Optimisation {
        -save_grads()
        -assemble()
  }

  'Simulation <|-- Simulations
  Simulation <|-- SingleSimulation
  SingleSimulation -- SerialSimulation 
  SerialSimulation -- ParallelSimulation
  ParallelSimulation -- CoupledSimulation					
  'Driver "1" -- "1" Integration : composition
  'Driver "1" -- "1" Simulation : composition'
  Driver  *- Integration
  Driver  *-- Simulation
  Driver  *-- Optimisation				
  Simulation  *- System
  Integration <|-- IntrinsicIntegration
  System  <|-- IntrinsicSystem
  IntrinsicSystem -- ControlIntrinsicSystem
  ControlIntrinsicSystem -- MultibodyIntrinsicSystem
#+end_src

#+RESULTS: classes_architecture
[[file:classes.png]]

#+Name: classes_architecture2
#+begin_src plantuml :file classes2.png

   abstract Driver {
          +pre_simulation()
          +run_cases()
  }

   class IntrinsicDriver {
           #integration: IntrinsicIntegration
           #simulation: Simulation
           #opt: Optimisation
           #systems: [System]
           -__init__(config: Config)
           #_set_case()
           #_set_integration()
           #_set_simulation()
           #_set_systems()
   }

   class  XLoads {
           +q: [jnp.ndarray]
           +Rab: [jnp.ndarray]
           +GAFs: [jnp.ndarray]
           -__init__(config.systems.loads,
          q, Rab, GAFs)
           +followerF()
           +deadF()
           +gravityF()
           +modalAero()
           }

   /'
    ' abstract class Integration {
    '         +run()
    ' }
    '/

   class IntrinsicIntegration {
                   + <math>phi_1, phi_2, psi_1, psi_2</math>
                   + <math>Gamma_1, Gamma_2 </math>
                   -__init__(X, Ka, Ma)		
                   +run()
                   #compute_modalshapes()
                   #compute_modalcouplings()
   }

   abstract class Simulation {
                   +systems: [System]
                   #workflow: dict[str:str]
                       #opt: Optimisation
                   -__init__(config.simulation,
                  systems, opt, config.simulation)
                   +trigger()
                   #run_systems()
                   #post_run()
           }

   /'
    ' package Simulations {
    '         class SerialSimulation {
    '         }
    '         class ParallelSimulation {
    '         }
    '         class SingleSimulation {
    '         }
    '         class CoupledSimulation {
    '         }
    ' }
    '/

   class SerialSimulation {
   }
   class ParallelSimulation {
   }
   class SingleSimulation {
   }
   class CoupledSimulation {
   }

   abstract class System {
           +set_ic(q0)
           +solve() -> sol
           +pull_solution() -> qs
   }

   class IntrinsicSystem {
          -dq: callable
          -solver: callable
          +sol: obj
          #set_generator() -> dq
          #set_solver() -> solver

   }

   class ControlSystem {
   }

   class MultibodySystem {
   }

      /'
       ' Simulation <|-- SerialSimulation
       ' Simulation <|-- ParallelSimulation
       ' Simulation <|-- SingleSimulation
       ' Simulation <|-- CoupledSimulation
       '/
   abstract class Optimisation {
         +save_grads()
         +assemble()
   }

   'Simulation <|-- Simulations
   Simulation <|-- SingleSimulation
   SingleSimulation -- SerialSimulation 
   SerialSimulation -- ParallelSimulation
   ParallelSimulation -- CoupledSimulation					
   'Driver "1" -- "1" Integration : composition
   'Driver "1" -- "1" Simulation : composition'
   IntrinsicIntegration  -* IntrinsicDriver
   Driver <|-- IntrinsicDriver
   IntrinsicDriver  *-- Optimisation						
   IntrinsicDriver  *-- Simulation
   IntrinsicDriver  *- System
   System ..> Simulation
   'Integration <|-- IntrinsicIntegration
   System  <|-- IntrinsicSystem
   IntrinsicSystem -- ControlSystem
   IntrinsicSystem o- XLoads
   ControlSystem -- MultibodySystem

#+end_src


#+Name: classes_architecture3
#+begin_src plantuml :file classes3.png
node math [
<math>int_-1^1 sqrt(1-x^2)dx = pi/2</math>
]
#+end_src

#+RESULTS: classes_architecture3
[[file:classes3.png]]

* ModulesH
** Geometryrb
*** geometry_def(Grid,NumBeams,BeamConn,start_reading,beam_start,nodeorder_start,node_start,Clamped,ClampX,BeamsClamped,MBbeams=[])
BeamSeg([NumBeams]){
- EnumNodes: int
- NodeX: np.array([NumNodes*3])
- NodeOrder: list -> Index of node in FE matrices. Extra nodes inserted at the connections
- GlobalAxes: np.array([NumNodes*3])
- Conn: [[],[]] -> BeamConn 
- NodeL:
- NodeDL:
}
DupNodes: list [BeamIndex_lastNode, ConnectedBeams_firstNode]
NumNode: int (FEM Ones)
NumNodes: int (FEM + Duplicates at connections)
inverseconn: dict (BeamIndex -> masterBeam)

** Modesrb
Populate these tensors
Centre of mass, very important! it needs to be given. Actually is only used for the RB. 
#+begin_src python
  Xm=intrinsic.FEmodel.CentreofMass(Ma,V.Clamped,V.NumBeams,BeamSeg,V.cg)
  MdotV=np.zeros(np.shape(Vreal))
  Mdotg0=np.zeros(np.shape(Vreal))
  Phi0=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))    for i in range(V.NumBeams)]
  Phi1=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))    for i in range(V.NumBeams)]
  Phi1m=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))   for i in range(V.NumBeams)]
  Phi2=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))    for i in range(V.NumBeams)]
  CPhi2x=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))  for i in range(V.NumBeams)]
  MPhi1=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))   for i in range(V.NumBeams)]
  MPhi1x=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))  for i in range(V.NumBeams)]
  Phig0=[np.zeros((BeamSeg[i].EnumNodes,6))   for i in range(V.NumBeams)]

  Phi0l=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))    for i in range(V.NumBeams)]
  Phi1l=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))    for i in range(V.NumBeams)]
  Phi2l=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))    for i in range(V.NumBeams)]
  Phi1ml=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))   for i in range(V.NumBeams)]
  CPhi2xl=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))  for i in range(V.NumBeams)]
  MPhi1l=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))   for i in range(V.NumBeams)]
  MPhi1l2=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))  for i in range(V.NumBeams)]
  MPhi1xl=[np.zeros((V.NumModes,BeamSeg[i].EnumNodes,6))  for i in range(V.NumBeams)]
#+end_src

* Challenging problems driving the research
** Geometrically nonlinear aeroelastic analysis using complex GFEMs
- Flight loads
- Airframe integrity: flutter or divergence assessment
- Multidisciplinary design optimisation
** Max performance:
- Critical for time-domain simulations
- JAX Just in Time Compilation (JIT)
- Code vectorisation and parallelisation.
- Run on accelerators (GPUs, TPUs, etc.)
** Derivatives of aeroelastic  for design optimisation.
- Using JAX algorithmic differentiation.
*** Efficient derivatives
JAX AD package using pure functions from functional programming style.
*** Compute and arbitrary number of loads cases
Via subcase option of driver class that modifies the xloads option in each case. For example to get the max. loads envelope without having to manage an array of simulations which might also overlap computations.
*** Compute the derivative of function applied to the previous point
If for instance one wants to set an optimisation with boundaries on the maximum loads, it would not make sense to do it for only one atmospheric load case.
*** Perform calculations on different models in a single run
Via the supercase option of driver. This might be used to compute finite differences; or if the response of if the response of a fractured component is to be compared.
* Code design
** Config
config.engine = intrinsic
config.supercase.fems[dict]
config.subcase.system[].xloads
config.simulation.typeof[Serial, parallel, Single]
config.simulation.build_grads
config.simulation.optimize
config.
config.systems[]
config.system.name
config.system.solver.library
config.system.solver.settings
** Driver
(only driver gets to modify object)
run_cases
  -- set_case
  -- integration.pre_simulation()
  -- simulation.trigger()
  -- 
set_case
(modifies config object)
  -- Supercase
  -- Subcase
set_integration
set_simulation -> simulation
** Integration
run
  -- calculate_modalshapes
  -- calculate_modalcouplings
derivatives

** Simulation
- trigger
- _prerun
- _run
  -- system.set_init
- _pull_solution
- _postrun
*** SerialSimulation
-_run
*** ParallelSimulation
-_run
*** SingleSimulation
- _run
** System
- set_init -> q0
- set_name
- set_generator -> dq
- set_solver
- solve -> q
  self.solver(self.dq)
- save
** XForces
*** prescribed_follower
*** prescribed_dead
*** gravity
*** modal_aero
** inputs
*** container
*** fields
- value
- description
- default
- options

* System based solutions 
| Type        | Target | Gravity    | BC1        | ModalAero | SteadyAero   | UnsteadyAero | Point loads | q0 approx | Rigid-body           | Nonlinearities         | residualised |
|-------------+--------+------------+------------+-----------+--------------+--------------+-------------+-----------+----------------------+------------------------+--------------|
| 1 static    | Level  | False: "g" | Clamped    | None      | None         | None         | None        | via q2    | 1-quaternion+strains | All -> ""              | None -> ""   |
| 2 Dynamic   | TRIM1  | True: "G"  | Free       | Rogers    | qalpha       | gust         | follower    | via q1    | All-quaternions      | Linear sys -> "l"      | True -> "r"  |
| 3 Stability | TRIM2  |            | Prescribed | Loewner   | qx (control) | controls     | dead        |           |                      | Linear sys+disp -> "L" |              |
| 4 Multibody |        |            |            |           |              |              |             |           |                      |                        |              |
| 5 Control   |        |            |            |           |              |              |             |           |                      |                        |              |

| Sol name |                                                 | label                 | Imp |
|----------+-------------------------------------------------+-----------------------+-----|
| 10G1     | Structural static under Gravity                 | [1,0,'G']             | Y   |
| 10g11    | Structural static with follower point forces    | [1,0,'g',0,0,0,0,1]   | Y   |
| 10g121   | Structural static with dead point forces        | [1,0,'g',0,0,0,0,2]   | Y   |
| 10g1331  | Structural static with follower+dead forces     | [1,0,'g',0,0,0,0,3]   | N   |
| 10g15    | Manoeuvre under qalpha                          | [1,0,'g',0,1,1]       | Y   |
| 10G15    | Manoeuvre under qalpha and Gravity              | [1,0,'G',0,1,1]       | N   |
| 10g75    | Manoeuvre under qalpha and controls             | [1,0,'g',0,1,2]       | N   |
| 10G75    | Manoeuvre under qalpha+controls+Gravity         | [1,0,'G',0,1,2]       | N   |
| 20g1     | Clamped Structural dynamics, free vibrations    | [2,0,'g']             | Y   |
| 20G2     | Free Structural dynamic with gravity forces     | [2,0,'G',1]           | Y   |
| 20g11    | Structural dynamic follower point forces        | [2,0,'g',0,0,0,0,1]   | Y   |
| 20g121   | Structural dynamic dead point forces            | [2,0,'g',0,0,0,0,2]   | Y   |
| 20g22    | Free Structural dynamic follower point forces   | [2,0,'g',1,0,0,0,1]   | Y   |
| 20g242   | Free Structural dynamic dead point forces       | [2,0,'g',1,0,0,0,2]   | Y   |
| 11G2     | Static trimmed State (elevator-qalpha,          | [1,1,'G',1]           | N   |
|          |                       no gravity updating)      |                       |     |
| 12G2     | Static trimmed State (elevator-qalpha,          | [1,2,'G',1]           | N   |
|          |                       gravity updating)         |                       |     |
| 21G150   | Dynamic trimmed State                           | [2,1,'G',1,1,2]       | N   |
| 20g21    | Gust response                                   | [2,0,'g',0,1,0,1]     | Y   |
| 20g273   | Gust response, q0 obtained via integrator q1    | [2,0,'g',0,1,0,1,0,1] | Y   |
| 20g105   | Gust response with steady qalpha                | [2,0,'g',0,1,1,1]     | N   |
| 20g42    | Gust response Free-flight                       | [2,0,'g',1,1,0,1]     | N   |
| 20G42    | Gust response Free-flight and gravity (X error) | [2,0,'G',1,1,0,1]     | N   |
| 20G1050  | Gust response Free-flight, gravity, controls    | [2,0,'G',1,1,2,1]     | N   |
|          |                                                 |                       |     |

#+begin_src python :session py1 :results output
  import fem4inas.intrinsic.functions as functions
  label = functions.label_generator([1,2,'G',1])
  print(label)
#+end_src

#+RESULTS:
: 12G2



trim
----
qh = 0
qe becomes unknown 
qalpha != 0 
qhdot = f(gamma2) + eta_h(q0, qe) = 0  # rigid bodies ()
qalphadot = f(gamma2, q2) + eta_alpha(q0, qe)      # rigid bodies
q1dot = f(gamma2) + eta_q(q0, qe)


 Connection with High Fidelity structural model
** Initial Model
- Clamped wing -> good for steady loads and aircraft stability.
- Full A/C model -> Needed for dynamic loads.
- Mass model: Both continuous mass model and lumped masses are suitable for analysis.
  Engines and other components definitely as  lumped masses.
** Input requirements

#+ATTR_ORG: :width  600
[[./FEM3d.png]]
*** Load paths
- interpolation elements to connect to other FE nodes.
- aerodynamic forces applied along these paths

*** Condensed stiffness and mass matrices along load paths
- Should be suitable for eigenvalue analysis

*** Aerodynamic model via GAFs.
- Preliminary DLM model. Automatically built from wing-box?
- Steady loads: Corrections may be needed. 
  
** Output requirements
*** Sectional loads along load-paths
Steady and dynamic aeroelastic loads due to trimmed flight, gusts etc.
*** Aeroelastic stability of configuration
Flutter and divergence points
*** Potentially derivatives of the above via AD.
Critical for large design optimisation problems.
** Data workflow
Well in place for Nastran Models  except for the derivatives provided by Nastran using Sol 200.
* Software architecture
Extensive  work carried out into a software architecture that complies with good design principles.
#+RESULTS: classes_architecture2
[[file:classes2.png]]
* Short term goals
- Set up a testing framework with well-known problems in nonlinear structural-mechanics/aeroelasticity.
- Application to the Bristol model provided by Airbus.



#+Name: classes_architecture3
#+begin_src plantuml :file classes3.png
  abstract Driver {
            +pre_simulation()
            +run_cases()
    }

     class IntrinsicDriver {
             #integration: IntrinsicIntegration
             #simulation: Simulation
             #opt: Optimisation
             #systems: [System]
             -__init__(config: Config)
             #_set_case()
             #_set_integration()
             #_set_simulation()
             #_set_systems()
     }

     class  XLoads {
             +q: [jnp.ndarray]
             +Rab: [jnp.ndarray]
             +GAFs: [jnp.ndarray]
             -__init__(config.systems.loads,
            q, Rab, GAFs)
             +followerF()
             +deadF()
             +gravityF()
             +modalAero()
             }

     /'
      ' abstract class Integration {
      '         +run()
      ' }
      '/

     class IntrinsicIntegration {
                     + <math>phi_1, phi_2, psi_1, psi_2</math>
                     + <math>Gamma_1, Gamma_2 </math>
                     -__init__(X, Ka, Ma)		
                     +run()
                     #compute_modalshapes()
                     #compute_modalcouplings()
     }

     abstract class Simulation {
                     +systems: [System]
                     #workflow: dict[str:str]
                         #opt: Optimisation
                     -__init__(config.simulation,
                    systems, opt, config.simulation)
                     +trigger()
                     #run_systems()
                     #post_run()
             }

     /'
      ' package Simulations {
      '         class SerialSimulation {
      '         }
      '         class ParallelSimulation {
      '         }
      '         class SingleSimulation {
      '         }
      '         class CoupledSimulation {
      '         }
      ' }
      '/

     class SerialSimulation {
     }
     class ParallelSimulation {
     }
     class SingleSimulation {
     }
     class CoupledSimulation {
     }

     abstract class System {
             +set_ic(q0)
             +solve() -> sol
             +pull_solution() -> qs
     }

     class IntrinsicSystem {
            -__init__(name[str], settings:config.Dsystem,
                      fem: config.Dfem,
                      sol: solution.IntrinsicSolution)						
            -dq: callable
            -solver: callable
            +sol: obj
            #set_generator() -> dq
            #set_solver() -> solver

     }

     class ControlSystem {
     }

     class MultibodySystem {
     }

        /'
         ' Simulation <|-- SerialSimulation
         ' Simulation <|-- ParallelSimulation
         ' Simulation <|-- SingleSimulation
         ' Simulation <|-- CoupledSimulation
         '/
     abstract class Optimisation {
           +save_grads()
           +assemble()
     }

     abstract class Sollibs {
           +name()
           +pull_name()
     }
      enum dq {
  - sol_dict
  - dq_label
  }

      enum loads {
  - eta_dict[]
  - eta_{label}
  }

     'Simulation <|-- Simulations
     Simulation <|-- SingleSimulation
     SingleSimulation -- SerialSimulation 
     SerialSimulation -- ParallelSimulation
     ParallelSimulation -- CoupledSimulation					
     'Driver "1" -- "1" Integration : composition
     'Driver "1" -- "1" Simulation : composition'
     IntrinsicIntegration  -* IntrinsicDriver
     Driver <|-- IntrinsicDriver
     IntrinsicDriver  *-- Optimisation						
     IntrinsicDriver  *-- Simulation
     IntrinsicDriver  *- System
     System ..> Simulation
     'Integration <|-- IntrinsicIntegration
     System  <|-- IntrinsicSystem
     System  *- Sollibs
     IntrinsicSystem -- ControlSystem
     IntrinsicSystem o- XLoads
     ControlSystem -- MultibodySystem
#+end_src



