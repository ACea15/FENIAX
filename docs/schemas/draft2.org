#+TITLE: FENIAX architecture
#+AUTHOR: Alvaro Cea
#+Date: 11/29/2024
#+STARTUP: inlineimages
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage[ruled,vlined]{algorithm2e}

* HouseKeeping
#+begin_src elisp :results none :tangle no 
  (setq org-image-actual-width nil)
  (setq org-confirm-babel-evaluate nil)
  ;; (setq org-latex-pdf-process
  ;;   '("latexmk -pdflatex='pdflatex --syntex=1 -interaction nonstopmode' -pdf -bibtex -f %f"))
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex --syntex=1 -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f"
          "latexmk -pdflatex='pdflatex --syntex=1 -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f"))

  (require 'org-tempo)
  (pyvenv-workon "feniax")

#+end_src

* Challenging problems driving the research :noexport:
** Geometrically nonlinear aeroelastic analysis using complex GFEMs
- Flight loads
- Airframe integrity: flutter or divergence assessment
- Multidisciplinary design optimisation
** Max performance:
- Critical for time-domain simulations
- JAX Just in Time Compilation (JIT)
- Code vectorisation and parallelisation.
- Run on accelerators (GPUs, TPUs, etc.)
** Derivatives of aeroelastic  for design optimisation.
- Using JAX algorithmic differentiation.
*** Efficient derivatives
JAX AD package using pure functions from functional programming style.
*** Compute and arbitrary number of loads cases
Via subcase option of driver class that modifies the xloads option in each case. For example to get the max. loads envelope without having to manage an array of simulations which might also overlap computations.
*** Compute the derivative of function applied to the previous point
If for instance one wants to set an optimisation with boundaries on the maximum loads, it would not make sense to do it for only one atmospheric load case.
*** Perform calculations on different models in a single run
Via the supercase option of driver. This might be used to compute finite differences; or if the response of if the response of a fractured component is to be compared.

* Physical models
** Downwash for DLM
Collocation-points-Normals_atCollocation-Downwash-AIC*Downwash


* Code design and software architecture :noexport:
- Config object with input settings.
- Driver class: initialises all relevant objects such as the simulation, and the systems that will solved in the solution process.
- Simulation class: responsible for running the various systems appropriately, including setting the initial conditions from one system to another.
- System class: set the computations to solve the corresponding system of equations, including the solver library that should be called, the system of equations and the arguments to the solvers.  

  
** Config
config.engine = intrinsic
config.supercase.fems[dict]
config.subcase.system[].xloads
config.simulation.typeof[Serial, parallel, Single]
config.simulation.build_grads
config.simulation.optimize
config.
config.systems[]
config.system.name
config.system.solver.library
config.system.solver.settings
** Main files
*** main
*** shardmain
for gpu testing, it mimics 
*** mpi main
features mpi for parallel computations

** Driver
[[file:~/projects/FENIAX/feniax/drivers/driver.py::class Driver(ABC):][Class]]
Initialises objects in the simulation

pre_simulation()
run_cases()
  -- simulation.trigger()
post_simulation()


  
*** Specialisations
**** intrinsic_driver
[[file:~/projects/FENIAX/feniax/drivers/intrinsic_driver.py::class IntrinsicDriver(Driver, cls_name="intrinsic"):][Class]]

**** intrinsicmeta_driver

** Integration
run
  -- calculate_modalshapes
  -- calculate_modalcouplings
derivatives

** Simulation
- trigger
- _prerun
- _run
  -- system.set_init
- _pull_solution
- _postrun
*** SerialSimulation
-_run
*** ParallelSimulation
-_run
*** SingleSimulation
- _run
** System
- set_init -> q0
- set_name
- set_generator -> dq
- set_solver
- solve -> q
  self.solver(self.dq)
- save


Static and dynamic systems for static and dynamic simulations

Systems with labels:

[[file:~/projects/FENIAX/feniax/systems/intrinsic_system.py::label = f"dq_{self.settings.label}"][intrinsic_system]]
[[file:~/projects/FENIAX/feniax/systems/intrinsicAD.py::label = f"main_{label_sys}_{label_ad}"][AD_system]]
[[file:~/projects/FENIAX/feniax/systems/intrinsicShard.py::self.label = f"main_{label_sys}_{label_shard}"][shard_system]]

*** Architecture for the solution of systems
Chain of requirements between the various ways to run the code.
Fast needs to use the functions in Flexible:
Fast -> Flexible  and similarly:
AD -> Fast
Shard -> Flexible
ShardF -> Shard


- Flexible: workflow of simulations happening sequentially
  major functions for the systems to be solved can be found in dq_...:
  [[file:~/projects/FENIAX/feniax/intrinsic/dq_dynamic.py][dq_dynamic]]
  [[file:~/projects/FENIAX/feniax/intrinsic/dq_static.py][dq_static]]

  
- Fast: entire solution within one function such that memory copies to cuda devices are avoided
  Computation of intrinsic modes, modal couplings, aerodynamic matrices happen within a single function, from within the solution of the system of equations is also called.
  Importantly, the functions within the dq_[] modules are used for the solution, thereby avoiding code duplication and promoting modular design.

  
- AD: the entire solution within one function as well, but needs inputs/ outputs for the differentiation to take place

  The function to be differentiated will call the function in the   

- Shard flexible: workflow as in flexible but with inputs over which to build solutions in parallel.

- Shard fast: Similarly, everything happens within a function, 

- Shard AD: shard the inputs, take a function for the output,


** Forager

- run()
  
- collector(sol)
  gets data from the sol object
  - single
  - mpi

 for instance a bunch of gust simulations

filter
based on the collected data, builds new configs
but how?
the original config object is copied and 3 dictionaries are needed:
1) entries to remove from config
2)  
list of dictionaries is setup:  



spawn 

instantiate driver




** XForces
*** prescribed_follower
*** prescribed_dead
*** gravity
*** modal_aero
** inputs
*** container
*** fields
- value
- description
- default
- options


** UML

#+Name: classes_architecture
#+begin_src plantuml :file UML_software1.png
  abstract Driver {
            +pre_simulation()
            +run_cases()
    }

     class IntrinsicDriver {
             #integration: IntrinsicIntegration
             #simulation: Simulation
             #opt: Optimisation
             #systems: [System]
             -__init__(config: Config)
             #_set_case()
             #_set_integration()
             #_set_simulation()
             #_set_systems()
     }

     class  XLoads {
             +q: [jnp.ndarray]
             +Rab: [jnp.ndarray]
             +GAFs: [jnp.ndarray]
             -__init__(config.systems.loads,
            q, Rab, GAFs)
             +followerF()
             +deadF()
             +gravityF()
             +modalAero()
             }

     /'
      ' abstract class Integration {
      '         +run()
      ' }
      '/

     class IntrinsicIntegration {
                     + <math>phi_1, phi_2, psi_1, psi_2</math>
                     + <math>Gamma_1, Gamma_2 </math>
                     -__init__(X, Ka, Ma)		
                     +run()
                     #compute_modalshapes()
                     #compute_modalcouplings()
     }

     abstract class Simulation {
                     +systems: [System]
                     #workflow: dict[str:str]
                         #opt: Optimisation
                     -__init__(config.simulation,
                    systems, opt, config.simulation)
                     +trigger()
                     #run_systems()
                     #post_run()
             }

     /'
      ' package Simulations {
      '         class SerialSimulation {
      '         }
      '         class ParallelSimulation {
      '         }
      '         class SingleSimulation {
      '         }
      '         class CoupledSimulation {
      '         }
      ' }
      '/

     class SerialSimulation {
     }
     class ParallelSimulation {
     }
     class SingleSimulation {
     }
     class CoupledSimulation {
     }

     abstract class System {
             +set_ic(q0)
             +solve() -> sol
             +pull_solution() -> qs
     }

     class IntrinsicSystem {
            -__init__(name[str], settings:config.Dsystem,
                      fem: config.Dfem,
                      sol: solution.IntrinsicSolution)						
            -dq: callable
            -solver: callable
            +sol: obj
            #set_generator() -> dq
            #set_solver() -> solver

     }

     class ControlSystem {
     }

     class MultibodySystem {
     }

        /'
         ' Simulation <|-- SerialSimulation
         ' Simulation <|-- ParallelSimulation
         ' Simulation <|-- SingleSimulation
         ' Simulation <|-- CoupledSimulation
         '/
     abstract class Optimisation {
           +save_grads()
           +assemble()
     }

     abstract class Sollibs {
           +name()
           +pull_name()
     }
      enum dq {
  - sol_dict
  - dq_label
  }

      enum loads {
  - eta_dict[]
  - eta_{label}
  }

     'Simulation <|-- Simulations
     Simulation <|-- SingleSimulation
     SingleSimulation -- SerialSimulation 
     SerialSimulation -- ParallelSimulation
     ParallelSimulation -- CoupledSimulation					
     'Driver "1" -- "1" Integration : composition
     'Driver "1" -- "1" Simulation : composition'
     IntrinsicIntegration  -* IntrinsicDriver
     Driver <|-- IntrinsicDriver
     IntrinsicDriver  *-- Optimisation						
     IntrinsicDriver  *-- Simulation
     IntrinsicDriver  *- System
     System ..> Simulation
     'Integration <|-- IntrinsicIntegration
     System  <|-- IntrinsicSystem
     System  *- Sollibs
     IntrinsicSystem -- ControlSystem
     IntrinsicSystem o- XLoads
     ControlSystem -- MultibodySystem
#+end_src

#+RESULTS: classes_architecture
[[file:UML_software1.png]]

* Algorithms

$N_N$ Number of discretisation condensed nodes in the model
$N_m$ Number of modal shapes in the solution
$N_t$ Number of time-steps in the integration scheme.
$N_c$ Number of cases to be run in parallel


#+NAME: alg:process
\begin{algorithm}[h!]
\DontPrintSemicolon
\SetKwInOut{Input}{input}
\SetKwInOut{Output}{output}
\Input{Input file: settings.yaml; FE model: $\bm{K}_a$, $\bm{M}_a$, $\bm{X}_a$; Aerodynamic matrices: $\bm{\mathcal{A}}$}
\Output{Nonlinear aeroealastic solutioxn}
\Begin{
 \BlankLine
$\bm{\phi}$, $\bm{\psi}$  $\longleftarrow$ modes($\bm{K}_a$, $\bm{M}_a$, $\bm{X}_a$) \Comment{Intrinsic modes: O($N_n^2 \times N_m$; $N_n \times N_m$)}  \;
$\bm{\Gamma}$  $\longleftarrow$ couplings($\bm{\phi}$, $\bm{\psi}$) \Comment{Nonlinear couplings O($N_n \times N_m^3$; $N_m^3$)} \;
$\bm{q}$  $\longleftarrow$ system($\bm{\Gamma}$, $\bm{\mathcal{A}}$, $\bm{\phi}$, $\bm{X}_a$) \Comment{Modal coordinates: O($\frac{N_l}{N_d} \times N_t \times N_m^3$; $N_l \times N_t \times N_m$)}  \;
$\bm{X}_1$, $\bm{X}_{2}$, $\bm{X}_{3}$   $\longleftarrow$ ivars($\bm{q}$, $\bm{\phi}$, $\bm{\psi}$) \Comment{velocity/strain fields: O($\frac{N_l}{N_d} \times N_t \times N_n \times N_m$; $N_l \times N_t \times N_n$)} \;
$\bm{r}_a$, $\bm{R}_{a}$   $\longleftarrow$ integration($\bm{X}_{3}$, $\bm{X}_a$) \Comment{Positional/rotational fields: O($\frac{N_l}{N_d} \times N_t \times N_n \times N_m$; $N_l \times N_t \times N_n$)}  \;
\BlankLine
}
\caption{Main components in solution process}
\end{algorithm}


* Simulation inputs :noexport:
trim
----
qh = 0
qe becomes unknown 
qalpha != 0 
qhdot = f(gamma2) + eta_h(q0, qe) = 0  # rigid bodies ()
qalphadot = f(gamma2, q2) + eta_alpha(q0, qe)      # rigid bodies
q1dot = f(gamma2) + eta_q(q0, qe)


 Connection with High Fidelity structural model
** Initial Model
- Clamped wing -> good for steady loads and aircraft stability.
- Full A/C model -> Needed for dynamic loads.
- Mass model: Both continuous mass model and lumped masses are suitable for analysis.
  Engines and other components definitely as  lumped masses.
** Input requirements

#+ATTR_ORG: :width  600
[[./FEM3d.png]]
*** Load paths
- interpolation elements to connect to other FE nodes.
- aerodynamic forces applied along these paths

*** Condensed stiffness and mass matrices along load paths
- Should be suitable for eigenvalue analysis

*** Aerodynamic model via GAFs.
- Preliminary DLM model. Automatically built from wing-box?
- Steady loads: Corrections may be needed. 
  
** Output requirements
*** Sectional loads along load-paths
Steady and dynamic aeroelastic loads due to trimmed flight, gusts etc.
*** Aeroelastic stability of configuration
Flutter and divergence points
*** Potentially derivatives of the above via AD.
Critical for large design optimisation problems.
** Data workflow
Well in place for Nastran Models  except for the derivatives provided by Nastran using Sol 200.


* System based solutions :noexport:
TODO: make automatic label as the first
| Type         | Target | Gravity    | BC1        | ModalAero | SteadyAero   | UnsteadyAero | Point loads | q0 approx | Rigid-body           | Nonlinearities         | residualised |
|--------------+--------+------------+------------+-----------+--------------+--------------+-------------+-----------+----------------------+------------------------+--------------|
| 1 static     | Level  | False: "g" | Clamped    | None      | None         | None         | None        | via q2    | 1-quaternion+strains | All -> ""              | None -> ""   |
| 2 Dynamic    | TRIM1  | True: "G"  | Free       | Rogers    | qalpha       | gust         | follower    | via q1    | All-quaternions      | Linear sys -> "l"      | True -> "r"  |
| 3 staticAD   |        |            |            |           |              |              |             |           |                      |                        |              |
| 4 dynamicAD  |        |            |            |           |              |              |             |           |                      |                        |              |
| 3 staticPL   | TRIM2  |            | Prescribed | Loewner   | qx (control) | controls     | dead        |           |                      | Linear sys+disp -> "L" |              |
| 3 dynamicPL  | TRIM2  |            | Prescribed | Loewner   | qx (control) | controls     | dead        |           |                      | Linear sys+disp -> "L" |              |
| 3 staticPLAD | TRIM2  |            | Prescribed | Loewner   | qx (control) | controls     | dead        |           |                      | Linear sys+disp -> "L" |              |
| 3   | TRIM2  |            | Prescribed | Loewner   | qx (control) | controls     | dead        |           |                      | Linear sys+disp -> "L" |              |

| 3 Stability | TRIM2  |            | Prescribed | Loewner   | qx (control) | controls     | dead        |           |                      | Linear sys+disp -> "L" |              |
| 4 Multibody |        |            |            |           |              |              |             |           |                      |                        |              |
| 5 Control   |        |            |            |           |              |              |             |           |                      |                        |              |

| Sol name |                                                 | label                 | Imp |
|----------+-------------------------------------------------+-----------------------+-----|
| 10G1     | Structural static under Gravity                 | [1,0,'G']             | Y   |
| 10g11    | Structural static with follower point forces    | [1,0,'g',0,0,0,0,1]   | Y   |
| 10g121   | Structural static with dead point forces        | [1,0,'g',0,0,0,0,2]   | Y   |
| 10g1331  | Structural static with follower+dead forces     | [1,0,'g',0,0,0,0,3]   | N   |
| 10g15    | Manoeuvre under qalpha                          | [1,0,'g',0,1,1]       | Y   |
| 10G15    | Manoeuvre under qalpha and Gravity              | [1,0,'G',0,1,1]       | N   |
| 10g75    | Manoeuvre under qalpha and controls             | [1,0,'g',0,1,2]       | N   |
| 10G75    | Manoeuvre under qalpha+controls+Gravity         | [1,0,'G',0,1,2]       | N   |
| 20g1     | Clamped Structural dynamics, free vibrations    | [2,0,'g']             | Y   |
| 20G2     | Free Structural dynamic with gravity forces     | [2,0,'G',1]           | Y   |
| 20g2     | Free Structural dynamic                         | [2,0,'g',1]           | Y   |
| 20g11    | Structural dynamic follower point forces        | [2,0,'g',0,0,0,0,1]   | Y   |
| 20g121   | Structural dynamic dead point forces            | [2,0,'g',0,0,0,0,2]   | Y   |
| 20g22    | Free Structural dynamic follower point forces   | [2,0,'g',1,0,0,0,1]   | Y   |
| 20g242   | Free Structural dynamic dead point forces       | [2,0,'g',1,0,0,0,2]   | Y   |
| 11G6     | Static trimmed State (elevator-qalpha,          | [1,1,'G',1,1]         | Y   |
|          | no gravity updating)                            |                       |     |
| 12G2     | Static trimmed State (elevator-qalpha,          | [1,2,'G',1]           | N   |
|          | gravity updating)                               |                       |     |
| 21G150   | Dynamic trimmed State                           | [2,1,'G',1,1,2]       | N   |
| 20g21    | Gust response                                   | [2,0,'g',0,1,0,1]     | Y   |
| 20g273   | Gust response, q0 obtained via integrator q1    | [2,0,'g',0,1,0,1,0,1] | Y   |
| 20g105   | Gust response with steady qalpha                | [2,0,'g',0,1,1,1]     | N   |
| 20g42    | Gust response Free-flight                       | [2,0,'g',1,1,0,1]     | N   |
| 20G42    | Gust response Free-flight and gravity (X error) | [2,0,'G',1,1,0,1]     | N   |
| 20G1050  | Gust response Free-flight, gravity, controls    | [2,0,'G',1,1,2,1]     | N   |
|          |                                                 |                       |     |

#+begin_src python :session py1 :results output
  import feniax.intrinsic.functions as functions
  label = functions.label_generator([2,0,'g',0,1,0,1,0,1])
  print(label)
#+end_src

#+RESULTS:
: 20g546[0m
: [0m


